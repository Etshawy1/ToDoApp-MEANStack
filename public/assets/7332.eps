%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: Logo-card-template-325.eps
%%Creator: Adobe Illustrator(R) 16.0
%%For: Rixwan
%%CreationDate: 6/12/2018
%%BoundingBox: 0 0 800 800
%%HiResBoundingBox: 0 0 800 800
%%CropBox: 0 0 800 800
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 16.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 16.0.0 x682 R agm 4.6676 ct 5.2591%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                               
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.3-c011 66.145661, 2012/02/06-14:56:27        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">Web</rdf:li>
            </rdf:Alt>
         </dc:title>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xmp:CreatorTool>Adobe Illustrator CS6 (Windows)</xmp:CreatorTool>
         <xmp:CreateDate>2018-06-12T14:23:48+05:00</xmp:CreateDate>
         <xmp:ModifyDate>2018-06-12T14:23:49+05:00</xmp:ModifyDate>
         <xmp:MetadataDate>2018-06-12T14:23:49+05:00</xmp:MetadataDate>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>256</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEB9AH0AAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAB9AAAAAEA&#xA;AQH0AAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgBAAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9UYq7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7F&#xA;XYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FX&#xA;Yq7FXYq7FXYq7FXYq7FXYq7FXYqhNQ1XTtOjV724SBXNEDHdj/kqNz9GW4sE8hqItjKQHN2n6rp2&#xA;oxs9lcJOqGjhTup/ylO4+nHLgnjNSFLGQPJF5UydirsVdirsVdirsVdirsVdirsVdirsVdirsVdi&#xA;rsVdirsVdirsVdirsVdirsVdirsVdirsVdirD7+21O5uNbu9PBfU4Jobe2I4c44AqPKITJ8Cuwdt&#xA;zm4xThEY4z+ggk+Z3q63px5AmyObrC21O1uNEu9QHDU7iaa2uSeHN4CrvEJjH8DOoRdxgyzhIZIw&#xA;+gAEeR2ur3pMQRRPNmGahvdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirs&#xA;VdirsVdirsVQOoa5penSJHeTiJ5AWReLMSAaE/CDl+LTZMguIumMpgc0J/i/y7/y1/8AJOX/AJpy&#xA;3+T83837R+tj4se9p/OXltFLNd7KKn93L/zThHZ+Y/w/aP1r4se93lhLiS3udSnT0jqc31mOHusX&#xA;FUjr7lVrjrSARAb8Ar49Vx9/e35nS4jt7bUoE9Q6ZN9Zli7tFxZJOPuFauDREEmB24xXx6Lk7+5f&#xA;bea/L1zLFFBfRvLMQsce4YlugoRgnoc0QSYmgkZInqmM91BAAZWK8gxFATsqlj0B7DMaMSdg2iJI&#xA;J7kNp+uaXqMjx2c4leMBnXiykAmgPxAZbl02TGLkKtrjMHkjsoZOxV2KuxV2KuxV2KuxV2KuxV2K&#xA;uxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxVJn/AOUwh/7Z8v8AyfjzMH+Ln+uPuLX/AB/BOcw2xJfM&#xA;2l6pqMdrDaGBrdJRJdwTs6iQJQopKK/w13IzN0eaGMkyu62I6NeSJPJvn5w/3xp3/I2f/qngrT98&#xA;/kP1r6/J3Pzh/vjTv+Rs/wD1TxrT98/kP1r6/Jryzpmp6dFcw3ZgW3aQyWkMDOwjD1LrV1T4a7jD&#xA;rM0MhBjd1uT1XHEjmnWYTYkyf8phN/2z4v8Ak/JmYf8AFx/XP3Br/j+Cc5htjsVdirsVdirsVdir&#xA;sVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVSZ/wDlMIf+2fL/AMn48zB/i5/rj7i1/wAf&#xA;wRN/rthYT+ld84yU5xvxqslDQohHVvbK8WmnkFx3/R+xMpgc1tvf6h9Qub67gS3VVaS3gduDBFUn&#xA;985qq1+Xw98M8UOMRiSe8/qH4tQTVlj3/KwpP98WH/cST/qlmw/kod8/+VZ/W1eP7vmirDzZq2os&#xA;62On2dy0YBdYtQViAehNIsqy6HHj+uUh74f8eZRyk8gPmjf0n5s/6scP/SaP+qOU+Dp/9UP+k/48&#xA;y4pd32onT7zXZrjhfabHaQcSfVS5Ex5dhx9NP15Vlx4gPTMyP9Wv0piZdQop/wAphN/2z4v+T8mT&#xA;P+Lj+ufuCP4/gnOYbY7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FU&#xA;mf8A5TCH/tny/wDJ+PMwf4uf64+4tf8AH8E2eKKQqXRXKHkhYA0YdxXocxBIjk2Utu5VitZpWCss&#xA;aMzK5CqQATQs2wHucMBcgEHkxD/E+j/8sOmf9Jtnm3/JZP52T/STaPEHcPmEdpmvNO0i6XptrKwA&#xA;Motry2YgduXDKc2l4a8Sch74y/SyjO+Q+1H/AKS8wf8AVm/6eY/6Zj+Dh/1T/YllxS7kRZXmqzTc&#xA;LrTvqsVCfV9ZJN/Diu+QyY8YHplxH3EMgT1CFT/lMJv+2fF/yfkyw/4uP65+4Mf4/gnOYbY7FXYq&#xA;7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FUmf/AJTCH/tny/8AJ+PMwf4u&#xA;f64+4tf8fwUvNmtXukw2s9nxnmeUp+j6EvOCN+BUEgp1r0yeh08cpIlsK+ru9/vRlmY8lfRb6e48&#xA;uR3s8iX0zxPI/pARqx3PpgMQBx+x8X05XqMQjmMQOEX1+/8ASmErjfNIv8RQf9S4n/I2z/5qzO/K&#xA;H/VT8ptfH/R+5E2XmK7q/wBS8uPXb1PRltvorxbK8mkj/Fl+YkkZD0iiv8Ra9/1Llz/yNg/5qyr8&#xA;pi/1WPyLLxJfzUXpmr6pd3PpXOkTWUfEn15JImWo7UVid8qzYIQjcZiR7qLKMiTuKWJ/ymE3/bPi&#xA;/wCT8mE/4uP65+4I/j+Cc5htjsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirs&#xA;VdirsVSZ/wDlMIf+2fL/AMn48zB/i5/rj7i1/wAfwTcohZXKgsteLEbivWhzEstinNHCtrKnoCWL&#xA;i3K3VVPMEEleJop5e+SiSZDej3oPJjPDQv8AqT5f+kO0/wCa82d5f9XH+ml+pp9P837AiLO+srEs&#xA;1l5ZurUvQOYbe3jLAdK8ZBXKsmKU/qyxl75SP6GQIHKLILeUzQRymN4S6hjFJQOtezAFhX6cwJxo&#xA;kXbYCqZFKTJ/ymE3/bPi/wCT8mZh/wAXH9c/cGv+P4JzmG2OxV2KuxV2KuxV2KuxV2KuxV2KuxV2&#xA;KuxV2KuxV2KuxV2KuxV2KuxV2KuxVJn/AOUwh/7Z8v8AyfjzMH+Ln+uPuLX/AB/BOcw2x2KuxV2K&#xA;uxV2KpMn/KYTf9s+L/k/JmYf8XH9c/cGv+P4JzmG2OxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2K&#xA;uxV2KuxV2KuxV2KuxV2KuxVJn/5TCH/tny/8n48zB/i5/rj7i1/x/BOcw2x2KuxV2KuxV2KpMn/K&#xA;YTf9s+L/AJPyZmH/ABcf1z9wa/4/gnOYbY7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7F&#xA;XYq7FXYq7FXYq7FUq1HSL6fUYr+yvVtJo4WgYPD6wKsyv/MlN1zKw54xgYSjxC751+hhKJJsFT/R&#xA;3mf/AKvEX/SGP+quS8XB/MP+m/Yjhl3/AGO/R3mf/q8Rf9IY/wCquPi4P5h/037F4Zd/2O/R3mf/&#xA;AKvEX/SGP+quPi4P5h/037F4Zd/2O/R3mf8A6vEX/SGP+quPi4P5h/037F4Zd/2O/R3mf/q8Rf8A&#xA;SGP+quPi4P5h/wBN+xeGXf8AY79HeZ/+rxF/0hj/AKq4+Lg/mH/TfsXhl3/YqadpF9BqMt/e3q3c&#xA;0kKwKEh9EBVZn/meu7ZHNnjKAhGPCLvnf6ExiQbJTXMVm7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FWK3/wCYmmQavcaTp+n6hrV5Z0F6NOhWRIGO4SSSR4kDewJw8LHiV9Q8&#xA;96Vp2iWmp39teW0l9J6NppbwH69JLyKiNYVJ3NK9aUp440niUtJ/MLTL7V4tHu7G/wBG1G5UvZwa&#xA;lAIvXCLyf0nRpEJUdRWuJCBJR1H8yLC11a+0u00jVNWuNN4C+awt1kSMuodVJeSOpIPYYeFeJL4v&#xA;zk0S4sZNRtNG1i70uEE3F/DaKYY+Iq/ItIp+D9qgNMeFeNO9Y8+aFpujadqyie/g1Z449Nis4/Ul&#xA;meVS6BVYpQ0H7RGABJkh9O/MXS7nWYNHv7C/0W/uwTZJqUKxLORuVjeN5ULDwJx4UcSM8webG0e6&#xA;S3XRNU1QvGJDLp9ussagkjizs8Y5fD0+WICSWvLvnfRNdtb2aATWk2mHjqVldxmK4tzQt+8T4uoU&#xA;9CemJCg2kqfm1YSacdUh8v63LpIHP9IJaxmIxjrIP3vPgO544eFHEnV7540K20bS9YVpLmw1e4gt&#xA;rOSFQTzuSQhYMUoAR8XceGCk8SK8y+ZLDy9YR316krxSzxWyiEKzc5m4KTyZRQHriBak0m2BLsVd&#xA;irsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVYF+UDIul65BJQahHrN6b9Ts/qM4IZh7r&#xA;ShyUmMFvm9o4/wA0/JElztbldQjhZvsCdoVCjw5N0GI5FB5h35omNtW8kwRb6gdet5IwPtfV4wTc&#xA;HxpQrXGPVZdFTyN/ynvnz/mKsv8AqHOJ5BMeZS/8v1VfJfm5AKIup6sqr2AA6YTzRHkUjtf+UO/K&#xA;z/tqW36pMPUo6BlP5xeidJ0RVp+kDrNl+jx+36vPfh/seuRiymsk17zlr3nnWdB0a/ttHsdCWD1Z&#xA;pbf6zPM86c9kLxgIOm38caFIskpVocGpweb/AD/Hqc8N1efo21MtxBEYEf8A0eTiTGXko3Hr8WE8&#xA;go5llH5Vokn5baEjjkj2gVlPQgkgjBLmmPJ5tYzLH+SnkqeZ+MUOtwvLIx2VFvZ9yT0AGS6lh/CG&#xA;efnHv5WtCP8Aq52P/J4ZGPNnPkzvIsnYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FX&#xA;YqxrWPy78sapqbao8U1pqMgCz3VlPLavKq9BJ6TLy8K9ffCJIMQr3Xkbyzd6BDoN3atc6fbsZIfW&#xA;lleVZCzN6izMxlDVc78vbptja8IUtE8geWtH1E6nbwyz6jxMaXl3PLcyIhr8KGVm4ihpt2xJURCZ&#xA;2Gg6ZYajqOo2sRS71V45L1yzMGaJOCUBJC7eGNrSnp3lrR9Osr2ytISltqE01xdIXZuUlx/eEEkk&#xA;V9sbWmHedvJ0Is/J2i6bZTyaVY6rCJlhMpaK3CPydpUPNAK/b5CnjhBYkck/0z8uvK2n6nHqiwzX&#xA;eoQVFtcXtxNdNFXr6Ymdwp9+uDiKRELtb/L7yzrGpnVZ4prfUygje9tJ5baVkGwDmJl5bbb4gpMQ&#xA;q6L5G8t6Ol8LOCQyakgjvp5ppppZFAIALyMxFAx6YkqIhM9H0ix0fTLbTLBDHZ2iCOFCxYhR/lMS&#xA;TgJSAkt35a8s6P5Jl0QaVLfaHbo3+4yJXuJnDymQ8AW5lg7lhRqjthvdFCnmN/5f0bVLjTdJ8q6B&#xA;rMM6X0El1faiLxLa2t4mqwpO5Wvw7DjXrTJ33tddz3TK212KuxV2KuxV2KuxV2KuxV2KuxV2KuxV&#xA;2KuxV2KuxV2KuxV2KuxVZPL6UEktK+mpanjxFcVSWfzDfv8AUI9NsFuri8tTeuksxhRI14fCHEcv&#xA;J2MlFFANjUjDSLULLzpa3kCX0axRaYyhxLPMEncGBJ/3UIV+dBIAfjG/0VaW0To+vX93cx219YLZ&#xA;S3Nt9ctAsxlDRhlVlkrHHwkT1EqByG/XEhQUNqHmu6sIo3urezg9W7Nkkk94YoQyxSSlnkaD4doq&#xA;Lsak40tobUPzDs7H9JxTWxa7sPT9CGKQMt0Ht0uJGhchaiJWYvtso5dwMPCjiVW87FLp4pLWMxmW&#xA;eKH05+c3+j3ItmeWL019NSxqpDN2G1cFLaZanr62OqWWniEyNeBy03LikRFFi9TZj+9kYItBjSSU&#xA;sn85zwRQtPBZWpnnuoEe6vTDFWzlaJ6yGA7sy1UU6eGNItlArQchQ9wNxX8MDJvFXYq7FXYq7FXY&#xA;q7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYqtljWWJ42+y6lW+RFMVSRvKUJjtgNQvEltYW&#xA;tYp0MKyfV3ChojSIAg+mprTkD0Iw2im/8H6YpSOKSWKxVo3fTlKGB2hRY0J5I0g+FFqFcA0371bW&#xA;lbR/LlrpkolS4uLl0hW2tzcOH9KBTURpxVajYVLVY0FTiSoCtc6LBMY2WaWCWG4a7jlj4FhI8bRN&#xA;s6utCkjDpja0pzeXdOngvo5gZH1BXWec8fUHqQJbvwIX4eSRLWg642tLn0CwOn3FknKNbmWSd5k4&#xA;+oJJJjPyBIIPGRvhBBGNrSjL5W024mkubwvd3jiJUu5RF6sXoOZI/SKIgUq7cumNrSqdAtl9JoJ5&#xA;reWGW4mSVChat3IZZVIkR1oWbbaoxtaTMCgArX3wJdirsVdirsVdirsVdirsVdirsVdirsVdirsV&#xA;dirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirFv+&#xA;Vo+Qv+rvH/wEv/NGZf5DN/Na/Fj3u/5Wj5C/6u8f/AS/80Y/kM381fFj3u/5Wj5C/wCrvH/wEv8A&#xA;zRj+QzfzV8WPe7/laPkL/q7x/wDAS/8ANGP5DN/NXxY97v8AlaPkL/q7x/8AAS/80Y/kM381fFj3&#xA;u/5Wj5C/6u8f/AS/80Y/kM381fFj3u/5Wj5C/wCrvH/wEv8AzRj+QzfzV8WPe7/laPkL/q7x/wDA&#xA;S/8ANGP5DN/NXxY97v8AlaPkL/q7x/8AAS/80Y/kM381fFj3u/5Wj5C/6u8f/AS/80Y/kM381fFj&#xA;3u/5Wj5C/wCrvH/wEv8AzRj+QzfzV8WPe7/laPkL/q7x/wDAS/8ANGP5DN/NXxY97v8AlaPkL/q7&#xA;x/8AAS/80Y/kM381fFj3u/5Wj5C/6u8f/AS/80Y/kM381fFj3u/5Wj5C/wCrvH/wEv8AzRj+Qzfz&#xA;V8WPe7/laPkL/q7x/wDAS/8ANGP5DN/NXxY97v8AlaPkL/q7x/8AAS/80Y/kM381fFj3u/5Wj5C/&#xA;6u8f/AS/80Y/kM381fFj3u/5Wj5C/wCrvH/wEv8AzRj+QzfzV8WPe7/laPkL/q7x/wDAS/8ANGP5&#xA;DN/NXxY97v8AlaPkL/q7x/8AAS/80Y/kM381fFj3u/5Wj5C/6u8f/AS/80Y/kM381fFj3u/5Wj5C&#xA;/wCrvH/wEv8AzRj+QzfzV8WPe7/laPkL/q7x/wDAS/8ANGP5DN/NXxY97v8AlaPkL/q7x/8AAS/8&#xA;0Y/kM381fFj3u/5Wj5C/6u8f/AS/80Y/kM381fFj3u/5Wj5C/wCrvH/wEv8AzRj+QzfzV8WPe7/l&#xA;aPkL/q7x/wDAS/8ANGP5DN/NXxY97v8AlaPkL/q7x/8AAS/80Y/kM381fFj3u/5Wj5C/6u8f/AS/&#xA;80Y/kM381fFj3u/5Wj5C/wCrvH/wEv8AzRj+QzfzV8WPe7/laPkL/q7x/wDAS/8ANGP5DN/NXxY9&#xA;75rzqHDdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirs&#xA;VdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsV&#xA;dirsVdirsVdirsVTzyKqt5y0ZWAKm7iBB3B+IZj6r+6l7mUPqD6b+p2n++I/+BX+mctxHvc2mntr&#xA;FEZ3hjVFBZmKrQAbk9MQZE0F2UrP9FXlslzapFLBIKo4QUI6dxk8kZwlwy2Kgg7hW+p2n++I/wDg&#xA;V/pkOI96076naf74j/4Ff6Y8R71p31O0/wB8R/8AAr/THiPetO+p2n++I/8AgV/pjxHvWnfU7T/f&#xA;Ef8AwK/0x4j3rTvqdp/viP8A4Ff6Y8R71p31O0/3xH/wK/0x4j3rTvqdp/viP/gV/pjxHvWnfU7T&#xA;/fEf/Ar/AEx4j3rTvqdp/viP/gV/pjxHvWnzV+YiqvnbWFUBVFwaAbDoM6jR/wB1H3OHk+oscOR1&#xA;HN9K9iIROmnYv1/oDsot7TwYdw+TsbXwYdw+TsbXwYdw+TsbXwYdw+TsbXwYdw+TsbXwYdw+TsbX&#xA;wYdw+TsbXwYdw+TsbXwYdw+TsbXwYdw+TsbXwYdw+TsbXwYdw+ThluE+oPP+1OOI7PyEAfw/7uLe&#xA;Zr487FXYqnvkP/lM9F/5jIf+JjMfV/3Uvcyh9QfUGco5yTao0zRXh5SemjUYhkVFQRoxVgzIfj5E&#xA;dczMAFx5fgn7muXVQsLud1MgbiJ5omCoV4KOaoygAuKN3o2WZcYG3cD9xPkiJQ2va/rtnfXcNtGF&#xA;jjW2+rk2lxcclllVbicvEyrSBCW9PqaddxmAAzJSyLzR54eJbk2UYjV+LQGzuFkkRVgb1F5S1Tn6&#xA;z0VlPHjQ1ocNBbKEXz75tNjDcQ2AuzPHDLFJHZ3KxM8kYeS3qXYll5fC4+Fv9iatBHEUfe+b/M2n&#xA;WM95eWsZgW0N0si204WNzHcMsUlHfo8Ccm+H7VNqjGk2WcZFk7FXYq7FXYq7FXzL+Y3/ACnGs/8A&#xA;MQf1DOp0X91H3OFk+osbODUc30z2G/xaf9f/AHodlD2zsVdirsVdirlUsQqgliaADqTipNL54J4J&#xA;WinjaKVDRo3BVgfcHfADbGExIXE2FmFk7FXYq7FXYq4ZZh+oPPe1f/Gdk/zf93FvM58bdirsVT3y&#xA;H/ymei/8xkP/ABMZj6v+6l7mUPqD6gzlHOSW8GjyT3UV9cRwTcz6bNIiOqyQopKhvGnhmbj8QAGI&#xA;JHu8y1muqlAug20MUNtdw3E5miCOWhMpBlX4aoFJyUjlkSZRIFHvrke9A4RyRGpWPmOa45WOpx2k&#xA;PKvBoFlJUqg41NKUKs1e9aeBzBbN0JcaP5vdwYdf9JaR1BtoWFUj4vsVr8b/AB9dugHg2For7LSP&#xA;MsFzbc9WQ2Fv8BtI7eKPnGK8QSFPGgpslP442tFObqys7tFS7gjuERhIiyorgOOjAMDQivXAlWxV&#xA;2KuxV2KuxV2KvmX8xv8AlONZ/wCYg/qGdTov7qPucLJ9RY2cGo5vpnsN/i0/6/8AvQ7KHtnYq7FX&#xA;Yqq2lubm7htweJmkWMMd6ciBX8cBNC2GWfBEy7hbINGs9Fhv5pbfUJDd2UcjwR3McFsjyj92gWV7&#xA;ggFWbn06DxymZkRy5/judXqsuaUAJQHDMi+EylQ5nYQ+HxW+ZCbq1s7+/u4pNTPOG5jga3m5ASNI&#xA;JSYJKD4ZOAWn7Pyw49iQBsy0HolKEIkY9iL4h0Ar1DvF35pNqdklnd+jHIZYzHFNHIy8GKzRLKtV&#xA;BehAffc5ZE2HP0+U5I2RRsjv5Ejy7kLkm52KuxV2KuGWYfqDz3tX/wAZ2T/N/wB3FvM58bdirsVT&#xA;3yH/AMpnov8AzGQ/8TGY+r/upe5lD6g+oM5RznYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXzL+Y3/Kc&#xA;az/zEH9QzqdF/dR9zhZPqKUDRtQbR21dIi1hHN9XllXfhJxDDkOwblschqJjjEetPovsPqYDHPET&#xA;6zKx5iggsqe9dirsVdiqM0b/AI7Fj/zERf8AExkZ8i0ar+6n/VP3Ml0hLsX1kzJDPbSS3Qjt4RbL&#xA;OWTlVpjMvE0r8Jcnvx3yidUfh3uo1RjwSoyEgI7nj4en08J+dfFF63KUkuE+rCH4PsPe6VGw+H/f&#xA;SxM33NU4ID8VJp0kbAPFe/8AMzH7TL9DFfMH+98X/MHY/wDUHFl+Pl8T97udF9B/rz/3cktyblux&#xA;V2KuxVwyzD9Qee9q/wDjOyf5v+7i3mc+NuxV2Kp75D/5TPRf+YyH/iYzH1f91L3MofUH1BnKOc7F&#xA;XYq7FXYq7FXYq7FWK6v55h07WWsUtzfIYBJGts0fP1ENwZwzSOiD01tW2rXlt8iAxMkui/NKEssT&#xA;aVcyyztdvZmL0lWW3tZJwZP3kg4kJb7hqVJ2w8K8SK1bzjqVrdXNzbLbPpFnDYzypIJBPIt9Iyfu&#xA;2DcQVC1ClDU7YgKSpf8AK19GE1tC9jeJJcxx3QHGN+NrL6fpzsUdtj6y1X7Q39qvCvEzbIsnzL+Y&#xA;3/Kcaz/zEH9QzqdF/dR9zhZPqLNPyd17y1FpV/oWrzRI97NyWG4AEUiMipx5N8Najoc1/aeOXGJD&#xA;oHcdn6TUSw+NiB9EuceY2HxS/wA/flHe6W0mo6Ej3emGrvbCrSwjrt3dB49R38cqwasS2lze+7G9&#xA;poZgMef05O/pL9R+z7nm+Zr1jsVdiqM0b/jsWP8AzERf8TGRnyLRqv7qf9U/cimsdfttRlntrW5j&#xA;kDvxdYn6EkeGR4okbloGbBPGIylEih1C28tvMt6Va6trqUoCFLRPsD/scQYjkyxZNPj+mUR8Q15j&#xA;R01JEdSrraWSsrChBFpECCDjj5fE/euhIOMkfz5/7uSWZY5jsVdirsVTaLytrsmiXGuG1aPS7YIW&#xA;uJPgD+o6xr6YO77t1G2HFlj4gje7yHtb2jhGknh4ryS4dh0qQO/dySrNi+UuxV2Ko/QL25sdYtL2&#xA;1QS3Ns4mgjYFgzoOSghSCakdjleWIlEg8imJovRP+VvfmL/1Zrf/AKRrr/qrmt/k7B/OPzH6m7xZ&#xA;dzv+VvfmL/1Zrf8A6Rrr/qrj/J2D+cfmP1L4su53/K3vzF/6s1v/ANI11/1Vx/k7B/OPzH6l8WXc&#xA;7/lb35i/9Wa3/wCka6/6q4/ydg/nH5j9S+LLuTe2/MrztJBHI2mQhmUFgIJ9j3/3Zl8OytORZkfm&#xA;P1MTnn3Kn/KxvOf/AFbIf+RE/wDzXkv5I0388/OP6kePPud/ysbzn/1bIf8AkRP/AM14/wAkab+e&#xA;fnH9S+PPud/ysbzn/wBWyH/kRP8A814/yRpv55+cf1L48+5IdW806sZfi8raXKb+TneyTafJJyZd&#xA;leSjEtTm3WvfMXU6DDCuGRPxD0/s92dg1cchzEx4aqiBfP8AnWnf6Z1NnFwYtDAh5oHbT7j1l9YM&#xA;0gVRI1Q5duXFiDXfrmv8KPn8w5/8k6Xlw5b/AK8K+fD96gNa1Ka9+tSWWhi8syqWV2+nXBbjGgKC&#xA;OTmXSnMhdqDfcHbD4MPP5hnLsbSCjWT/AE8LG/8AV/Tfk1cXd1aIWWx8uN6NLyJYtNuCTMaAsnE7&#xA;SfCNzQ7DtiMUD/O+YY4+ydJIj05RvW8sfz5Jd/yt/wDMb/qy2/8A0jXX/VXLfymPv+0O3/0MaD/V&#xA;Zf6aH/EsA8yX93qGt3V9eRiK6uSsk0ShlCuyAkBWJI+k5utNEDGAHzztXBDDqZwgbjE7H+xKzleo&#xA;5voHsN/i0/6/+9DJfLn5iea9ACx2l4ZbVf8Aj0uP3sVPBankv+xIzByaeE+Yd/ruw9Lqd5xqX84b&#xA;H9vxTLVPMHkbzMTLqNjJoWrP9q+swJrd27tLD8Df8Dv4k5COOcOR4g4mn0Wt0m2OQzYv5stpD3S3&#xA;+3b3MW1DSWtKyQ3MF7bV+Ge3eux6co24yp/slGXxnfk7nBqePYxlCXcR+n6T8Cgcm5LsVdirsVdi&#xA;rsVVbWzu7uYQWkElxM32YolZ2PyVQTgJA5sMmWEBciIjz2Znon5PebdQAlvETSrWlWkuT8dPaNak&#xA;f7LjmNPVwHLd5/V+1GlxbQJyS/o8vn+q2V2Oi/lF5S/e6jqEWragnUNScBh2WGLkq/7Mn55RKebJ&#xA;yFB0ubV9qa3bHA4of6X/AGRo/JKfPn5t2WuaNcaJptg8drP6Ya5mYKwEbq4CxryHVB+19GZGi0pj&#xA;kEifxTq+0vZqen0k82SYMhWw85Acz7+55nm7eLdirsVT3yH/AMpnov8AzGQ/8TGY+r/upe5lD6g+&#xA;k9W1WHTLUXEsU0ylggS3jMjVIJqQOg26nOUDmkpL/wArA0zmE+oaj6jGip9UflQ1AYj9kEqQC1MN&#xA;I4kCv5raNLfS2dtp2oXEkUYlPpwAllKB6heXKnxKK0pU4eFeJMj53sgtvy0/UPVuIzJ6QtmJSjMp&#xA;VzWgaq+PTfBSbZBBMJoI5lVlWRQ4VxxYBhWhHY4EpBN5ySPUpbAaRqTvGkziYQKIm9FWaiszjeTh&#xA;ROxrhpFqUnnuBIrqQaRqbi1l9IhLcEv/AHnxp8VOP7mlSR9pexrjSOJTufzAjgsra7/QequlyC3B&#xA;bdecfxyIBIhfkD+6rQA7EY0vEyp24ozULcQTxG5NPDAyYzD55SVbthoupxizALepAqclLhSUBepp&#xA;WtOv3YaY8SnL+YMMdnHcnRNUb1BIfSW3BZfTIAqeXH4q7UJPjjS8SIXzmh1a3046RqSG4ZFW5aFf&#xA;RHqJyqzByVC9GqNjjSbZHgS+ZfzG/wCU41n/AJiD+oZ1Oi/uo+5wsn1FjZwajm+mew3+LT/r/wC9&#xA;Dsoe2dirsVR1joepX0Pr20atF6qwBmljT949OK0dlO9chKYHNxs2rx4zUjvV8idh7guuPL+rW6xt&#xA;LCAJZXt0pJG1ZI39Nh8LGgDbcjtiMgKIa3FK6PIA8jyIsdO7pzVF8r62z8Pq6q1JSA8sSV+ruI5A&#xA;OTjdXNKdT2weLFge0MNXfd0J+oWOncuHlTXiR/o6ivpbtLEo/fo0kdSX2qqE+3fHxYo/lHB39/SX&#xA;8Jo9O8qEeiambiGIW/N5UMyKGUgoodjVgaA0ifYmu2HjFNp1ePhJuqNfHb9Y8t00SG+sLWS6bRLD&#xA;jbrC8ksztI1J6NGRE87BuQO9E270yFgmrP4+DhGUMshHxcnqvYbfTz3ENvmu/wCVjebo4Tb2l4lj&#xA;b9obOCC3UfL00U/jg/Lw6i0fyFpSeKUTOXfKUpfeUmv9Z1fUGLX97PdE7/vpXk/4kTlsYAcg7DDp&#xA;cWL6Ixj7gAg8k3uGWYfqDz3tX/xnZP8AN/3cW8znxt2KuxVMPL+qxaRrljqk0byxWUyTPHHQuwQ1&#xA;otSBXKs8DKBA6hMTRerf9DEeX/8Aqzaj/wADH/zXmi/k3I5XjB3/AEMR5f8A+rNqP/Ax/wDNeP8A&#xA;JuRfGDv+hiPL/wD1ZtR/4GP/AJrx/k3IvjB3/QxHl/8A6s2o/wDAx/8ANeP8m5F8YO/6GI8v/wDV&#xA;m1H/AIGP/mvH+Tci+MHf9DEeX/8Aqzaj/wADH/zXj/JuRfGDv+hiPL//AFZtR/4GP/mvH+Tci+MH&#xA;f9DEeX/+rNqP/Ax/814/ybkXxg7/AKGI8v8A/Vm1H/gY/wDmvH+Tci+MHf8AQxHl/wD6s2o/8DH/&#xA;AM14/wAm5F8YO/6GI8v/APVm1H/gY/8AmvH+Tci+MHf9DEeX/wDqzaj/AMDH/wA14/ybkXxg7/oY&#xA;jy//ANWbUf8AgY/+a8f5NyL4weWeZtZh1vXr3VYInhivJPUSKUAOoIAo1CRm808DDGIno40zZtJZ&#xA;7homAETyVFaoKjIZoEnZ672d9ocWhxShOMiZSvau4eal9ef/AJZpf+Byrwy9B/o4038yf+x/W768&#xA;/wDyzS/8Dj4ZX/Rxpv5k/wDY/rd9ef8A5Zpf+Bx8Mr/o4038yf8Asf1u+vP/AMs0v/A4+GV/0cab&#xA;+ZP/AGP63fXn/wCWaX/gcfDK/wCjjTfzJ/7H9bvrz/8ALNL/AMDj4ZX/AEcab+ZP/Y/rbN/Ixqbe&#xA;YnxKnB4RUe2+m/mT/wBj+tttQlanKCY0AAqpOw6DHwige2+mH8E/9j+tb9ef/lml/wCBw+GU/wCj&#xA;jTfzJ/7H9bvrz/8ALNL/AMDj4ZX/AEcab+ZP/Y/rd9ef/lml/wCBx8Mr/o4038yf+x/W768//LNL&#xA;/wADj4ZX/Rxpv5k/9j+tfFdM8gUwyJX9ploBtk8UCJOr7a9qsGq0s8MYyEpVzrpIHv8AJE5lvBux&#xA;V2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV&#xA;2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2&#xA;KuxV2KuxV//Z</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#">
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:OriginalDocumentID>uuid:65E6390686CF11DBA6E2D887CEACB407</xmpMM:OriginalDocumentID>
         <xmpMM:DocumentID>xmp.did:11084C41226EE8118DA8A3B555112E4B</xmpMM:DocumentID>
         <xmpMM:InstanceID>xmp.iid:11084C41226EE8118DA8A3B555112E4B</xmpMM:InstanceID>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>xmp.iid:E14846DC136EE8118DA8A3B555112E4B</stRef:instanceID>
            <stRef:documentID>xmp.did:E14846DC136EE8118DA8A3B555112E4B</stRef:documentID>
            <stRef:originalDocumentID>uuid:65E6390686CF11DBA6E2D887CEACB407</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:4DDBBA6A126EE8118DA8A3B555112E4B</stEvt:instanceID>
                  <stEvt:when>2018-06-12T12:31:33+05:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:E14846DC136EE8118DA8A3B555112E4B</stEvt:instanceID>
                  <stEvt:when>2018-06-12T12:40:24+05:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:11084C41226EE8118DA8A3B555112E4B</stEvt:instanceID>
                  <stEvt:when>2018-06-12T14:23:49+05:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/">
         <illustrator:StartupProfile>Web</illustrator:StartupProfile>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/">
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>800.000000</stDim:w>
            <stDim:h>800.000000</stDim:h>
            <stDim:unit>Pixels</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>White</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>255</xmpG:red>
                           <xmpG:green>255</xmpG:green>
                           <xmpG:blue>255</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>Black</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>0</xmpG:red>
                           <xmpG:green>0</xmpG:green>
                           <xmpG:blue>0</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Grays</xmpG:groupName>
                  <xmpG:groupType>1</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=0 G=0 B=0</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>0</xmpG:red>
                           <xmpG:green>0</xmpG:green>
                           <xmpG:blue>0</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <pdf:Producer>Adobe PDF library 10.01</pdf:Producer>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -800 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 800 li
800 800 li
800 0 li
cp
clp
0 0 mo
800 0 li
800 800 li
0 800 li
0 0 li
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 0 cmyk
ef
0 494.916 mo
800 494.916 li
800 800 li
0 800 li
0 494.916 li
cp
.704829 .613764 0 0 cmyk
ef
46.7188 551.104 mo
378.914 551.104 li
378.914 739.92 li
46.7188 739.92 li
46.7188 551.104 li
cp
0 0 0 0 cmyk
ef
410.894 551.104 mo
743.103 551.104 li
743.103 739.92 li
410.894 739.92 li
410.894 551.104 li
cp
0 .919188 0 0 cmyk
ef
339.324 670.355 mo
346.319 670.355 li
346.226 669.299 345.958 668.51 345.517 667.988 cv
344.848 667.159 343.965 666.758 342.881 666.758 cv
341.905 666.758 341.089 667.079 340.421 667.734 cv
339.765 668.39 339.391 669.259 339.324 670.355 cv
339.324 670.355 li
cp
346.292 673.78 mo
348.499 674.061 li
348.165 675.345 347.523 676.348 346.586 677.043 cv
345.65 677.752 344.447 678.113 342.989 678.113 cv
341.156 678.113 339.712 677.552 338.628 676.415 cv
337.559 675.291 337.023 673.699 337.023 671.666 cv
337.023 669.553 337.559 667.922 338.642 666.758 cv
339.739 665.594 341.143 665.006 342.868 665.006 cv
344.554 665.006 345.918 665.581 346.975 666.718 cv
348.044 667.868 348.579 669.473 348.579 671.532 cv
348.579 671.666 348.566 671.854 348.566 672.108 cv
339.204 672.108 li
339.284 673.485 339.671 674.542 340.367 675.265 cv
341.076 676 341.945 676.361 342.989 676.361 cv
343.765 676.361 344.433 676.16 344.981 675.746 cv
345.543 675.331 345.971 674.676 346.292 673.78 cv
346.292 673.78 li
cp
326.645 671.56 mo
326.645 673.164 326.992 674.368 327.701 675.171 cv
328.396 675.974 329.292 676.361 330.362 676.361 cv
331.419 676.361 332.289 675.974 332.998 675.171 cv
333.707 674.354 334.054 673.138 334.054 671.492 cv
334.054 669.94 333.693 668.765 332.998 667.976 cv
332.289 667.173 331.406 666.771 330.362 666.771 cv
329.292 666.771 328.396 667.173 327.701 667.962 cv
326.992 668.765 326.645 669.954 326.645 671.56 cv
326.645 671.56 li
cp
324.464 671.56 mo
324.464 669.232 325.106 667.521 326.403 666.396 cv
327.487 665.474 328.798 665.006 330.362 665.006 cv
332.075 665.006 333.492 665.567 334.589 666.704 cv
335.686 667.828 336.234 669.393 336.234 671.386 cv
336.234 672.991 335.994 674.261 335.512 675.185 cv
335.017 676.107 334.322 676.829 333.385 677.338 cv
332.462 677.859 331.446 678.113 330.362 678.113 cv
328.597 678.113 327.179 677.552 326.096 676.429 cv
325 675.291 324.464 673.673 324.464 671.56 cv
324.464 671.56 li
cp
311.343 675.813 mo
315.048 675.813 li
316.185 675.813 317.081 675.706 317.737 675.491 cv
318.378 675.277 318.9 674.983 319.288 674.596 cv
319.823 674.047 320.251 673.312 320.559 672.389 cv
320.853 671.466 321.014 670.355 321.014 669.045 cv
321.014 667.226 320.719 665.835 320.117 664.858 cv
319.529 663.883 318.807 663.227 317.951 662.893 cv
317.335 662.651 316.346 662.531 314.981 662.531 cv
311.343 662.531 li
311.343 675.813 li
cp
309.043 677.846 mo
309.043 660.498 li
315.021 660.498 li
316.372 660.498 317.402 660.578 318.111 660.752 cv
319.101 660.979 319.943 661.395 320.652 661.996 cv
321.562 662.772 322.244 663.748 322.699 664.952 cv
323.153 666.156 323.381 667.533 323.381 669.085 cv
323.381 670.396 323.234 671.56 322.926 672.576 cv
322.619 673.593 322.217 674.435 321.736 675.104 cv
321.254 675.772 320.732 676.294 320.157 676.682 cv
319.596 677.057 318.9 677.351 318.098 677.552 cv
317.282 677.752 316.359 677.846 315.302 677.846 cv
309.043 677.846 li
cp
290.599 677.846 mo
290.599 665.273 li
292.511 665.273 li
292.511 667.052 li
293.434 665.688 294.758 665.006 296.511 665.006 cv
297.26 665.006 297.955 665.14 298.597 665.42 cv
299.226 665.688 299.707 666.049 300.015 666.49 cv
300.336 666.919 300.55 667.454 300.684 668.056 cv
300.75 668.456 300.791 669.139 300.791 670.128 cv
300.791 677.846 li
298.664 677.846 li
298.664 670.209 li
298.664 669.339 298.583 668.684 298.423 668.256 cv
298.249 667.828 297.955 667.493 297.541 667.226 cv
297.112 666.972 296.617 666.852 296.056 666.852 cv
295.146 666.852 294.371 667.133 293.715 667.707 cv
293.06 668.282 292.725 669.379 292.725 670.984 cv
292.725 677.846 li
290.599 677.846 li
cp
278.133 677.846 mo
278.133 660.498 li
280.273 660.498 li
280.273 666.745 li
281.263 665.581 282.507 665.006 284.018 665.006 cv
284.941 665.006 285.744 665.193 286.426 665.554 cv
287.108 665.929 287.603 666.424 287.897 667.079 cv
288.191 667.721 288.338 668.657 288.338 669.888 cv
288.338 677.846 li
286.198 677.846 li
286.198 669.9 li
286.198 668.831 285.971 668.056 285.516 667.573 cv
285.062 667.093 284.406 666.852 283.577 666.852 cv
282.948 666.852 282.36 667.012 281.798 667.333 cv
281.25 667.667 280.862 668.108 280.621 668.67 cv
280.38 669.232 280.273 669.995 280.273 670.984 cv
280.273 677.846 li
278.133 677.846 li
cp
267.059 671.56 mo
267.059 673.164 267.406 674.368 268.115 675.171 cv
268.811 675.974 269.693 676.361 270.764 676.361 cv
271.833 676.361 272.703 675.974 273.412 675.171 cv
274.121 674.354 274.469 673.138 274.469 671.492 cv
274.469 669.94 274.107 668.765 273.412 667.976 cv
272.703 667.173 271.82 666.771 270.764 666.771 cv
269.693 666.771 268.811 667.173 268.115 667.962 cv
267.406 668.765 267.059 669.954 267.059 671.56 cv
267.059 671.56 li
cp
264.878 671.56 mo
264.878 669.232 265.521 667.521 266.818 666.396 cv
267.901 665.474 269.212 665.006 270.764 665.006 cv
272.489 665.006 273.907 665.567 275.003 666.704 cv
276.1 667.828 276.648 669.393 276.648 671.386 cv
276.648 672.991 276.408 674.261 275.926 675.185 cv
275.431 676.107 274.736 676.829 273.8 677.338 cv
272.877 677.859 271.86 678.113 270.764 678.113 cv
269.012 678.113 267.594 677.552 266.497 676.429 cv
265.414 675.291 264.878 673.673 264.878 671.56 cv
264.878 671.56 li
cp
253.684 672.924 mo
255.73 672.644 li
255.797 673.967 256.038 674.877 256.479 675.371 cv
256.92 675.853 257.536 676.107 258.312 676.107 cv
258.887 676.107 259.381 675.974 259.796 675.706 cv
260.21 675.438 260.505 675.077 260.666 674.622 cv
260.813 674.181 260.893 673.445 260.893 672.456 cv
260.893 660.498 li
263.193 660.498 li
263.193 672.322 li
263.193 673.767 263.02 674.89 262.671 675.692 cv
262.324 676.481 261.762 677.083 261 677.512 cv
260.25 677.926 259.354 678.14 258.338 678.14 cv
256.813 678.14 255.65 677.699 254.834 676.829 cv
254.031 675.946 253.644 674.649 253.684 672.924 cv
253.684 672.924 li
cp
.746975 .580102 .496712 .306798 cmyk
f
144.891 722.519 mo
144.891 717.489 li
145.654 717.489 li
145.654 718.198 li
145.814 717.957 146.015 717.757 146.282 717.609 cv
146.55 717.463 146.844 717.383 147.178 717.383 cv
147.553 717.383 147.86 717.463 148.088 717.609 cv
148.329 717.771 148.502 717.984 148.596 718.265 cv
148.998 717.677 149.519 717.383 150.161 717.383 cv
150.656 717.383 151.043 717.517 151.311 717.797 cv
151.579 718.078 151.712 718.492 151.712 719.067 cv
151.712 722.519 li
150.856 722.519 li
150.856 719.349 li
150.856 719.014 150.83 718.773 150.776 718.613 cv
150.723 718.466 150.629 718.345 150.482 718.252 cv
150.335 718.158 150.161 718.118 149.96 718.118 cv
149.613 718.118 149.318 718.238 149.078 718.466 cv
148.85 718.706 148.73 719.081 148.73 719.603 cv
148.73 722.519 li
147.874 722.519 li
147.874 719.255 li
147.874 718.88 147.807 718.6 147.673 718.399 cv
147.526 718.212 147.299 718.118 146.978 718.118 cv
146.75 718.118 146.523 718.185 146.322 718.305 cv
146.122 718.439 145.975 718.613 145.881 718.867 cv
145.787 719.108 145.747 719.456 145.747 719.91 cv
145.747 722.519 li
144.891 722.519 li
cp
140.049 720.004 mo
140.049 720.646 140.183 721.127 140.464 721.448 cv
140.745 721.77 141.106 721.93 141.534 721.93 cv
141.962 721.93 142.31 721.77 142.591 721.448 cv
142.872 721.127 143.019 720.633 143.019 719.977 cv
143.019 719.361 142.872 718.894 142.591 718.573 cv
142.31 718.252 141.949 718.091 141.534 718.091 cv
141.106 718.091 140.745 718.252 140.464 718.573 cv
140.183 718.88 140.049 719.361 140.049 720.004 cv
140.049 720.004 li
cp
139.167 720.004 mo
139.167 719.081 139.434 718.386 139.956 717.944 cv
140.384 717.569 140.906 717.383 141.534 717.383 cv
142.229 717.383 142.792 717.609 143.233 718.064 cv
143.661 718.506 143.888 719.135 143.888 719.937 cv
143.888 720.579 143.794 721.087 143.594 721.462 cv
143.407 721.836 143.112 722.117 142.751 722.317 cv
142.377 722.532 141.976 722.625 141.534 722.625 cv
140.825 722.625 140.264 722.411 139.822 721.956 cv
139.394 721.502 139.167 720.859 139.167 720.004 cv
139.167 720.004 li
cp
137.936 720.686 mo
138.766 720.793 li
138.672 721.368 138.444 721.823 138.07 722.144 cv
137.682 722.465 137.228 722.625 136.679 722.625 cv
135.983 722.625 135.435 722.411 135.021 721.956 cv
134.592 721.502 134.392 720.859 134.392 720.03 cv
134.392 719.482 134.485 719.014 134.659 718.6 cv
134.833 718.198 135.114 717.891 135.475 717.69 cv
135.85 717.489 136.251 717.383 136.679 717.383 cv
137.228 717.383 137.669 717.517 138.017 717.797 cv
138.364 718.078 138.591 718.466 138.685 718.974 cv
137.87 719.095 li
137.789 718.76 137.642 718.506 137.441 718.332 cv
137.241 718.171 137 718.078 136.719 718.078 cv
136.291 718.078 135.93 718.238 135.663 718.546 cv
135.395 718.854 135.261 719.335 135.261 720.004 cv
135.261 720.673 135.395 721.167 135.649 721.476 cv
135.917 721.782 136.251 721.93 136.666 721.93 cv
137 721.93 137.281 721.836 137.508 721.622 cv
137.722 721.421 137.87 721.101 137.936 720.686 cv
137.936 720.686 li
cp
132.185 722.519 mo
132.185 721.556 li
133.162 721.556 li
133.162 722.519 li
132.185 722.519 li
cp
127.103 720.004 mo
127.103 720.646 127.25 721.127 127.53 721.448 cv
127.811 721.77 128.159 721.93 128.587 721.93 cv
129.015 721.93 129.363 721.77 129.657 721.448 cv
129.938 721.127 130.072 720.633 130.072 719.977 cv
130.072 719.361 129.938 718.894 129.644 718.573 cv
129.363 718.252 129.015 718.091 128.587 718.091 cv
128.159 718.091 127.811 718.252 127.53 718.573 cv
127.25 718.88 127.103 719.361 127.103 720.004 cv
127.103 720.004 li
cp
126.233 720.004 mo
126.233 719.081 126.487 718.386 127.009 717.944 cv
127.437 717.569 127.972 717.383 128.587 717.383 cv
129.283 717.383 129.844 717.609 130.286 718.064 cv
130.727 718.506 130.941 719.135 130.941 719.937 cv
130.941 720.579 130.847 721.087 130.66 721.462 cv
130.459 721.836 130.179 722.117 129.804 722.317 cv
129.443 722.532 129.028 722.625 128.587 722.625 cv
127.892 722.625 127.316 722.411 126.889 721.956 cv
126.447 721.502 126.233 720.859 126.233 720.004 cv
126.233 720.004 li
cp
124.066 722.519 mo
124.066 718.145 li
123.304 718.145 li
123.304 717.489 li
124.066 717.489 li
124.066 716.954 li
124.066 716.62 124.093 716.365 124.146 716.205 cv
124.227 715.978 124.374 715.804 124.588 715.67 cv
124.789 715.523 125.083 715.456 125.444 715.456 cv
125.685 715.456 125.952 715.496 126.247 715.55 cv
126.113 716.299 li
125.939 716.259 125.778 716.246 125.618 716.246 cv
125.35 716.246 125.177 716.299 125.069 716.405 cv
124.962 716.526 124.909 716.727 124.909 717.034 cv
124.909 717.489 li
125.885 717.489 li
125.885 718.145 li
124.909 718.145 li
124.909 722.519 li
124.066 722.519 li
cp
118.462 722.519 mo
118.462 717.489 li
119.225 717.489 li
119.225 718.198 li
119.599 717.649 120.134 717.383 120.83 717.383 cv
121.137 717.383 121.405 717.436 121.659 717.543 cv
121.913 717.649 122.113 717.797 122.234 717.971 cv
122.354 718.145 122.448 718.358 122.501 718.6 cv
122.528 718.76 122.542 719.041 122.542 719.429 cv
122.542 722.519 li
121.699 722.519 li
121.699 719.469 li
121.699 719.121 121.659 718.854 121.592 718.68 cv
121.525 718.52 121.405 718.372 121.244 718.278 cv
121.07 718.171 120.87 718.118 120.643 718.118 cv
120.281 718.118 119.974 718.238 119.706 718.466 cv
119.452 718.693 119.318 719.135 119.318 719.776 cv
119.318 722.519 li
118.462 722.519 li
cp
116.309 722.519 mo
116.309 717.489 li
117.165 717.489 li
117.165 722.519 li
116.309 722.519 li
cp
116.309 716.553 mo
116.309 715.577 li
117.165 715.577 li
117.165 716.553 li
116.309 716.553 li
cp
109.046 720.459 mo
109.046 720.899 109.14 721.234 109.354 721.476 cv
109.554 721.716 109.795 721.836 110.049 721.836 cv
110.237 721.836 110.424 721.782 110.611 721.676 cv
110.812 721.568 110.999 721.408 111.173 721.207 cv
111.36 720.993 111.507 720.727 111.614 720.405 cv
111.734 720.084 111.788 719.763 111.788 719.442 cv
111.788 719.014 111.681 718.68 111.467 718.452 cv
111.253 718.212 110.985 718.091 110.691 718.091 cv
110.478 718.091 110.29 718.145 110.116 718.238 cv
109.942 718.345 109.769 718.506 109.595 718.747 cv
109.434 718.961 109.287 719.241 109.193 719.576 cv
109.086 719.896 109.046 720.191 109.046 720.459 cv
109.046 720.459 li
cp
111.333 721.742 mo
111.133 721.983 110.905 722.171 110.651 722.317 cv
110.397 722.465 110.143 722.532 109.889 722.532 cv
109.608 722.532 109.327 722.451 109.06 722.291 cv
108.792 722.117 108.578 721.876 108.417 721.528 cv
108.244 721.194 108.164 720.807 108.164 720.405 cv
108.164 719.896 108.297 719.401 108.551 718.894 cv
108.805 718.399 109.126 718.011 109.514 717.757 cv
109.889 717.503 110.263 717.383 110.625 717.383 cv
110.905 717.383 111.16 717.449 111.414 717.597 cv
111.654 717.743 111.881 717.957 112.056 718.252 cv
112.216 717.517 li
113.072 717.517 li
112.39 720.699 li
112.283 721.141 112.243 721.382 112.243 721.435 cv
112.243 721.516 112.27 721.596 112.336 721.649 cv
112.403 721.716 112.483 721.742 112.577 721.742 cv
112.738 721.742 112.965 721.649 113.232 721.462 cv
113.594 721.207 113.875 720.873 114.088 720.445 cv
114.303 720.018 114.41 719.589 114.41 719.135 cv
114.41 718.6 114.262 718.118 113.995 717.663 cv
113.728 717.195 113.326 716.834 112.791 716.566 cv
112.256 716.286 111.654 716.151 111.012 716.151 cv
110.277 716.151 109.595 716.326 108.979 716.674 cv
108.364 717.008 107.896 717.503 107.562 718.158 cv
107.214 718.8 107.053 719.496 107.053 720.231 cv
107.053 721.007 107.214 721.662 107.562 722.224 cv
107.896 722.786 108.377 723.2 109.02 723.468 cv
109.648 723.735 110.357 723.855 111.133 723.855 cv
111.962 723.855 112.658 723.722 113.219 723.441 cv
113.781 723.16 114.196 722.826 114.477 722.425 cv
115.333 722.425 li
115.159 722.759 114.891 723.094 114.503 723.441 cv
114.102 723.789 113.634 724.057 113.099 724.257 cv
112.564 724.457 111.909 724.564 111.146 724.564 cv
110.451 724.564 109.795 724.472 109.207 724.283 cv
108.618 724.11 108.11 723.843 107.695 723.481 cv
107.281 723.12 106.96 722.706 106.746 722.237 cv
106.492 721.636 106.358 720.993 106.358 720.298 cv
106.358 719.536 106.505 718.8 106.826 718.104 cv
107.214 717.248 107.762 716.593 108.471 716.139 cv
109.18 715.684 110.036 715.456 111.052 715.456 cv
111.841 715.456 112.537 715.617 113.166 715.938 cv
113.794 716.259 114.289 716.74 114.637 717.369 cv
114.945 717.917 115.105 718.506 115.105 719.148 cv
115.105 720.07 114.784 720.873 114.142 721.582 cv
113.567 722.224 112.938 722.545 112.256 722.545 cv
112.029 722.545 111.855 722.505 111.721 722.438 cv
111.587 722.371 111.494 722.277 111.427 722.157 cv
111.387 722.077 111.36 721.943 111.333 721.742 cv
111.333 721.742 li
cp
101.569 724.457 mo
101.476 723.669 li
101.663 723.722 101.824 723.749 101.958 723.749 cv
102.158 723.749 102.305 723.709 102.412 723.655 cv
102.533 723.589 102.626 723.495 102.693 723.388 cv
102.747 723.294 102.84 723.094 102.96 722.746 cv
102.974 722.706 103 722.625 103.041 722.545 cv
101.128 717.489 li
102.038 717.489 li
103.081 720.392 li
103.228 720.767 103.348 721.154 103.456 721.556 cv
103.549 721.181 103.669 720.793 103.803 720.419 cv
104.873 717.489 li
105.729 717.489 li
103.83 722.612 li
103.616 723.16 103.469 723.535 103.348 723.749 cv
103.201 724.029 103.027 724.23 102.827 724.364 cv
102.626 724.498 102.399 724.564 102.118 724.564 cv
101.958 724.564 101.77 724.524 101.569 724.457 cv
101.569 724.457 li
cp
96.2197 722.519 mo
96.2197 717.489 li
96.9819 717.489 li
96.9819 718.198 li
97.3428 717.649 97.8779 717.383 98.5737 717.383 cv
98.8809 717.383 99.1621 717.436 99.416 717.543 cv
99.6704 717.649 99.8574 717.797 99.9912 717.971 cv
100.112 718.145 100.206 718.358 100.246 718.6 cv
100.286 718.76 100.299 719.041 100.299 719.429 cv
100.299 722.519 li
99.4429 722.519 li
99.4429 719.469 li
99.4429 719.121 99.416 718.854 99.3491 718.68 cv
99.2822 718.52 99.1621 718.372 98.9883 718.278 cv
98.8276 718.171 98.627 718.118 98.3994 718.118 cv
98.0386 718.118 97.731 718.238 97.4634 718.466 cv
97.1958 718.693 97.062 719.135 97.062 719.776 cv
97.062 722.519 li
96.2197 722.519 li
cp
94.0396 720.004 mo
93.7319 720.124 93.2637 720.231 92.6484 720.324 cv
92.2871 720.365 92.0464 720.432 91.8994 720.485 cv
91.7524 720.553 91.645 720.646 91.5649 720.767 cv
91.4849 720.887 91.4448 721.021 91.4448 721.167 cv
91.4448 721.395 91.5249 721.582 91.6987 721.729 cv
91.8726 721.89 92.1265 721.956 92.4614 721.956 cv
92.7822 721.956 93.0762 721.89 93.3306 721.742 cv
93.5845 721.608 93.772 721.408 93.8921 721.154 cv
93.9858 720.967 94.0396 720.686 94.0396 720.312 cv
94.0396 720.004 li
cp
94.1064 721.89 mo
93.7852 722.157 93.4912 722.358 93.1968 722.465 cv
92.9023 722.572 92.5815 722.625 92.2471 722.625 cv
91.6987 722.625 91.271 722.491 90.9766 722.224 cv
90.6821 721.956 90.5352 721.608 90.5352 721.194 cv
90.5352 720.953 90.5884 720.727 90.6958 720.525 cv
90.8159 720.312 90.9634 720.15 91.1367 720.03 cv
91.3242 719.91 91.5249 719.816 91.7524 719.75 cv
91.9263 719.71 92.1802 719.67 92.5146 719.63 cv
93.1968 719.549 93.7051 719.442 94.0396 719.335 cv
94.0396 719.215 94.0396 719.135 94.0396 719.108 cv
94.0396 718.76 93.959 718.52 93.7988 718.372 cv
93.5845 718.185 93.2505 718.091 92.8223 718.091 cv
92.4209 718.091 92.1265 718.158 91.9395 718.305 cv
91.7388 718.439 91.605 718.693 91.5117 719.054 cv
90.6689 718.934 li
90.749 718.573 90.8696 718.292 91.0435 718.064 cv
91.2305 717.851 91.4717 717.677 91.8057 717.557 cv
92.1401 717.436 92.5146 717.383 92.9561 717.383 cv
93.3838 717.383 93.7319 717.436 93.9995 717.529 cv
94.2666 717.637 94.4673 717.757 94.6011 717.917 cv
94.7217 718.064 94.8149 718.265 94.855 718.492 cv
94.8955 718.64 94.9087 718.907 94.9087 719.282 cv
94.9087 720.419 li
94.9087 721.207 94.9224 721.702 94.9624 721.916 cv
94.9893 722.13 95.0557 722.331 95.1631 722.519 cv
94.2666 722.519 li
94.1865 722.345 94.1328 722.13 94.1064 721.89 cv
94.1064 721.89 li
cp
86.2017 720.03 mo
86.2017 720.686 86.3354 721.154 86.5894 721.462 cv
86.8569 721.782 87.1646 721.93 87.5391 721.93 cv
87.9272 721.93 88.248 721.77 88.5156 721.448 cv
88.7832 721.127 88.9165 720.633 88.9165 719.964 cv
88.9165 719.322 88.7832 718.84 88.5288 718.532 cv
88.2612 718.212 87.9404 718.051 87.5791 718.051 cv
87.2183 718.051 86.897 718.225 86.6162 718.56 cv
86.3354 718.894 86.2017 719.389 86.2017 720.03 cv
86.2017 720.03 li
cp
85.4258 724.457 mo
85.4258 717.489 li
86.2017 717.489 li
86.2017 718.145 li
86.3887 717.891 86.5894 717.703 86.8169 717.569 cv
87.0576 717.449 87.3252 717.383 87.6597 717.383 cv
88.0874 717.383 88.4619 717.489 88.7964 717.717 cv
89.1172 717.931 89.3716 718.252 89.5454 718.653 cv
89.7061 719.054 89.7861 719.482 89.7861 719.964 cv
89.7861 720.485 89.6924 720.94 89.5186 721.354 cv
89.3315 721.77 89.064 722.077 88.7026 722.304 cv
88.355 722.519 87.9941 722.625 87.5928 722.625 cv
87.3115 722.625 87.0576 722.572 86.8301 722.451 cv
86.603 722.331 86.4292 722.184 86.2817 721.997 cv
86.2817 724.457 li
85.4258 724.457 li
cp
77.3472 722.519 mo
77.3472 717.489 li
78.1099 717.489 li
78.1099 718.198 li
78.2705 717.957 78.4844 717.757 78.7383 717.609 cv
79.0059 717.463 79.3003 717.383 79.6343 717.383 cv
80.0093 717.383 80.3164 717.463 80.5439 717.609 cv
80.7847 717.771 80.9585 717.984 81.0522 718.265 cv
81.4536 717.677 81.9751 717.383 82.6172 717.383 cv
83.1118 717.383 83.5 717.517 83.7676 717.797 cv
84.0347 718.078 84.1689 718.492 84.1689 719.067 cv
84.1689 722.519 li
83.3262 722.519 li
83.3262 719.349 li
83.3262 719.014 83.2861 718.773 83.2324 718.613 cv
83.1792 718.466 83.0854 718.345 82.9385 718.252 cv
82.791 718.158 82.6172 718.118 82.4165 718.118 cv
82.0688 718.118 81.7744 718.238 81.5337 718.466 cv
81.3062 718.706 81.186 719.081 81.186 719.603 cv
81.186 722.519 li
80.3301 722.519 li
80.3301 719.255 li
80.3301 718.88 80.2632 718.6 80.1294 718.399 cv
79.9824 718.212 79.7549 718.118 79.4473 718.118 cv
79.2065 718.118 78.979 718.185 78.7783 718.305 cv
78.5776 718.439 78.4307 718.613 78.3369 718.867 cv
78.2437 719.108 78.2036 719.456 78.2036 719.91 cv
78.2036 722.519 li
77.3472 722.519 li
cp
72.5059 720.004 mo
72.5059 720.646 72.6392 721.127 72.9199 721.448 cv
73.2012 721.77 73.562 721.93 73.9902 721.93 cv
74.418 721.93 74.7661 721.77 75.0469 721.448 cv
75.3276 721.127 75.4751 720.633 75.4751 719.977 cv
75.4751 719.361 75.3276 718.894 75.0469 718.573 cv
74.7661 718.252 74.4048 718.091 73.9902 718.091 cv
73.562 718.091 73.2012 718.252 72.9199 718.573 cv
72.6392 718.88 72.5059 719.361 72.5059 720.004 cv
72.5059 720.004 li
cp
71.623 720.004 mo
71.623 719.081 71.8901 718.386 72.4121 717.944 cv
72.8398 717.569 73.3613 717.383 73.9902 717.383 cv
74.686 717.383 75.2476 717.609 75.689 718.064 cv
76.1304 718.506 76.3442 719.135 76.3442 719.937 cv
76.3442 720.579 76.2505 721.087 76.0498 721.462 cv
75.8628 721.836 75.582 722.117 75.2075 722.317 cv
74.833 722.532 74.4316 722.625 73.9902 722.625 cv
73.2813 722.625 72.7197 722.411 72.2783 721.956 cv
71.8501 721.502 71.623 720.859 71.623 720.004 cv
71.623 720.004 li
cp
70.3921 720.686 mo
71.2217 720.793 li
71.1279 721.368 70.9004 721.823 70.5264 722.144 cv
70.1382 722.465 69.6836 722.625 69.1353 722.625 cv
68.4399 722.625 67.8911 722.411 67.4766 721.956 cv
67.062 721.502 66.8481 720.859 66.8481 720.03 cv
66.8481 719.482 66.9419 719.014 67.1152 718.6 cv
67.3027 718.198 67.5703 717.891 67.9448 717.69 cv
68.3057 717.489 68.707 717.383 69.1353 717.383 cv
69.6836 717.383 70.125 717.517 70.4727 717.797 cv
70.8203 718.078 71.0479 718.466 71.1411 718.974 cv
70.3257 719.095 li
70.2451 718.76 70.0981 718.506 69.8975 718.332 cv
69.6968 718.171 69.4561 718.078 69.1753 718.078 cv
68.7471 718.078 68.3994 718.238 68.1187 718.546 cv
67.8511 718.854 67.7173 719.335 67.7173 720.004 cv
67.7173 720.673 67.8511 721.167 68.105 721.476 cv
68.3726 721.782 68.707 721.93 69.1216 721.93 cv
69.4561 721.93 69.7373 721.836 69.9644 721.622 cv
70.1919 721.421 70.3257 721.101 70.3921 720.686 cv
70.3921 720.686 li
cp
f
248.922 717.851 mo
248.922 717.355 248.789 716.968 248.534 716.687 cv
248.28 716.405 247.959 716.259 247.598 716.259 cv
247.21 716.259 246.889 716.405 246.608 716.714 cv
246.328 717.034 246.18 717.423 246.18 717.917 cv
246.18 718.358 246.314 718.72 246.582 719.001 cv
246.849 719.269 247.183 719.415 247.571 719.415 cv
247.959 719.415 248.293 719.269 248.548 719.001 cv
248.802 718.72 248.922 718.332 248.922 717.851 cv
248.922 717.851 li
cp
245.444 720.913 mo
246.26 720.847 li
246.328 721.234 246.461 721.502 246.648 721.676 cv
246.849 721.85 247.103 721.943 247.411 721.943 cv
247.665 721.943 247.892 721.876 248.093 721.756 cv
248.293 721.636 248.454 721.476 248.588 721.274 cv
248.708 721.073 248.815 720.807 248.896 720.459 cv
248.976 720.124 249.029 719.776 249.029 719.429 cv
249.029 719.389 249.029 719.322 249.016 719.255 cv
248.855 719.522 248.615 719.75 248.32 719.91 cv
248.026 720.084 247.705 720.164 247.371 720.164 cv
246.795 720.164 246.301 719.964 245.913 719.536 cv
245.512 719.121 245.311 718.573 245.311 717.891 cv
245.311 717.182 245.525 716.62 245.939 716.191 cv
246.354 715.764 246.876 715.55 247.491 715.55 cv
247.946 715.55 248.36 715.67 248.735 715.911 cv
249.109 716.151 249.39 716.5 249.578 716.954 cv
249.778 717.409 249.872 718.051 249.872 718.907 cv
249.872 719.79 249.778 720.498 249.591 721.021 cv
249.39 721.556 249.109 721.956 248.721 722.224 cv
248.347 722.505 247.906 722.639 247.384 722.639 cv
246.849 722.639 246.408 722.491 246.06 722.184 cv
245.712 721.89 245.512 721.462 245.444 720.913 cv
245.444 720.913 li
cp
240.777 720.525 mo
240.777 720.767 240.844 720.993 240.951 721.221 cv
241.071 721.448 241.231 721.636 241.472 721.756 cv
241.7 721.876 241.94 721.943 242.194 721.943 cv
242.609 721.943 242.943 721.81 243.211 721.542 cv
243.479 721.288 243.599 720.953 243.599 720.553 cv
243.599 720.138 243.465 719.803 243.198 719.536 cv
242.93 719.269 242.583 719.135 242.167 719.135 cv
241.767 719.135 241.432 719.255 241.178 719.522 cv
240.911 719.79 240.777 720.124 240.777 720.525 cv
240.777 720.525 li
cp
241.058 717.315 mo
241.058 717.637 241.165 717.904 241.378 718.118 cv
241.593 718.318 241.86 718.426 242.208 718.426 cv
242.529 718.426 242.81 718.332 243.01 718.118 cv
243.224 717.917 243.318 717.663 243.318 717.355 cv
243.318 717.048 243.211 716.78 242.997 716.566 cv
242.783 716.353 242.516 716.246 242.194 716.246 cv
241.86 716.246 241.593 716.353 241.378 716.566 cv
241.165 716.767 241.058 717.021 241.058 717.315 cv
241.058 717.315 li
cp
241.231 718.76 mo
240.884 718.626 240.616 718.439 240.442 718.198 cv
240.282 717.957 240.188 717.677 240.188 717.343 cv
240.188 716.834 240.375 716.405 240.736 716.071 cv
241.098 715.724 241.579 715.55 242.181 715.55 cv
242.783 715.55 243.278 715.724 243.639 716.071 cv
244.014 716.433 244.201 716.86 244.201 717.369 cv
244.201 717.69 244.107 717.971 243.947 718.212 cv
243.772 718.439 243.519 718.626 243.171 718.76 cv
243.599 718.894 243.92 719.121 244.147 719.429 cv
244.361 719.736 244.481 720.11 244.481 720.538 cv
244.481 721.127 244.268 721.636 243.853 722.037 cv
243.425 722.438 242.876 722.639 242.194 722.639 cv
241.513 722.639 240.964 722.438 240.536 722.037 cv
240.122 721.622 239.907 721.114 239.907 720.512 cv
239.907 720.058 240.028 719.683 240.255 719.375 cv
240.482 719.081 240.804 718.867 241.231 718.76 cv
241.231 718.76 li
cp
234.571 716.486 mo
234.571 715.67 li
239.065 715.67 li
239.065 716.326 li
238.624 716.794 238.182 717.423 237.754 718.198 cv
237.313 718.987 236.978 719.79 236.737 720.605 cv
236.577 721.194 236.457 721.836 236.417 722.519 cv
235.547 722.519 li
235.547 721.983 235.654 721.314 235.868 720.538 cv
236.069 719.763 236.363 719.014 236.751 718.305 cv
237.125 717.583 237.54 716.968 237.968 716.486 cv
234.571 716.486 li
cp
227.375 720.271 mo
227.375 720.565 227.442 720.847 227.563 721.114 cv
227.683 721.382 227.856 721.582 228.084 721.729 cv
228.312 721.876 228.539 721.943 228.793 721.943 cv
229.154 721.943 229.461 721.796 229.729 721.502 cv
229.983 721.207 230.117 720.819 230.117 720.324 cv
230.117 719.844 229.983 719.456 229.729 719.188 cv
229.475 718.907 229.154 718.773 228.752 718.773 cv
228.378 718.773 228.044 718.907 227.776 719.188 cv
227.509 719.456 227.375 719.83 227.375 720.271 cv
227.375 720.271 li
cp
230.866 717.275 mo
230.023 717.343 li
229.943 717.008 229.836 716.767 229.702 716.606 cv
229.461 716.365 229.181 716.246 228.846 716.246 cv
228.565 716.246 228.325 716.326 228.111 716.473 cv
227.843 716.674 227.643 716.954 227.482 717.329 cv
227.322 717.703 227.241 718.238 227.241 718.934 cv
227.442 718.626 227.696 718.386 227.99 718.238 cv
228.298 718.091 228.605 718.011 228.926 718.011 cv
229.501 718.011 229.983 718.225 230.384 718.64 cv
230.786 719.054 230.986 719.603 230.986 720.271 cv
230.986 720.699 230.893 721.101 230.705 721.476 cv
230.518 721.85 230.25 722.144 229.93 722.345 cv
229.595 722.545 229.221 722.639 228.806 722.639 cv
228.097 722.639 227.522 722.371 227.067 721.85 cv
226.626 721.328 226.398 720.472 226.398 719.269 cv
226.398 717.931 226.639 716.954 227.134 716.339 cv
227.576 715.817 228.151 715.55 228.886 715.55 cv
229.435 715.55 229.89 715.697 230.237 716.005 cv
230.585 716.313 230.799 716.74 230.866 717.275 cv
230.866 717.275 li
cp
221.035 720.699 mo
221.931 720.633 li
221.998 721.061 222.146 721.395 222.386 721.608 cv
222.627 721.836 222.921 721.943 223.269 721.943 cv
223.684 721.943 224.031 721.782 224.312 721.476 cv
224.593 721.167 224.74 720.753 224.74 720.245 cv
224.74 719.763 224.606 719.375 224.326 719.095 cv
224.058 718.813 223.697 718.666 223.255 718.666 cv
222.988 718.666 222.734 718.733 222.52 718.867 cv
222.292 718.987 222.132 719.148 221.998 719.349 cv
221.196 719.241 li
221.864 715.67 li
225.302 715.67 li
225.302 716.486 li
222.547 716.486 li
222.172 718.358 li
222.587 718.064 223.028 717.917 223.483 717.917 cv
224.085 717.917 224.593 718.131 225.007 718.546 cv
225.422 718.961 225.636 719.509 225.636 720.164 cv
225.636 720.793 225.449 721.342 225.088 721.796 cv
224.646 722.358 224.031 722.639 223.269 722.639 cv
222.64 722.639 222.119 722.465 221.717 722.104 cv
221.33 721.756 221.102 721.288 221.035 720.699 cv
221.035 720.699 li
cp
218.374 720.084 mo
218.374 716.954 li
216.193 720.084 li
218.374 720.084 li
cp
218.374 722.519 mo
218.374 720.859 li
215.351 720.859 li
215.351 720.084 li
218.521 715.577 li
219.229 715.577 li
219.229 720.084 li
220.166 720.084 li
220.166 720.859 li
219.229 720.859 li
219.229 722.519 li
218.374 722.519 li
cp
207.553 720.686 mo
208.409 720.565 li
208.503 721.047 208.677 721.395 208.904 721.608 cv
209.145 721.823 209.426 721.93 209.773 721.93 cv
210.175 721.93 210.509 721.796 210.79 721.516 cv
211.058 721.234 211.205 720.887 211.205 720.485 cv
211.205 720.084 211.071 719.763 210.817 719.509 cv
210.563 719.255 210.242 719.135 209.84 719.135 cv
209.68 719.135 209.479 719.161 209.238 719.228 cv
209.332 718.479 li
209.386 718.479 209.439 718.492 209.466 718.492 cv
209.84 718.492 210.161 718.399 210.456 718.198 cv
210.75 718.011 210.897 717.717 210.897 717.329 cv
210.897 717.021 210.79 716.754 210.576 716.553 cv
210.362 716.353 210.081 716.246 209.747 716.246 cv
209.426 716.246 209.145 716.353 208.917 716.566 cv
208.704 716.767 208.557 717.088 208.489 717.503 cv
207.647 717.355 li
207.74 716.78 207.981 716.339 208.356 716.018 cv
208.717 715.711 209.185 715.55 209.733 715.55 cv
210.108 715.55 210.456 715.63 210.776 715.791 cv
211.098 715.951 211.338 716.179 211.512 716.46 cv
211.686 716.74 211.766 717.034 211.766 717.355 cv
211.766 717.649 211.686 717.917 211.525 718.171 cv
211.365 718.412 211.125 718.613 210.803 718.747 cv
211.218 718.84 211.539 719.041 211.766 719.349 cv
211.994 719.643 212.101 720.018 212.101 720.459 cv
212.101 721.073 211.887 721.582 211.445 722.01 cv
211.004 722.425 210.442 722.639 209.76 722.639 cv
209.158 722.639 208.65 722.451 208.249 722.09 cv
207.834 721.729 207.607 721.261 207.553 720.686 cv
207.553 720.686 li
cp
206.63 721.702 mo
206.63 722.519 li
202.029 722.519 li
202.029 722.317 202.056 722.117 202.136 721.93 cv
202.257 721.622 202.444 721.314 202.698 721.007 cv
202.965 720.699 203.327 720.352 203.822 719.964 cv
204.571 719.335 205.079 718.854 205.346 718.492 cv
205.614 718.131 205.748 717.783 205.748 717.463 cv
205.748 717.128 205.627 716.834 205.387 716.606 cv
205.146 716.379 204.825 716.259 204.437 716.259 cv
204.022 716.259 203.688 716.379 203.447 716.62 cv
203.193 716.874 203.073 717.208 203.073 717.649 cv
202.203 717.557 li
202.257 716.9 202.484 716.405 202.872 716.058 cv
203.273 715.724 203.795 715.55 204.45 715.55 cv
205.119 715.55 205.654 715.737 206.042 716.099 cv
206.43 716.473 206.617 716.928 206.617 717.476 cv
206.617 717.757 206.563 718.024 206.457 718.305 cv
206.336 718.573 206.149 718.854 205.881 719.148 cv
205.614 719.442 205.186 719.856 204.571 720.365 cv
204.063 720.807 203.728 721.087 203.581 721.247 cv
203.434 721.395 203.313 721.556 203.22 721.702 cv
206.63 721.702 li
cp
199.97 722.519 mo
199.114 722.519 li
199.114 717.088 li
198.913 717.288 198.632 717.476 198.297 717.677 cv
197.977 717.877 197.669 718.024 197.401 718.118 cv
197.401 717.288 li
197.883 717.074 198.297 716.794 198.659 716.473 cv
199.006 716.151 199.261 715.844 199.421 715.55 cv
199.97 715.55 li
199.97 722.519 li
cp
189.55 719.095 mo
189.55 720.245 189.684 721.007 189.952 721.382 cv
190.219 721.756 190.54 721.943 190.928 721.943 cv
191.33 721.943 191.65 721.756 191.918 721.382 cv
192.186 720.993 192.319 720.245 192.319 719.095 cv
192.319 717.957 192.186 717.195 191.918 716.82 cv
191.65 716.446 191.33 716.259 190.928 716.259 cv
190.527 716.259 190.219 716.419 189.992 716.754 cv
189.698 717.182 189.55 717.957 189.55 719.095 cv
189.55 719.095 li
cp
188.667 719.095 mo
188.667 718.278 188.761 717.609 188.922 717.114 cv
189.096 716.606 189.35 716.219 189.684 715.951 cv
190.005 715.684 190.433 715.55 190.928 715.55 cv
191.302 715.55 191.637 715.617 191.918 715.777 cv
192.199 715.925 192.426 716.139 192.613 716.419 cv
192.787 716.7 192.934 717.048 193.041 717.449 cv
193.148 717.864 193.188 718.412 193.188 719.095 cv
193.188 719.91 193.108 720.565 192.948 721.073 cv
192.774 721.568 192.533 721.956 192.199 722.237 cv
191.864 722.505 191.437 722.639 190.928 722.639 cv
190.272 722.639 189.738 722.398 189.363 721.93 cv
188.908 721.342 188.667 720.405 188.667 719.095 cv
188.667 719.095 li
cp
184.147 719.095 mo
184.147 720.245 184.281 721.007 184.548 721.382 cv
184.815 721.756 185.15 721.943 185.538 721.943 cv
185.926 721.943 186.26 721.756 186.527 721.382 cv
186.795 720.993 186.929 720.245 186.929 719.095 cv
186.929 717.957 186.795 717.195 186.527 716.82 cv
186.26 716.446 185.926 716.259 185.524 716.259 cv
185.137 716.259 184.829 716.419 184.588 716.754 cv
184.294 717.182 184.147 717.957 184.147 719.095 cv
184.147 719.095 li
cp
183.277 719.095 mo
183.277 718.278 183.358 717.609 183.532 717.114 cv
183.706 716.606 183.946 716.219 184.281 715.951 cv
184.615 715.684 185.03 715.55 185.538 715.55 cv
185.913 715.55 186.233 715.617 186.514 715.777 cv
186.809 715.925 187.036 716.139 187.21 716.419 cv
187.397 716.7 187.544 717.048 187.638 717.449 cv
187.745 717.864 187.798 718.412 187.798 719.095 cv
187.798 719.91 187.718 720.565 187.544 721.073 cv
187.384 721.568 187.129 721.956 186.795 722.237 cv
186.461 722.505 186.046 722.639 185.538 722.639 cv
184.869 722.639 184.348 722.398 183.959 721.93 cv
183.505 721.342 183.277 720.405 183.277 719.095 cv
183.277 719.095 li
cp
179.64 721.395 mo
179.64 719.496 li
177.753 719.496 li
177.753 718.706 li
179.64 718.706 li
179.64 716.808 li
180.442 716.808 li
180.442 718.706 li
182.341 718.706 li
182.341 719.496 li
180.442 719.496 li
180.442 721.395 li
179.64 721.395 li
cp
f
344.339 717.851 mo
344.339 717.355 344.219 716.968 343.952 716.687 cv
343.698 716.405 343.39 716.259 343.016 716.259 cv
342.641 716.259 342.307 716.405 342.025 716.714 cv
341.745 717.034 341.611 717.423 341.611 717.917 cv
341.611 718.358 341.745 718.72 341.999 719.001 cv
342.267 719.269 342.601 719.415 342.989 719.415 cv
343.39 719.415 343.711 719.269 343.965 719.001 cv
344.219 718.72 344.339 718.332 344.339 717.851 cv
344.339 717.851 li
cp
340.862 720.913 mo
341.678 720.847 li
341.745 721.234 341.878 721.502 342.079 721.676 cv
342.267 721.85 342.521 721.943 342.828 721.943 cv
343.096 721.943 343.323 721.876 343.523 721.756 cv
343.711 721.636 343.885 721.476 344.005 721.274 cv
344.125 721.073 344.232 720.807 344.313 720.459 cv
344.406 720.124 344.447 719.776 344.447 719.429 cv
344.447 719.389 344.447 719.322 344.447 719.255 cv
344.272 719.522 344.045 719.75 343.751 719.91 cv
343.457 720.084 343.136 720.164 342.788 720.164 cv
342.213 720.164 341.731 719.964 341.33 719.536 cv
340.929 719.121 340.742 718.573 340.742 717.891 cv
340.742 717.182 340.942 716.62 341.357 716.191 cv
341.771 715.764 342.293 715.55 342.922 715.55 cv
343.363 715.55 343.778 715.67 344.152 715.911 cv
344.527 716.151 344.808 716.5 345.008 716.954 cv
345.196 717.409 345.289 718.051 345.289 718.907 cv
345.289 719.79 345.196 720.498 345.008 721.021 cv
344.821 721.556 344.527 721.956 344.152 722.224 cv
343.765 722.505 343.323 722.639 342.815 722.639 cv
342.267 722.639 341.825 722.491 341.478 722.184 cv
341.143 721.89 340.929 721.462 340.862 720.913 cv
340.862 720.913 li
cp
336.208 720.525 mo
336.208 720.767 336.261 720.993 336.368 721.221 cv
336.488 721.448 336.662 721.636 336.89 721.756 cv
337.117 721.876 337.358 721.943 337.625 721.943 cv
338.026 721.943 338.374 721.81 338.628 721.542 cv
338.896 721.288 339.03 720.953 339.03 720.553 cv
339.03 720.138 338.896 719.803 338.615 719.536 cv
338.348 719.269 338.013 719.135 337.599 719.135 cv
337.184 719.135 336.863 719.255 336.595 719.522 cv
336.341 719.79 336.208 720.124 336.208 720.525 cv
336.208 720.525 li
cp
336.488 717.315 mo
336.488 717.637 336.595 717.904 336.796 718.118 cv
337.01 718.318 337.291 718.426 337.625 718.426 cv
337.96 718.426 338.227 718.332 338.428 718.118 cv
338.642 717.917 338.749 717.663 338.749 717.355 cv
338.749 717.048 338.642 716.78 338.428 716.566 cv
338.214 716.353 337.946 716.246 337.612 716.246 cv
337.291 716.246 337.023 716.353 336.81 716.566 cv
336.595 716.767 336.488 717.021 336.488 717.315 cv
336.488 717.315 li
cp
336.649 718.76 mo
336.301 718.626 336.034 718.439 335.873 718.198 cv
335.699 717.957 335.619 717.677 335.619 717.343 cv
335.619 716.834 335.793 716.405 336.154 716.071 cv
336.515 715.724 336.997 715.55 337.599 715.55 cv
338.214 715.55 338.695 715.724 339.07 716.071 cv
339.431 716.433 339.618 716.86 339.618 717.369 cv
339.618 717.69 339.538 717.971 339.364 718.212 cv
339.204 718.439 338.949 718.626 338.602 718.76 cv
339.03 718.894 339.351 719.121 339.564 719.429 cv
339.792 719.736 339.899 720.11 339.899 720.538 cv
339.899 721.127 339.685 721.636 339.271 722.037 cv
338.855 722.438 338.294 722.639 337.612 722.639 cv
336.93 722.639 336.381 722.438 335.967 722.037 cv
335.539 721.622 335.325 721.114 335.325 720.512 cv
335.325 720.058 335.445 719.683 335.672 719.375 cv
335.9 719.081 336.234 718.867 336.649 718.76 cv
336.649 718.76 li
cp
329.988 716.486 mo
329.988 715.67 li
334.482 715.67 li
334.482 716.326 li
334.041 716.794 333.599 717.423 333.171 718.198 cv
332.73 718.987 332.396 719.79 332.168 720.605 cv
331.995 721.194 331.887 721.836 331.834 722.519 cv
330.964 722.519 li
330.978 721.983 331.085 721.314 331.286 720.538 cv
331.486 719.763 331.78 719.014 332.168 718.305 cv
332.556 717.583 332.958 716.968 333.385 716.486 cv
329.988 716.486 li
cp
322.792 720.271 mo
322.792 720.565 322.859 720.847 322.979 721.114 cv
323.113 721.382 323.287 721.582 323.501 721.729 cv
323.729 721.876 323.969 721.943 324.21 721.943 cv
324.584 721.943 324.892 721.796 325.146 721.502 cv
325.4 721.207 325.534 720.819 325.534 720.324 cv
325.534 719.844 325.4 719.456 325.146 719.188 cv
324.892 718.907 324.571 718.773 324.183 718.773 cv
323.795 718.773 323.475 718.907 323.193 719.188 cv
322.926 719.456 322.792 719.83 322.792 720.271 cv
322.792 720.271 li
cp
326.283 717.275 mo
325.441 717.343 li
325.374 717.008 325.267 716.767 325.12 716.606 cv
324.892 716.365 324.598 716.246 324.264 716.246 cv
323.996 716.246 323.742 716.326 323.542 716.473 cv
323.274 716.674 323.06 716.954 322.899 717.329 cv
322.752 717.703 322.672 718.238 322.659 718.934 cv
322.873 718.626 323.113 718.386 323.421 718.238 cv
323.715 718.091 324.023 718.011 324.357 718.011 cv
324.919 718.011 325.4 718.225 325.802 718.64 cv
326.203 719.054 326.403 719.603 326.403 720.271 cv
326.403 720.699 326.31 721.101 326.123 721.476 cv
325.936 721.85 325.681 722.144 325.347 722.345 cv
325.026 722.545 324.651 722.639 324.224 722.639 cv
323.515 722.639 322.939 722.371 322.485 721.85 cv
322.043 721.328 321.816 720.472 321.816 719.269 cv
321.816 717.931 322.07 716.954 322.565 716.339 cv
322.993 715.817 323.582 715.55 324.317 715.55 cv
324.865 715.55 325.307 715.697 325.654 716.005 cv
326.016 716.313 326.216 716.74 326.283 717.275 cv
326.283 717.275 li
cp
316.466 720.699 mo
317.349 720.633 li
317.416 721.061 317.576 721.395 317.817 721.608 cv
318.058 721.836 318.338 721.943 318.686 721.943 cv
319.101 721.943 319.449 721.782 319.729 721.476 cv
320.01 721.167 320.157 720.753 320.157 720.245 cv
320.157 719.763 320.024 719.375 319.756 719.095 cv
319.489 718.813 319.127 718.666 318.686 718.666 cv
318.405 718.666 318.151 718.733 317.938 718.867 cv
317.723 718.987 317.549 719.148 317.416 719.349 cv
316.613 719.241 li
317.282 715.67 li
320.732 715.67 li
320.732 716.486 li
317.964 716.486 li
317.589 718.358 li
318.018 718.064 318.446 717.917 318.9 717.917 cv
319.502 717.917 320.024 718.131 320.438 718.546 cv
320.853 718.961 321.054 719.509 321.054 720.164 cv
321.054 720.793 320.88 721.342 320.505 721.796 cv
320.064 722.358 319.462 722.639 318.686 722.639 cv
318.058 722.639 317.549 722.465 317.148 722.104 cv
316.747 721.756 316.52 721.288 316.466 720.699 cv
316.466 720.699 li
cp
313.791 720.084 mo
313.791 716.954 li
311.611 720.084 li
313.791 720.084 li
cp
313.791 722.519 mo
313.791 720.859 li
310.782 720.859 li
310.782 720.084 li
313.952 715.577 li
314.647 715.577 li
314.647 720.084 li
315.583 720.084 li
315.583 720.859 li
314.647 720.859 li
314.647 722.519 li
313.791 722.519 li
cp
302.971 720.686 mo
303.827 720.565 li
303.934 721.047 304.094 721.395 304.321 721.608 cv
304.562 721.823 304.856 721.93 305.191 721.93 cv
305.592 721.93 305.94 721.796 306.207 721.516 cv
306.488 721.234 306.622 720.887 306.622 720.485 cv
306.622 720.084 306.501 719.763 306.234 719.509 cv
305.98 719.255 305.659 719.135 305.258 719.135 cv
305.097 719.135 304.896 719.161 304.656 719.228 cv
304.75 718.479 li
304.816 718.479 304.856 718.492 304.896 718.492 cv
305.258 718.492 305.579 718.399 305.873 718.198 cv
306.167 718.011 306.314 717.717 306.314 717.329 cv
306.314 717.021 306.207 716.754 305.993 716.553 cv
305.779 716.353 305.512 716.246 305.177 716.246 cv
304.843 716.246 304.562 716.353 304.348 716.566 cv
304.121 716.767 303.974 717.088 303.92 717.503 cv
303.064 717.355 li
303.171 716.78 303.398 716.339 303.773 716.018 cv
304.147 715.711 304.603 715.55 305.15 715.55 cv
305.539 715.55 305.886 715.63 306.194 715.791 cv
306.515 715.951 306.769 716.179 306.93 716.46 cv
307.104 716.74 307.184 717.034 307.184 717.355 cv
307.184 717.649 307.104 717.917 306.943 718.171 cv
306.783 718.412 306.542 718.613 306.234 718.747 cv
306.635 718.84 306.957 719.041 307.184 719.349 cv
307.411 719.643 307.531 720.018 307.531 720.459 cv
307.531 721.073 307.304 721.582 306.863 722.01 cv
306.421 722.425 305.859 722.639 305.191 722.639 cv
304.576 722.639 304.067 722.451 303.666 722.09 cv
303.265 721.729 303.038 721.261 302.971 720.686 cv
302.971 720.686 li
cp
302.048 721.702 mo
302.048 722.519 li
297.46 722.519 li
297.447 722.317 297.487 722.117 297.554 721.93 cv
297.674 721.622 297.861 721.314 298.129 721.007 cv
298.383 720.699 298.757 720.352 299.239 719.964 cv
299.988 719.335 300.496 718.854 300.764 718.492 cv
301.031 718.131 301.165 717.783 301.165 717.463 cv
301.165 717.128 301.044 716.834 300.804 716.606 cv
300.563 716.379 300.242 716.259 299.854 716.259 cv
299.439 716.259 299.119 716.379 298.864 716.62 cv
298.624 716.874 298.49 717.208 298.49 717.649 cv
297.621 717.557 li
297.674 716.9 297.901 716.405 298.303 716.058 cv
298.69 715.724 299.212 715.55 299.881 715.55 cv
300.536 715.55 301.071 715.737 301.459 716.099 cv
301.847 716.473 302.048 716.928 302.048 717.476 cv
302.048 717.757 301.981 718.024 301.874 718.305 cv
301.753 718.573 301.566 718.854 301.312 719.148 cv
301.044 719.442 300.603 719.856 299.988 720.365 cv
299.48 720.807 299.146 721.087 298.998 721.247 cv
298.864 721.395 298.744 721.556 298.637 721.702 cv
302.048 721.702 li
cp
295.387 722.519 mo
294.531 722.519 li
294.531 717.088 li
294.33 717.288 294.063 717.476 293.729 717.677 cv
293.394 717.877 293.086 718.024 292.833 718.118 cv
292.833 717.288 li
293.3 717.074 293.715 716.794 294.076 716.473 cv
294.437 716.151 294.691 715.844 294.838 715.55 cv
295.387 715.55 li
295.387 722.519 li
cp
284.968 719.095 mo
284.968 720.245 285.102 721.007 285.369 721.382 cv
285.637 721.756 285.971 721.943 286.359 721.943 cv
286.747 721.943 287.081 721.756 287.349 721.382 cv
287.616 720.993 287.75 720.245 287.75 719.095 cv
287.75 717.957 287.616 717.195 287.349 716.82 cv
287.081 716.446 286.747 716.259 286.345 716.259 cv
285.958 716.259 285.637 716.419 285.409 716.754 cv
285.115 717.182 284.968 717.957 284.968 719.095 cv
284.968 719.095 li
cp
284.099 719.095 mo
284.099 718.278 284.179 717.609 284.353 717.114 cv
284.513 716.606 284.767 716.219 285.102 715.951 cv
285.436 715.684 285.851 715.55 286.359 715.55 cv
286.733 715.55 287.054 715.617 287.335 715.777 cv
287.616 715.925 287.857 716.139 288.031 716.419 cv
288.218 716.7 288.352 717.048 288.459 717.449 cv
288.566 717.864 288.619 718.412 288.619 719.095 cv
288.619 719.91 288.539 720.565 288.365 721.073 cv
288.205 721.568 287.95 721.956 287.616 722.237 cv
287.282 722.505 286.867 722.639 286.359 722.639 cv
285.69 722.639 285.168 722.398 284.781 721.93 cv
284.326 721.342 284.099 720.405 284.099 719.095 cv
284.099 719.095 li
cp
279.578 719.095 mo
279.578 720.245 279.711 721.007 279.979 721.382 cv
280.247 721.756 280.567 721.943 280.955 721.943 cv
281.356 721.943 281.678 721.756 281.945 721.382 cv
282.212 720.993 282.346 720.245 282.346 719.095 cv
282.346 717.957 282.212 717.195 281.945 716.82 cv
281.678 716.446 281.356 716.259 280.955 716.259 cv
280.554 716.259 280.247 716.419 280.019 716.754 cv
279.725 717.182 279.578 717.957 279.578 719.095 cv
279.578 719.095 li
cp
278.695 719.095 mo
278.695 718.278 278.789 717.609 278.949 717.114 cv
279.123 716.606 279.377 716.219 279.711 715.951 cv
280.032 715.684 280.46 715.55 280.955 715.55 cv
281.33 715.55 281.664 715.617 281.945 715.777 cv
282.226 715.925 282.453 716.139 282.641 716.419 cv
282.814 716.7 282.962 717.048 283.068 717.449 cv
283.175 717.864 283.216 718.412 283.216 719.095 cv
283.216 719.91 283.135 720.565 282.975 721.073 cv
282.801 721.568 282.561 721.956 282.226 722.237 cv
281.892 722.505 281.464 722.639 280.955 722.639 cv
280.3 722.639 279.765 722.398 279.391 721.93 cv
278.936 721.342 278.695 720.405 278.695 719.095 cv
278.695 719.095 li
cp
275.07 721.395 mo
275.07 719.496 li
273.171 719.496 li
273.171 718.706 li
275.07 718.706 li
275.07 716.808 li
275.873 716.808 li
275.873 718.706 li
277.759 718.706 li
277.759 719.496 li
275.873 719.496 li
275.873 721.395 li
275.07 721.395 li
cp
f
743.103 666.905 mo
710.654 686.793 669.313 701.693 622.78 709.451 cv
666.878 707.017 707.859 698.35 743.103 684.961 cv
743.103 666.905 li
cp
0 0 0 0 cmyk
ef
492.789 697.842 mo
458.401 683.263 430.193 664.016 410.894 641.72 cv
410.894 666.169 li
434.434 679.478 462.146 690.271 492.789 697.842 cv
492.789 697.842 li
cp
ef
500.413 433.069 mo
499.356 433.123 498.192 433.163 496.935 433.19 cv
495.678 433.203 494.434 433.217 493.217 433.217 cv
491.893 433.217 490.943 432.976 490.368 432.495 cv
489.793 432.013 489.499 431.21 489.499 430.101 cv
489.499 416.204 li
489.499 415.094 489.793 414.291 490.368 413.81 cv
490.943 413.328 491.893 413.087 493.217 413.087 cv
494.461 413.087 495.638 413.101 496.748 413.114 cv
497.858 413.128 498.968 413.168 500.064 413.221 cv
500.266 413.221 500.372 413.314 500.372 413.502 cv
500.372 413.97 li
500.372 414.157 500.266 414.251 500.064 414.251 cv
492.803 414.251 li
492.214 414.251 491.759 414.425 491.465 414.759 cv
491.171 415.094 491.023 415.562 491.023 416.177 cv
491.023 422.289 li
499.517 422.289 li
499.718 422.289 499.824 422.383 499.824 422.57 cv
499.824 423.172 li
499.824 423.359 499.718 423.453 499.517 423.453 cv
491.023 423.453 li
491.023 430.127 li
491.023 430.742 491.171 431.21 491.465 431.545 cv
491.759 431.879 492.214 432.04 492.803 432.04 cv
500.413 432.04 li
500.613 432.04 500.721 432.134 500.721 432.32 cv
500.721 432.788 li
500.721 432.976 500.613 433.069 500.413 433.069 cv
500.413 433.069 li
cp
473.516 414.585 mo
473.288 414.585 473.168 414.491 473.168 414.305 cv
473.168 413.702 li
473.168 413.516 473.288 413.422 473.516 413.422 cv
486.169 413.422 li
486.396 413.422 486.516 413.516 486.516 413.702 cv
486.516 414.305 li
486.516 414.491 486.396 414.585 486.169 414.585 cv
480.591 414.585 li
480.591 432.602 li
480.591 432.788 480.483 432.883 480.257 432.883 cv
479.427 432.883 li
479.2 432.883 479.079 432.788 479.079 432.602 cv
479.079 414.585 li
473.516 414.585 li
cp
462.053 426.596 mo
469.837 426.596 li
465.945 414.974 li
462.053 426.596 li
cp
466.467 413.422 mo
466.761 413.422 466.948 413.528 467.015 413.756 cv
473.368 432.602 li
473.448 432.788 473.368 432.883 473.168 432.883 cv
472.164 432.883 li
472.004 432.883 471.91 432.802 471.857 432.655 cv
470.212 427.76 li
461.651 427.76 li
460.033 432.655 li
459.979 432.802 459.887 432.883 459.726 432.883 cv
458.723 432.883 li
458.522 432.883 458.441 432.788 458.522 432.602 cv
464.875 413.756 li
464.942 413.528 465.129 413.422 465.424 413.422 cv
466.467 413.422 li
cp
456.903 432.04 mo
457.104 432.04 457.212 432.134 457.212 432.32 cv
457.212 432.788 li
457.212 432.976 457.104 433.069 456.903 433.069 cv
456.275 433.109 455.699 433.137 455.178 433.137 cv
454.656 433.149 454.108 433.163 453.547 433.19 cv
452.984 433.203 452.383 433.217 451.741 433.217 cv
451.099 433.217 450.363 433.217 449.534 433.217 cv
448.759 433.217 448.116 433.137 447.635 433.003 cv
447.14 432.869 446.752 432.655 446.471 432.388 cv
446.204 432.12 446.017 431.786 445.909 431.384 cv
445.803 430.996 445.749 430.528 445.749 430.021 cv
445.749 413.702 li
445.749 413.516 445.869 413.422 446.097 413.422 cv
446.926 413.422 li
447.153 413.422 447.273 413.516 447.273 413.702 cv
447.273 430.181 li
447.273 430.702 447.395 431.144 447.661 431.505 cv
447.929 431.866 448.464 432.04 449.267 432.04 cv
456.903 432.04 li
cp
440.078 419.066 mo
440.078 417.394 439.649 416.177 438.794 415.401 cv
437.925 414.639 436.413 414.251 434.233 414.251 cv
433.631 414.251 433.016 414.291 432.374 414.345 cv
431.732 414.411 431.144 414.519 430.581 414.665 cv
430.581 424.229 li
431.116 424.362 431.705 424.456 432.36 424.51 cv
433.016 424.563 433.631 424.59 434.233 424.59 cv
436.413 424.59 437.925 424.216 438.794 423.439 cv
439.649 422.677 440.078 421.446 440.078 419.788 cv
440.078 419.066 li
cp
429.11 414.585 mo
429.11 414.104 429.338 413.796 429.793 413.676 cv
430.501 413.488 431.291 413.342 432.133 413.234 cv
432.989 413.141 433.806 413.087 434.607 413.087 cv
437.042 413.087 438.808 413.556 439.931 414.505 cv
441.041 415.455 441.589 416.873 441.589 418.785 cv
441.589 420.069 li
441.589 421.969 441.041 423.399 439.931 424.349 cv
438.808 425.285 437.042 425.767 434.607 425.767 cv
433.952 425.767 433.271 425.74 432.602 425.674 cv
431.919 425.619 431.264 425.526 430.622 425.405 cv
430.622 432.602 li
430.622 432.788 430.501 432.883 430.274 432.883 cv
429.458 432.883 li
429.218 432.883 429.11 432.788 429.11 432.602 cv
429.11 414.585 li
cp
414.799 427.158 mo
414.545 427.158 414.385 427.077 414.317 426.931 cv
408.058 415.643 li
408.058 432.602 li
408.058 432.788 407.951 432.883 407.71 432.883 cv
406.895 432.883 li
406.667 432.883 406.547 432.788 406.547 432.602 cv
406.547 413.702 li
406.547 413.516 406.667 413.422 406.895 413.422 cv
407.991 413.422 li
408.313 413.422 408.513 413.516 408.606 413.702 cv
415.174 425.513 li
421.754 413.702 li
421.835 413.516 422.048 413.422 422.369 413.422 cv
423.466 413.422 li
423.693 413.422 423.814 413.516 423.814 413.702 cv
423.814 432.602 li
423.814 432.788 423.693 432.883 423.466 432.883 cv
422.637 432.883 li
422.409 432.883 422.303 432.788 422.303 432.602 cv
422.303 415.643 li
416.043 426.931 li
415.977 427.077 415.815 427.158 415.562 427.158 cv
414.799 427.158 li
cp
401.799 433.069 mo
400.742 433.123 399.592 433.163 398.321 433.19 cv
397.064 433.203 395.82 433.217 394.616 433.217 cv
393.279 433.217 392.329 432.976 391.754 432.495 cv
391.179 432.013 390.898 431.21 390.898 430.101 cv
390.898 416.204 li
390.898 415.094 391.179 414.291 391.754 413.81 cv
392.329 413.328 393.279 413.087 394.616 413.087 cv
395.847 413.087 397.023 413.101 398.134 413.114 cv
399.244 413.128 400.354 413.168 401.451 413.221 cv
401.665 413.221 401.772 413.314 401.772 413.502 cv
401.772 413.97 li
401.772 414.157 401.665 414.251 401.451 414.251 cv
394.202 414.251 li
393.6 414.251 393.158 414.425 392.851 414.759 cv
392.557 415.094 392.409 415.562 392.409 416.177 cv
392.409 422.289 li
400.902 422.289 li
401.116 422.289 401.21 422.383 401.21 422.57 cv
401.21 423.172 li
401.21 423.359 401.116 423.453 400.902 423.453 cv
392.409 423.453 li
392.409 430.127 li
392.409 430.742 392.557 431.21 392.851 431.545 cv
393.158 431.879 393.6 432.04 394.202 432.04 cv
401.799 432.04 li
402.013 432.04 402.106 432.134 402.106 432.32 cv
402.106 432.788 li
402.106 432.976 402.013 433.069 401.799 433.069 cv
401.799 433.069 li
cp
374.901 414.585 mo
374.674 414.585 374.554 414.491 374.554 414.305 cv
374.554 413.702 li
374.554 413.516 374.674 413.422 374.901 413.422 cv
387.554 413.422 li
387.795 413.422 387.902 413.516 387.902 413.702 cv
387.902 414.305 li
387.902 414.491 387.795 414.585 387.554 414.585 cv
381.99 414.585 li
381.99 432.602 li
381.99 432.788 381.87 432.883 381.643 432.883 cv
380.813 432.883 li
380.586 432.883 380.479 432.788 380.479 432.602 cv
380.479 414.585 li
374.901 414.585 li
cp
362.73 422.784 mo
362.73 419.788 362.222 417.608 361.192 416.271 cv
360.176 414.92 358.637 414.251 356.578 414.251 cv
354.504 414.251 352.966 414.92 351.95 416.271 cv
350.92 417.608 350.412 419.788 350.412 422.784 cv
350.412 423.507 li
350.412 426.516 350.92 428.683 351.95 430.033 cv
352.966 431.371 354.504 432.04 356.578 432.04 cv
358.637 432.04 360.176 431.371 361.192 430.033 cv
362.222 428.683 362.73 426.516 362.73 423.507 cv
362.73 422.784 li
cp
364.242 423.587 mo
364.242 430.007 361.687 433.217 356.578 433.217 cv
351.455 433.217 348.9 430.007 348.9 423.587 cv
348.9 422.704 li
348.9 416.297 351.455 413.087 356.578 413.087 cv
361.687 413.087 364.242 416.297 364.242 422.704 cv
364.242 423.587 li
cp
343.952 413.528 mo
344.085 413.568 344.152 413.636 344.152 413.729 cv
344.152 414.398 li
344.152 414.559 344.059 414.625 343.885 414.585 cv
343.283 414.479 342.587 414.398 341.798 414.331 cv
341.009 414.277 340.167 414.251 339.271 414.251 cv
337.986 414.251 336.903 414.411 336.021 414.719 cv
335.137 415.04 334.416 415.535 333.867 416.217 cv
333.318 416.886 332.931 417.769 332.69 418.853 cv
332.449 419.936 332.329 421.246 332.329 422.784 cv
332.329 423.507 li
332.329 424.897 332.422 426.128 332.636 427.185 cv
332.837 428.241 333.211 429.124 333.733 429.847 cv
334.255 430.568 334.977 431.117 335.886 431.491 cv
336.783 431.853 337.933 432.04 339.311 432.04 cv
340.033 432.04 340.755 432.013 341.478 431.946 cv
342.186 431.879 342.788 431.772 343.296 431.625 cv
343.296 423.868 li
338.173 423.868 li
337.96 423.868 337.866 423.773 337.866 423.587 cv
337.866 422.985 li
337.866 422.798 337.96 422.704 338.173 422.704 cv
344.46 422.704 li
344.688 422.704 344.808 422.784 344.808 422.958 cv
344.808 431.705 li
344.808 432.187 344.567 432.508 344.085 432.655 cv
343.443 432.855 342.681 433.003 341.812 433.083 cv
340.942 433.163 340.046 433.217 339.137 433.217 cv
337.545 433.217 336.221 433.003 335.164 432.574 cv
334.094 432.146 333.238 431.518 332.596 430.689 cv
331.954 429.873 331.5 428.87 331.219 427.68 cv
330.951 426.489 330.804 425.125 330.804 423.587 cv
330.804 422.677 li
330.804 419.374 331.446 416.952 332.73 415.401 cv
334.014 413.863 336.167 413.087 339.163 413.087 cv
340.126 413.087 341.009 413.128 341.798 413.194 cv
342.587 413.274 343.31 413.382 343.952 413.528 cv
343.952 413.528 li
cp
325.855 422.784 mo
325.855 419.788 325.347 417.608 324.331 416.271 cv
323.301 414.92 321.763 414.251 319.703 414.251 cv
317.643 414.251 316.091 414.92 315.075 416.271 cv
314.059 417.608 313.55 419.788 313.55 422.784 cv
313.55 423.507 li
313.55 426.516 314.059 428.683 315.075 430.033 cv
316.091 431.371 317.643 432.04 319.703 432.04 cv
321.763 432.04 323.301 431.371 324.331 430.033 cv
325.347 428.683 325.855 426.516 325.855 423.507 cv
325.855 422.784 li
cp
327.367 423.587 mo
327.367 430.007 324.812 433.217 319.703 433.217 cv
314.593 433.217 312.025 430.007 312.025 423.587 cv
312.025 422.704 li
312.025 416.297 314.593 413.087 319.703 413.087 cv
324.812 413.087 327.367 416.297 327.367 422.704 cv
327.367 423.587 li
cp
310.42 432.04 mo
310.621 432.04 310.728 432.134 310.728 432.32 cv
310.728 432.788 li
310.728 432.976 310.621 433.069 310.42 433.069 cv
309.792 433.109 309.217 433.137 308.695 433.137 cv
308.173 433.149 307.625 433.163 307.063 433.19 cv
306.501 433.203 305.899 433.217 305.258 433.217 cv
304.616 433.217 303.88 433.217 303.051 433.217 cv
302.275 433.217 301.633 433.137 301.151 433.003 cv
300.657 432.869 300.269 432.655 299.988 432.388 cv
299.72 432.12 299.533 431.786 299.426 431.384 cv
299.319 430.996 299.266 430.528 299.266 430.021 cv
299.266 413.702 li
299.266 413.516 299.386 413.422 299.613 413.422 cv
300.443 413.422 li
300.67 413.422 300.791 413.516 300.791 413.702 cv
300.791 430.181 li
300.791 430.702 300.911 431.144 301.178 431.505 cv
301.446 431.866 301.981 432.04 302.783 432.04 cv
310.42 432.04 li
cp
.746975 .580102 .496712 .306798 cmyk
f
636.73 724.184 mo
636.73 719.154 li
637.507 719.154 li
637.507 719.863 li
637.653 719.623 637.867 719.422 638.136 719.275 cv
638.39 719.114 638.697 719.047 639.031 719.047 cv
639.393 719.047 639.7 719.128 639.94 719.275 cv
640.182 719.436 640.342 719.649 640.449 719.93 cv
640.851 719.342 641.358 719.047 642 719.047 cv
642.509 719.047 642.896 719.181 643.164 719.462 cv
643.432 719.743 643.565 720.157 643.565 720.732 cv
643.565 724.184 li
642.71 724.184 li
642.71 721.014 li
642.71 720.68 642.683 720.438 642.629 720.277 cv
642.576 720.131 642.469 720.011 642.321 719.917 cv
642.175 719.823 642.015 719.783 641.813 719.783 cv
641.452 719.783 641.158 719.903 640.931 720.131 cv
640.689 720.372 640.583 720.746 640.583 721.268 cv
640.583 724.184 li
639.727 724.184 li
639.727 720.92 li
639.727 720.546 639.66 720.251 639.513 720.063 cv
639.379 719.877 639.151 719.783 638.831 719.783 cv
638.59 719.783 638.376 719.85 638.162 719.971 cv
637.961 720.104 637.814 720.277 637.721 720.532 cv
637.641 720.772 637.587 721.12 637.587 721.575 cv
637.587 724.184 li
636.73 724.184 li
cp
628.251 721.669 mo
628.251 722.311 628.398 722.792 628.679 723.113 cv
628.96 723.435 629.321 723.595 629.749 723.595 cv
630.164 723.595 630.525 723.435 630.806 723.113 cv
631.087 722.792 631.221 722.297 631.221 721.643 cv
631.221 721.026 631.087 720.559 630.792 720.237 cv
630.511 719.917 630.164 719.756 629.749 719.756 cv
629.321 719.756 628.96 719.917 628.679 720.237 cv
628.398 720.546 628.251 721.026 628.251 721.669 cv
628.251 721.669 li
cp
627.382 721.669 mo
627.382 720.746 627.636 720.051 628.157 719.609 cv
628.586 719.234 629.12 719.047 629.749 719.047 cv
630.431 719.047 630.993 719.275 631.435 719.729 cv
631.876 720.171 632.104 720.8 632.104 721.603 cv
632.104 722.244 631.996 722.752 631.809 723.127 cv
631.608 723.487 631.327 723.782 630.952 723.982 cv
630.592 724.196 630.177 724.291 629.749 724.291 cv
629.04 724.291 628.465 724.063 628.037 723.622 cv
627.596 723.167 627.382 722.512 627.382 721.669 cv
627.382 721.669 li
cp
622.5 722.352 mo
623.343 722.458 li
623.249 723.033 623.008 723.487 622.634 723.809 cv
622.259 724.13 621.791 724.291 621.242 724.291 cv
620.561 724.291 620.012 724.063 619.584 723.622 cv
619.17 723.167 618.955 722.525 618.955 721.695 cv
618.955 721.147 619.049 720.68 619.236 720.265 cv
619.41 719.863 619.691 719.556 620.053 719.355 cv
620.427 719.154 620.814 719.047 621.256 719.047 cv
621.791 719.047 622.246 719.181 622.594 719.462 cv
622.941 719.743 623.169 720.131 623.262 720.639 cv
622.433 720.76 li
622.353 720.425 622.219 720.171 622.019 719.997 cv
621.817 719.837 621.577 719.743 621.282 719.743 cv
620.854 719.743 620.507 719.903 620.239 720.211 cv
619.972 720.519 619.838 721 619.838 721.669 cv
619.838 722.338 619.958 722.832 620.226 723.14 cv
620.479 723.448 620.814 723.595 621.242 723.595 cv
621.577 723.595 621.857 723.487 622.072 723.287 cv
622.299 723.087 622.446 722.766 622.5 722.352 cv
622.5 722.352 li
cp
613.124 724.184 mo
613.124 723.221 li
614.087 723.221 li
614.087 724.184 li
613.124 724.184 li
cp
605.072 726.123 mo
604.979 725.334 li
605.166 725.388 605.326 725.414 605.46 725.414 cv
605.661 725.414 605.808 725.374 605.915 725.32 cv
606.035 725.253 606.129 725.16 606.195 725.053 cv
606.249 724.959 606.343 724.759 606.463 724.411 cv
606.477 724.371 606.503 724.291 606.543 724.21 cv
604.631 719.154 li
605.54 719.154 li
606.584 722.057 li
606.73 722.431 606.851 722.819 606.958 723.221 cv
607.052 722.846 607.172 722.458 607.306 722.083 cv
608.376 719.154 li
609.231 719.154 li
607.332 724.277 li
607.118 724.825 606.958 725.2 606.851 725.414 cv
606.704 725.694 606.517 725.896 606.329 726.029 cv
606.129 726.163 605.901 726.229 605.621 726.229 cv
605.46 726.229 605.272 726.189 605.072 726.123 cv
605.072 726.123 li
cp
596.084 724.184 mo
596.084 719.154 li
596.847 719.154 li
596.847 719.863 li
597.208 719.315 597.743 719.047 598.438 719.047 cv
598.746 719.047 599.026 719.101 599.28 719.208 cv
599.534 719.315 599.722 719.462 599.855 719.636 cv
599.976 719.81 600.07 720.023 600.11 720.265 cv
600.15 720.425 600.164 720.706 600.164 721.094 cv
600.164 724.184 li
599.308 724.184 li
599.308 721.134 li
599.308 720.786 599.28 720.519 599.214 720.345 cv
599.147 720.185 599.026 720.037 598.853 719.943 cv
598.692 719.837 598.491 719.783 598.265 719.783 cv
597.903 719.783 597.596 719.903 597.328 720.131 cv
597.061 720.358 596.927 720.8 596.927 721.441 cv
596.927 724.184 li
596.084 724.184 li
cp
590.266 721.669 mo
589.958 721.789 589.49 721.896 588.875 721.99 cv
588.514 722.03 588.273 722.097 588.126 722.15 cv
587.979 722.217 587.858 722.311 587.792 722.431 cv
587.712 722.552 587.671 722.686 587.671 722.832 cv
587.671 723.06 587.752 723.247 587.925 723.395 cv
588.1 723.555 588.354 723.622 588.675 723.622 cv
589.009 723.622 589.303 723.555 589.557 723.408 cv
589.812 723.274 589.998 723.073 590.119 722.819 cv
590.213 722.632 590.266 722.352 590.266 721.977 cv
590.266 721.669 li
cp
590.333 723.555 mo
590.012 723.822 589.704 724.022 589.423 724.13 cv
589.129 724.236 588.808 724.291 588.474 724.291 cv
587.925 724.291 587.497 724.156 587.203 723.889 cv
586.909 723.622 586.748 723.274 586.748 722.859 cv
586.748 722.618 586.815 722.391 586.922 722.19 cv
587.029 721.977 587.177 721.816 587.363 721.695 cv
587.551 721.575 587.752 721.481 587.979 721.415 cv
588.14 721.374 588.394 721.334 588.741 721.294 cv
589.423 721.214 589.932 721.107 590.266 721 cv
590.266 720.88 590.266 720.8 590.266 720.772 cv
590.266 720.425 590.186 720.185 590.025 720.037 cv
589.798 719.85 589.477 719.756 589.049 719.756 cv
588.647 719.756 588.354 719.823 588.153 719.971 cv
587.966 720.104 587.832 720.358 587.738 720.72 cv
586.896 720.599 li
586.976 720.237 587.097 719.957 587.271 719.729 cv
587.443 719.516 587.698 719.342 588.032 719.221 cv
588.354 719.101 588.741 719.047 589.169 719.047 cv
589.61 719.047 589.958 719.101 590.226 719.194 cv
590.493 719.302 590.694 719.422 590.814 719.582 cv
590.948 719.729 591.028 719.93 591.082 720.157 cv
591.108 720.305 591.122 720.572 591.122 720.946 cv
591.122 722.083 li
591.122 722.873 591.148 723.367 591.176 723.582 cv
591.216 723.796 591.282 723.996 591.39 724.184 cv
590.493 724.184 li
590.413 724.01 590.359 723.796 590.333 723.555 cv
590.333 723.555 li
cp
578.79 721.695 mo
578.79 722.352 578.924 722.819 579.179 723.127 cv
579.445 723.435 579.753 723.595 580.128 723.595 cv
580.502 723.595 580.837 723.435 581.104 723.113 cv
581.371 722.792 581.505 722.297 581.505 721.629 cv
581.505 720.986 581.371 720.506 581.104 720.197 cv
580.85 719.877 580.528 719.716 580.168 719.716 cv
579.807 719.716 579.485 719.89 579.205 720.225 cv
578.924 720.559 578.79 721.054 578.79 721.695 cv
578.79 721.695 li
cp
578.015 726.123 mo
578.015 719.154 li
578.79 719.154 li
578.79 719.81 li
578.964 719.556 579.179 719.368 579.405 719.234 cv
579.633 719.114 579.914 719.047 580.248 719.047 cv
580.676 719.047 581.051 719.154 581.385 719.382 cv
581.706 719.596 581.96 719.903 582.121 720.305 cv
582.295 720.72 582.375 721.147 582.375 721.629 cv
582.375 722.15 582.281 722.605 582.094 723.02 cv
581.92 723.435 581.652 723.742 581.291 723.97 cv
580.943 724.184 580.569 724.291 580.182 724.291 cv
579.9 724.291 579.646 724.236 579.419 724.116 cv
579.191 723.996 579.004 723.849 578.87 723.662 cv
578.87 726.123 li
578.015 726.123 li
cp
566.298 724.184 mo
566.298 719.154 li
567.061 719.154 li
567.061 719.863 li
567.221 719.623 567.421 719.422 567.689 719.275 cv
567.956 719.114 568.251 719.047 568.585 719.047 cv
568.96 719.047 569.254 719.128 569.494 719.275 cv
569.735 719.436 569.909 719.649 570.003 719.93 cv
570.404 719.342 570.926 719.047 571.554 719.047 cv
572.063 719.047 572.45 719.181 572.718 719.462 cv
572.985 719.743 573.119 720.157 573.119 720.732 cv
573.119 724.184 li
572.264 724.184 li
572.264 721.014 li
572.264 720.68 572.236 720.438 572.183 720.277 cv
572.13 720.131 572.022 720.011 571.875 719.917 cv
571.741 719.823 571.568 719.783 571.367 719.783 cv
571.02 719.783 570.726 719.903 570.484 720.131 cv
570.257 720.372 570.137 720.746 570.137 721.268 cv
570.137 724.184 li
569.28 724.184 li
569.28 720.92 li
569.28 720.546 569.214 720.251 569.066 720.063 cv
568.933 719.877 568.706 719.783 568.385 719.783 cv
568.144 719.783 567.93 719.85 567.729 719.971 cv
567.515 720.104 567.368 720.277 567.288 720.532 cv
567.194 720.772 567.141 721.12 567.141 721.575 cv
567.141 724.184 li
566.298 724.184 li
cp
557.818 721.669 mo
557.818 722.311 557.952 722.792 558.233 723.113 cv
558.514 723.435 558.875 723.595 559.303 723.595 cv
559.718 723.595 560.079 723.435 560.359 723.113 cv
560.641 722.792 560.774 722.297 560.774 721.643 cv
560.774 721.026 560.641 720.559 560.359 720.237 cv
560.079 719.917 559.718 719.756 559.303 719.756 cv
558.875 719.756 558.514 719.917 558.233 720.237 cv
557.952 720.546 557.818 721.026 557.818 721.669 cv
557.818 721.669 li
cp
556.936 721.669 mo
556.936 720.746 557.203 720.051 557.711 719.609 cv
558.152 719.234 558.675 719.047 559.303 719.047 cv
559.984 719.047 560.56 719.275 561.001 719.729 cv
561.43 720.171 561.657 720.8 561.657 721.603 cv
561.657 722.244 561.563 722.752 561.362 723.127 cv
561.162 723.487 560.881 723.782 560.52 723.982 cv
560.146 724.196 559.744 724.291 559.303 724.291 cv
558.594 724.291 558.032 724.063 557.591 723.622 cv
557.149 723.167 556.936 722.512 556.936 721.669 cv
556.936 721.669 li
cp
552.054 722.352 mo
552.896 722.458 li
552.803 723.033 552.562 723.487 552.188 723.809 cv
551.813 724.13 551.345 724.291 550.81 724.291 cv
550.114 724.291 549.565 724.063 549.151 723.622 cv
548.724 723.167 548.522 722.525 548.522 721.695 cv
548.522 721.147 548.603 720.68 548.79 720.265 cv
548.964 719.863 549.245 719.556 549.606 719.355 cv
549.98 719.154 550.382 719.047 550.81 719.047 cv
551.358 719.047 551.8 719.181 552.147 719.462 cv
552.495 719.743 552.723 720.131 552.816 720.639 cv
551.986 720.76 li
551.906 720.425 551.772 720.171 551.572 719.997 cv
551.371 719.837 551.131 719.743 550.85 719.743 cv
550.408 719.743 550.061 719.903 549.793 720.211 cv
549.525 720.519 549.392 721 549.392 721.669 cv
549.392 722.338 549.525 722.832 549.78 723.14 cv
550.034 723.448 550.382 723.595 550.796 723.595 cv
551.131 723.595 551.411 723.487 551.639 723.287 cv
551.853 723.087 552 722.766 552.054 722.352 cv
552.054 722.352 li
cp
542.678 724.184 mo
542.678 723.221 li
543.654 723.221 li
543.654 724.184 li
542.678 724.184 li
cp
533.235 724.184 mo
531.71 719.154 li
532.606 719.154 li
533.409 722.057 li
533.689 723.14 li
533.703 723.087 533.797 722.739 533.957 722.097 cv
534.746 719.154 li
535.629 719.154 li
536.378 722.07 li
536.633 723.033 li
536.927 722.057 li
537.796 719.154 li
538.625 719.154 li
537.033 724.184 li
536.151 724.184 li
535.361 721.174 li
535.161 720.318 li
534.145 724.184 li
533.235 724.184 li
cp
522.588 724.184 mo
521.063 719.154 li
521.96 719.154 li
522.763 722.057 li
523.057 723.14 li
523.057 723.087 523.149 722.739 523.311 722.097 cv
524.113 719.154 li
524.982 719.154 li
525.745 722.07 li
525.985 723.033 li
526.28 722.057 li
527.149 719.154 li
527.979 719.154 li
526.4 724.184 li
525.518 724.184 li
524.715 721.174 li
524.515 720.318 li
523.498 724.184 li
522.588 724.184 li
cp
511.941 724.184 mo
510.431 719.154 li
511.313 719.154 li
512.116 722.057 li
512.41 723.14 li
512.423 723.087 512.504 722.739 512.664 722.097 cv
513.467 719.154 li
514.336 719.154 li
515.099 722.07 li
515.339 723.033 li
515.634 722.057 li
516.503 719.154 li
517.332 719.154 li
515.754 724.184 li
514.871 724.184 li
514.068 721.174 li
513.868 720.318 li
512.852 724.184 li
511.941 724.184 li
cp
0 0 0 0 cmyk
f
261.575 684.774 mo
378.914 684.774 li
378.914 698.242 li
261.575 698.242 li
261.575 684.774 li
cp
0 .919188 0 0 cmyk
ef
345.543 694.939 mo
346.586 689.91 li
347.349 689.91 li
347.135 690.94 li
347.402 690.552 347.656 690.258 347.897 690.07 cv
348.151 689.896 348.406 689.803 348.66 689.803 cv
348.833 689.803 349.034 689.856 349.288 689.977 cv
348.94 690.779 li
348.793 690.673 348.633 690.619 348.446 690.619 cv
348.151 690.619 347.844 690.779 347.523 691.114 cv
347.202 691.448 346.961 692.05 346.774 692.919 cv
346.359 694.939 li
345.543 694.939 li
cp
341.343 691.97 mo
344.179 691.97 li
344.179 691.89 344.179 691.822 344.179 691.782 cv
344.179 691.354 344.072 691.021 343.858 690.793 cv
343.644 690.565 343.363 690.459 343.029 690.459 cv
342.654 690.459 342.32 690.579 342.012 690.833 cv
341.718 691.087 341.491 691.462 341.343 691.97 cv
341.343 691.97 li
cp
343.845 693.227 mo
344.674 693.308 li
344.554 693.722 344.286 694.109 343.845 694.484 cv
343.417 694.858 342.895 695.046 342.307 695.046 cv
341.932 695.046 341.584 694.966 341.277 694.792 cv
340.969 694.618 340.729 694.364 340.568 694.043 cv
340.394 693.709 340.313 693.334 340.313 692.919 cv
340.313 692.371 340.447 691.836 340.702 691.328 cv
340.956 690.807 341.29 690.419 341.691 690.178 cv
342.092 689.924 342.534 689.803 343.002 689.803 cv
343.604 689.803 344.085 689.99 344.447 690.352 cv
344.808 690.726 344.981 691.234 344.981 691.876 cv
344.981 692.117 344.968 692.371 344.915 692.625 cv
341.196 692.625 li
341.183 692.732 341.183 692.813 341.183 692.893 cv
341.183 693.374 341.29 693.722 341.504 693.976 cv
341.731 694.217 341.985 694.351 342.307 694.351 cv
342.601 694.351 342.895 694.257 343.176 694.057 cv
343.457 693.869 343.684 693.588 343.845 693.227 cv
343.845 693.227 li
cp
334.736 694.939 mo
335.793 689.91 li
336.582 689.91 li
336.395 690.779 li
336.743 690.445 337.05 690.19 337.358 690.03 cv
337.652 689.884 337.946 689.803 338.267 689.803 cv
338.668 689.803 339.003 689.91 339.23 690.138 cv
339.471 690.352 339.591 690.646 339.591 691.021 cv
339.591 691.207 339.538 691.502 339.458 691.903 cv
338.775 694.939 li
337.919 694.939 li
338.628 691.756 li
338.695 691.448 338.735 691.221 338.735 691.073 cv
338.735 690.899 338.668 690.767 338.562 690.659 cv
338.441 690.552 338.267 690.512 338.04 690.512 cv
337.599 690.512 337.197 690.659 336.85 690.98 cv
336.502 691.288 336.248 691.836 336.074 692.599 cv
335.592 694.939 li
334.736 694.939 li
cp
330.376 692.719 mo
330.376 693.053 330.403 693.32 330.47 693.495 cv
330.563 693.735 330.697 693.923 330.884 694.043 cv
331.058 694.177 331.246 694.243 331.459 694.243 cv
331.754 694.243 332.021 694.137 332.302 693.949 cv
332.583 693.749 332.81 693.44 332.984 693.026 cv
333.158 692.612 333.238 692.224 333.238 691.85 cv
333.238 691.435 333.131 691.101 332.891 690.859 cv
332.663 690.605 332.382 690.485 332.048 690.485 cv
331.834 690.485 331.633 690.538 331.433 690.659 cv
331.246 690.767 331.058 690.94 330.884 691.167 cv
330.724 691.395 330.59 691.676 330.51 691.983 cv
330.416 692.304 330.376 692.545 330.376 692.719 cv
330.376 692.719 li
cp
329.292 695.394 mo
330.175 695.475 li
330.162 695.675 330.188 695.822 330.242 695.915 cv
330.296 696.009 330.376 696.089 330.497 696.143 cv
330.644 696.21 330.844 696.25 331.098 696.25 cv
331.606 696.25 331.981 696.116 332.208 695.849 cv
332.355 695.661 332.502 695.273 332.623 694.671 cv
332.703 694.257 li
332.262 694.712 331.794 694.939 331.286 694.939 cv
330.777 694.939 330.349 694.752 330.015 694.378 cv
329.667 694.003 329.493 693.468 329.493 692.786 cv
329.493 692.224 329.64 691.702 329.908 691.234 cv
330.175 690.753 330.497 690.405 330.871 690.164 cv
331.232 689.924 331.62 689.803 332.021 689.803 cv
332.676 689.803 333.185 690.11 333.533 690.726 cv
333.72 689.91 li
334.509 689.91 li
333.479 694.766 li
333.372 695.3 333.225 695.715 333.051 696.009 cv
332.864 696.316 332.623 696.544 332.302 696.705 cv
331.981 696.879 331.606 696.959 331.192 696.959 cv
330.791 696.959 330.443 696.905 330.148 696.798 cv
329.854 696.691 329.64 696.544 329.493 696.344 cv
329.346 696.143 329.279 695.915 329.279 695.648 cv
329.279 695.567 329.279 695.487 329.292 695.394 cv
329.292 695.394 li
cp
327.179 694.939 mo
328.236 689.91 li
329.092 689.91 li
328.035 694.939 li
327.179 694.939 li
cp
328.437 688.96 mo
328.637 687.997 li
329.493 687.997 li
329.279 688.96 li
328.437 688.96 li
cp
322.431 693.214 mo
323.287 693.16 li
323.287 693.414 323.327 693.614 323.408 693.789 cv
323.475 693.963 323.622 694.109 323.822 694.217 cv
324.023 694.337 324.264 694.391 324.531 694.391 cv
324.905 694.391 325.187 694.311 325.374 694.163 cv
325.561 694.003 325.654 693.829 325.654 693.628 cv
325.654 693.481 325.601 693.334 325.494 693.2 cv
325.374 693.066 325.093 692.906 324.638 692.719 cv
324.197 692.518 323.902 692.385 323.782 692.304 cv
323.568 692.17 323.408 692.023 323.301 691.85 cv
323.193 691.676 323.14 691.476 323.14 691.247 cv
323.14 690.847 323.287 690.512 323.608 690.218 cv
323.916 689.937 324.357 689.803 324.933 689.803 cv
325.561 689.803 326.042 689.937 326.363 690.231 cv
326.698 690.525 326.872 690.913 326.885 691.395 cv
326.042 691.448 li
326.029 691.141 325.922 690.899 325.722 690.726 cv
325.521 690.552 325.24 690.459 324.879 690.459 cv
324.571 690.459 324.344 690.525 324.183 690.659 cv
324.023 690.793 323.943 690.94 323.943 691.101 cv
323.943 691.261 324.01 691.408 324.157 691.516 cv
324.25 691.608 324.491 691.729 324.879 691.903 cv
325.534 692.184 325.949 692.411 326.109 692.572 cv
326.39 692.826 326.524 693.146 326.524 693.521 cv
326.524 693.775 326.444 694.017 326.297 694.257 cv
326.136 694.497 325.909 694.685 325.588 694.832 cv
325.28 694.979 324.905 695.046 324.491 695.046 cv
323.902 695.046 323.408 694.899 323.006 694.618 cv
322.605 694.323 322.404 693.855 322.431 693.214 cv
322.431 693.214 li
cp
318.151 691.97 mo
320.987 691.97 li
320.987 691.89 320.987 691.822 320.987 691.782 cv
320.987 691.354 320.88 691.021 320.666 690.793 cv
320.452 690.565 320.171 690.459 319.836 690.459 cv
319.462 690.459 319.127 690.579 318.833 690.833 cv
318.526 691.087 318.298 691.462 318.151 691.97 cv
318.151 691.97 li
cp
320.652 693.227 mo
321.481 693.308 li
321.361 693.722 321.094 694.109 320.652 694.484 cv
320.225 694.858 319.716 695.046 319.114 695.046 cv
318.74 695.046 318.392 694.966 318.084 694.792 cv
317.777 694.618 317.536 694.364 317.375 694.043 cv
317.215 693.709 317.135 693.334 317.135 692.919 cv
317.135 692.371 317.255 691.836 317.509 691.328 cv
317.763 690.807 318.098 690.419 318.499 690.178 cv
318.9 689.924 319.342 689.803 319.81 689.803 cv
320.412 689.803 320.893 689.99 321.254 690.352 cv
321.615 690.726 321.789 691.234 321.789 691.876 cv
321.789 692.117 321.776 692.371 321.723 692.625 cv
318.018 692.625 li
318.004 692.732 317.991 692.813 317.991 692.893 cv
317.991 693.374 318.098 693.722 318.325 693.976 cv
318.539 694.217 318.807 694.351 319.114 694.351 cv
319.408 694.351 319.703 694.257 319.984 694.057 cv
320.278 693.869 320.492 693.588 320.652 693.227 cv
320.652 693.227 li
cp
311.129 694.149 mo
312.24 694.149 li
312.734 694.149 313.176 694.109 313.563 694.017 cv
313.804 693.963 314.005 693.883 314.179 693.762 cv
314.406 693.628 314.607 693.44 314.794 693.2 cv
315.035 692.893 315.222 692.531 315.369 692.144 cv
315.517 691.742 315.583 691.288 315.583 690.779 cv
315.583 690.218 315.49 689.79 315.289 689.495 cv
315.088 689.188 314.848 688.987 314.54 688.894 cv
314.313 688.813 313.965 688.773 313.483 688.773 cv
312.253 688.773 li
311.129 694.149 li
cp
310.046 694.939 mo
311.504 687.997 li
313.59 687.997 li
314.099 687.997 314.473 688.024 314.741 688.104 cv
315.128 688.198 315.45 688.372 315.717 688.626 cv
315.984 688.88 316.185 689.188 316.319 689.563 cv
316.453 689.937 316.52 690.364 316.52 690.833 cv
316.52 691.395 316.439 691.903 316.266 692.357 cv
316.105 692.826 315.877 693.227 315.61 693.574 cv
315.329 693.923 315.048 694.19 314.754 694.391 cv
314.446 694.592 314.099 694.738 313.697 694.832 cv
313.376 694.899 313.002 694.939 312.547 694.939 cv
310.046 694.939 li
cp
305.873 693.106 mo
306.729 693.187 li
306.515 693.815 306.207 694.283 305.806 694.592 cv
305.418 694.899 304.963 695.046 304.455 695.046 cv
303.907 695.046 303.466 694.872 303.131 694.511 cv
302.783 694.163 302.623 693.669 302.623 693.04 cv
302.623 692.491 302.73 691.943 302.944 691.421 cv
303.158 690.887 303.479 690.485 303.88 690.218 cv
304.281 689.937 304.75 689.803 305.271 689.803 cv
305.806 689.803 306.234 689.95 306.555 690.258 cv
306.876 690.565 307.037 690.967 307.037 691.462 cv
306.181 691.528 li
306.181 691.207 306.087 690.953 305.913 690.779 cv
305.726 690.593 305.485 690.512 305.191 690.512 cv
304.843 690.512 304.549 690.619 304.295 690.833 cv
304.041 691.047 303.84 691.381 303.693 691.822 cv
303.559 692.264 303.479 692.692 303.479 693.106 cv
303.479 693.534 303.572 693.855 303.76 694.069 cv
303.96 694.283 304.188 694.391 304.469 694.391 cv
304.75 694.391 305.017 694.283 305.271 694.069 cv
305.525 693.855 305.726 693.534 305.873 693.106 cv
305.873 693.106 li
cp
300.229 694.939 mo
301.285 689.91 li
302.141 689.91 li
301.085 694.939 li
300.229 694.939 li
cp
301.486 688.96 mo
301.687 687.997 li
302.542 687.997 li
302.329 688.96 li
301.486 688.96 li
cp
294.852 694.939 mo
296.31 687.997 li
297.166 687.997 li
296.604 690.659 li
296.912 690.352 297.206 690.138 297.474 690.004 cv
297.754 689.87 298.022 689.803 298.316 689.803 cv
298.717 689.803 299.039 689.91 299.266 690.124 cv
299.493 690.352 299.613 690.633 299.613 690.993 cv
299.613 691.167 299.56 691.502 299.453 691.97 cv
298.784 694.939 li
297.941 694.939 li
298.61 691.903 li
298.704 691.462 298.757 691.181 298.757 691.061 cv
298.757 690.899 298.704 690.767 298.583 690.659 cv
298.477 690.552 298.316 690.512 298.102 690.512 cv
297.794 690.512 297.514 690.593 297.233 690.753 cv
296.965 690.913 296.738 691.127 296.591 691.421 cv
296.43 691.702 296.283 692.157 296.163 692.786 cv
295.708 694.939 li
294.852 694.939 li
cp
290.746 692.879 mo
290.746 693.267 290.772 693.521 290.826 693.669 cv
290.906 693.869 291.027 694.029 291.214 694.163 cv
291.388 694.283 291.602 694.351 291.843 694.351 cv
292.337 694.351 292.739 694.069 293.033 693.521 cv
293.341 692.96 293.488 692.397 293.488 691.822 cv
293.488 691.395 293.394 691.061 293.193 690.833 cv
292.979 690.605 292.725 690.485 292.417 690.485 cv
292.204 690.485 292.003 690.538 291.816 690.659 cv
291.628 690.779 291.455 690.953 291.294 691.181 cv
291.134 691.408 291 691.689 290.893 692.023 cv
290.799 692.344 290.746 692.639 290.746 692.879 cv
290.746 692.879 li
cp
289.047 696.865 mo
290.505 689.91 li
291.294 689.91 li
291.147 690.605 li
291.441 690.298 291.708 690.098 291.936 689.977 cv
292.177 689.856 292.417 689.803 292.685 689.803 cv
293.153 689.803 293.555 689.977 293.875 690.324 cv
294.183 690.673 294.344 691.167 294.344 691.822 cv
294.344 692.344 294.264 692.813 294.089 693.24 cv
293.916 693.682 293.702 694.017 293.448 694.283 cv
293.193 694.552 292.939 694.738 292.672 694.858 cv
292.417 694.979 292.15 695.046 291.883 695.046 cv
291.281 695.046 290.799 694.738 290.479 694.123 cv
289.903 696.865 li
289.047 696.865 li
cp
287.776 692.385 mo
287.656 692.438 287.522 692.478 287.389 692.491 cv
287.242 692.518 287.014 692.545 286.693 692.572 cv
286.185 692.625 285.837 692.679 285.637 692.746 cv
285.436 692.813 285.275 692.919 285.168 693.066 cv
285.062 693.214 285.008 693.388 285.008 693.562 cv
285.008 693.802 285.102 694.003 285.262 694.149 cv
285.422 694.311 285.663 694.391 285.971 694.391 cv
286.252 694.391 286.533 694.311 286.787 694.163 cv
287.054 694.017 287.255 693.802 287.416 693.534 cv
287.563 693.267 287.683 692.879 287.776 692.385 cv
287.776 692.385 li
cp
287.456 694.311 mo
287.148 694.564 286.867 694.752 286.586 694.872 cv
286.319 694.992 286.024 695.046 285.703 695.046 cv
285.249 695.046 284.874 694.912 284.593 694.631 cv
284.299 694.364 284.165 694.017 284.165 693.588 cv
284.165 693.308 284.219 693.066 284.353 692.839 cv
284.486 692.625 284.647 692.451 284.861 692.331 cv
285.075 692.197 285.329 692.104 285.637 692.05 cv
285.837 692.01 286.198 691.983 286.733 691.956 cv
287.282 691.93 287.669 691.876 287.897 691.782 cv
287.964 691.556 288.004 691.354 288.004 691.207 cv
288.004 691.007 287.924 690.847 287.79 690.726 cv
287.589 690.579 287.295 690.499 286.907 690.499 cv
286.546 690.499 286.252 690.579 286.024 690.739 cv
285.784 690.899 285.623 691.127 285.516 691.421 cv
284.66 691.341 li
284.834 690.847 285.115 690.459 285.49 690.19 cv
285.877 689.937 286.359 689.803 286.947 689.803 cv
287.563 689.803 288.058 689.95 288.418 690.244 cv
288.699 690.459 288.833 690.753 288.833 691.101 cv
288.833 691.368 288.793 691.689 288.726 692.037 cv
288.445 693.28 li
288.352 693.682 288.312 694.003 288.312 694.257 cv
288.312 694.418 288.352 694.645 288.418 694.939 cv
287.549 694.939 li
287.509 694.778 287.469 694.564 287.456 694.311 cv
287.456 694.311 li
cp
280.835 694.939 mo
281.878 689.91 li
282.641 689.91 li
282.426 690.94 li
282.694 690.552 282.948 690.258 283.189 690.07 cv
283.443 689.896 283.697 689.803 283.951 689.803 cv
284.125 689.803 284.339 689.856 284.58 689.977 cv
284.232 690.779 li
284.085 690.673 283.924 690.619 283.751 690.619 cv
283.443 690.619 283.135 690.779 282.814 691.114 cv
282.507 691.448 282.253 692.05 282.065 692.919 cv
281.651 694.939 li
280.835 694.939 li
cp
276.929 692.197 mo
277.104 691.421 li
280.14 691.421 li
279.551 694.243 li
279.163 694.484 278.722 694.671 278.24 694.832 cv
277.746 694.979 277.264 695.06 276.796 695.06 cv
275.779 695.06 275.03 694.752 274.535 694.137 cv
274.107 693.628 273.893 692.96 273.893 692.157 cv
273.893 691.328 274.081 690.565 274.455 689.884 cv
274.816 689.201 275.284 688.693 275.846 688.372 cv
276.408 688.037 277.023 687.877 277.705 687.877 cv
278.2 687.877 278.642 687.971 279.043 688.145 cv
279.431 688.318 279.725 688.559 279.938 688.867 cv
280.153 689.161 280.3 689.549 280.394 690.03 cv
279.484 690.138 li
279.391 689.655 279.189 689.281 278.882 689.027 cv
278.561 688.773 278.173 688.64 277.692 688.64 cv
277.184 688.64 276.715 688.786 276.274 689.054 cv
275.846 689.321 275.499 689.736 275.23 690.284 cv
274.977 690.847 274.843 691.462 274.843 692.17 cv
274.843 692.866 275.017 693.4 275.351 693.749 cv
275.699 694.109 276.18 694.283 276.782 694.283 cv
277.397 694.283 278.04 694.097 278.735 693.695 cv
279.056 692.197 li
276.929 692.197 li
cp
0 0 0 0 cmyk
f
261.575 684.774 mo
154.147 684.774 li
154.147 698.242 li
261.575 698.242 li
261.575 684.774 li
cp
.542199 .44123 0 0 cmyk
ef
46.7188 684.774 mo
154.147 684.774 li
154.147 698.242 li
46.7188 698.242 li
46.7188 684.774 li
cp
.704829 .613764 0 0 cmyk
ef
520.903 391.794 mo
522.695 392.048 524.487 392.222 526.307 392.329 cv
528.125 392.437 529.892 392.49 531.616 392.49 cv
533.823 392.49 535.629 392.276 537.02 391.861 cv
538.425 391.446 539.534 390.805 540.377 389.935 cv
541.206 389.052 541.781 387.942 542.115 386.604 cv
542.437 385.254 542.61 383.689 542.61 381.883 cv
542.61 379.637 li
540.818 380.198 538.933 380.653 536.939 380.987 cv
534.947 381.322 532.874 381.496 530.733 381.496 cv
526.079 381.496 522.575 380.305 520.194 377.924 cv
517.813 375.557 516.623 371.731 516.623 366.476 cv
516.623 342.32 li
516.623 341.705 517.011 341.397 517.787 341.397 cv
520.997 341.397 li
521.772 341.397 522.16 341.705 522.16 342.32 cv
522.16 366.087 li
522.16 368.054 522.334 369.726 522.695 371.117 cv
523.043 372.508 523.645 373.671 524.475 374.607 cv
525.317 375.53 526.44 376.212 527.871 376.654 cv
529.303 377.095 531.055 377.31 533.142 377.31 cv
536.298 377.31 539.454 377.082 542.61 376.614 cv
542.61 342.32 li
542.61 341.705 542.999 341.397 543.761 341.397 cv
546.984 341.397 li
547.761 341.397 548.148 341.705 548.148 342.32 cv
548.148 382.499 li
548.148 387.769 546.958 391.514 544.563 393.76 cv
542.183 396.007 538.144 397.131 532.419 397.131 cv
530.573 397.131 528.58 396.997 526.44 396.743 cv
524.301 396.489 522.361 396.101 520.636 395.579 cv
519.98 395.379 519.659 394.991 519.659 394.416 cv
519.659 392.557 li
519.659 391.888 520.073 391.634 520.903 391.794 cv
520.903 391.794 li
cp
500.104 356.564 mo
500.104 352.539 499.315 349.623 497.737 347.817 cv
496.159 346.012 493.284 345.102 489.11 345.102 cv
487.386 345.102 485.767 345.182 484.242 345.343 cv
482.731 345.49 481.193 345.784 479.655 346.186 cv
479.655 380.56 li
479.655 381.188 479.267 381.496 478.491 381.496 cv
475.281 381.496 li
474.505 381.496 474.117 381.188 474.117 380.56 cv
474.117 345.65 li
474.117 343.992 474.706 342.962 475.896 342.547 cv
477.862 341.825 480.016 341.357 482.37 341.116 cv
484.724 340.889 487.238 340.769 489.913 340.769 cv
495.518 340.769 499.529 341.973 501.978 344.367 cv
504.412 346.774 505.642 350.559 505.642 355.708 cv
505.642 380.56 li
505.642 381.188 505.255 381.496 504.479 381.496 cv
501.255 381.496 li
500.479 381.496 500.104 381.188 500.104 380.56 cv
500.104 356.564 li
cp
444.906 345.263 mo
443.248 345.263 441.522 345.356 439.73 345.53 cv
437.951 345.717 436.279 345.932 434.729 346.186 cv
434.501 346.186 434.38 346.038 434.38 345.73 cv
434.38 343.256 li
434.38 342.842 434.554 342.574 434.915 342.48 cv
435.57 342.267 436.359 342.066 437.282 341.852 cv
438.206 341.651 439.155 341.464 440.131 341.317 cv
441.121 341.156 442.098 341.036 443.087 340.929 cv
444.063 340.822 445 340.769 445.896 340.769 cv
449.173 340.769 451.901 341.063 454.108 341.665 cv
456.315 342.253 458.08 343.189 459.418 344.447 cv
460.77 345.717 461.719 347.309 462.28 349.249 cv
462.842 351.188 463.123 353.488 463.123 356.177 cv
463.123 377.229 li
463.123 378.941 462.508 379.971 461.251 380.332 cv
459.352 380.854 457.104 381.268 454.51 381.603 cv
451.928 381.937 449.374 382.111 446.872 382.111 cv
443.836 382.111 441.295 381.856 439.249 381.335 cv
437.189 380.827 435.53 380.064 434.287 379.048 cv
433.043 378.045 432.146 376.788 431.611 375.263 cv
431.076 373.738 430.81 371.973 430.81 369.953 cv
430.81 365.833 431.999 362.757 434.38 360.751 cv
436.761 358.731 440.118 357.728 444.465 357.728 cv
446.792 357.728 449.093 357.969 451.394 358.464 cv
453.681 358.945 455.754 359.641 457.599 360.51 cv
457.599 357.648 li
457.599 355.281 457.412 353.288 457.051 351.683 cv
456.703 350.091 456.048 348.807 455.098 347.857 cv
454.135 346.908 452.852 346.226 451.206 345.838 cv
449.574 345.45 447.475 345.263 444.906 345.263 cv
444.906 345.263 li
cp
447.06 377.617 mo
448.905 377.617 450.685 377.55 452.41 377.39 cv
454.135 377.229 455.86 376.948 457.599 376.533 cv
457.599 363.306 li
456.101 362.891 454.47 362.597 452.677 362.45 cv
450.898 362.289 449.025 362.222 447.06 362.222 cv
443.302 362.222 440.6 362.811 438.928 364.001 cv
437.27 365.178 436.427 367.171 436.427 369.953 cv
436.427 372.695 437.27 374.647 438.928 375.838 cv
440.6 377.028 443.302 377.617 447.06 377.617 cv
447.06 377.617 li
cp
395.98 377.229 mo
397.345 377.443 398.736 377.577 400.126 377.657 cv
401.531 377.737 402.976 377.777 404.46 377.777 cv
409.048 377.777 412.405 376.587 414.545 374.219 cv
416.698 371.839 417.769 368.201 417.769 363.306 cv
417.769 361.206 li
417.769 356.096 416.511 352.137 414.01 349.329 cv
411.509 346.52 408.151 345.102 403.925 345.102 cv
402.494 345.102 401.116 345.182 399.779 345.343 cv
398.428 345.49 397.171 345.784 395.98 346.186 cv
395.98 377.229 li
cp
395.98 395.499 mo
395.98 396.127 395.592 396.436 394.817 396.436 cv
391.607 396.436 li
390.831 396.436 390.443 396.127 390.443 395.499 cv
390.443 345.65 li
390.443 344.714 390.577 344.019 390.844 343.564 cv
391.112 343.096 391.566 342.761 392.222 342.547 cv
394.135 341.986 396.141 341.544 398.254 341.236 cv
400.368 340.929 402.468 340.769 404.554 340.769 cv
407.831 340.769 410.652 341.277 413.033 342.28 cv
415.414 343.283 417.367 344.688 418.879 346.466 cv
420.403 348.245 421.514 350.345 422.235 352.766 cv
422.944 355.2 423.306 357.835 423.306 360.671 cv
423.306 363.84 li
423.306 366.529 422.972 368.99 422.316 371.237 cv
421.66 373.484 420.671 375.396 419.333 377.001 cv
417.996 378.606 416.311 379.851 414.277 380.76 cv
412.258 381.656 409.877 382.111 407.135 382.111 cv
405.169 382.111 403.243 381.91 401.331 381.496 cv
399.431 381.081 397.639 380.506 395.98 379.783 cv
395.98 395.499 li
cp
373.925 355.869 mo
373.925 354.17 373.832 352.646 373.658 351.295 cv
373.47 349.957 373.069 348.82 372.44 347.897 cv
371.825 346.961 370.942 346.266 369.819 345.811 cv
368.682 345.343 367.13 345.102 365.165 345.102 cv
363.626 345.102 362.142 345.316 360.75 345.73 cv
359.346 346.146 358.049 346.681 356.858 347.349 cv
357.34 348.433 357.647 349.676 357.808 351.067 cv
357.956 352.458 358.022 353.93 358.022 355.481 cv
358.022 380.56 li
358.022 381.188 357.634 381.496 356.858 381.496 cv
353.648 381.496 li
352.873 381.496 352.485 381.188 352.485 380.56 cv
352.485 355.869 li
352.485 354.17 352.405 352.646 352.217 351.295 cv
352.043 349.957 351.642 348.82 351.014 347.897 cv
350.385 346.961 349.502 346.266 348.338 345.811 cv
347.175 345.343 345.61 345.102 343.644 345.102 cv
342.454 345.102 341.21 345.195 339.899 345.383 cv
338.588 345.557 337.425 345.824 336.422 346.186 cv
336.422 380.56 li
336.422 381.188 336.034 381.496 335.258 381.496 cv
332.035 381.496 li
331.272 381.496 330.884 381.188 330.884 380.56 cv
330.884 345.65 li
330.884 344.768 331.018 344.099 331.286 343.631 cv
331.553 343.176 332.008 342.815 332.663 342.547 cv
334.389 341.986 336.288 341.544 338.334 341.236 cv
340.394 340.929 342.427 340.769 344.447 340.769 cv
346.774 340.769 348.753 341.009 350.385 341.464 cv
352.03 341.932 353.381 342.601 354.451 343.484 cv
358.089 341.678 361.928 340.769 365.967 340.769 cv
368.776 340.769 371.049 341.09 372.802 341.745 cv
374.554 342.387 375.932 343.323 376.908 344.567 cv
377.897 345.811 378.566 347.335 378.927 349.168 cv
379.275 351 379.462 353.114 379.462 355.481 cv
379.462 380.56 li
379.462 381.188 379.074 381.496 378.299 381.496 cv
375.075 381.496 li
374.313 381.496 373.925 381.188 373.925 380.56 cv
373.925 355.869 li
cp
304.174 377.777 mo
307.933 377.777 310.795 376.587 312.801 374.219 cv
314.794 371.839 315.784 367.893 315.784 362.369 cv
315.784 360.51 li
315.784 354.986 314.794 351.041 312.801 348.673 cv
310.795 346.292 307.933 345.102 304.174 345.102 cv
300.429 345.102 297.554 346.292 295.561 348.673 cv
293.568 351.041 292.565 354.986 292.565 360.51 cv
292.565 362.369 li
292.565 367.893 293.568 371.839 295.561 374.219 cv
297.554 376.587 300.429 377.777 304.174 377.777 cv
304.174 377.777 li
cp
304.174 340.769 mo
306.796 340.769 309.163 341.103 311.276 341.785 cv
313.39 342.454 315.209 343.55 316.72 345.075 cv
318.245 346.586 319.408 348.58 320.211 351.027 cv
321.014 353.475 321.415 356.511 321.415 360.123 cv
321.415 362.757 li
321.415 366.368 321.014 369.404 320.211 371.852 cv
319.408 374.3 318.245 376.292 316.72 377.817 cv
315.209 379.342 313.39 380.439 311.276 381.108 cv
309.163 381.776 306.796 382.111 304.174 382.111 cv
301.553 382.111 299.199 381.776 297.085 381.108 cv
294.973 380.439 293.153 379.342 291.628 377.817 cv
290.117 376.292 288.954 374.3 288.151 371.852 cv
287.349 369.404 286.947 366.368 286.947 362.757 cv
286.947 360.123 li
286.947 356.511 287.349 353.475 288.151 351.027 cv
288.954 348.58 290.117 346.586 291.628 345.075 cv
293.153 343.55 294.973 342.454 297.085 341.785 cv
299.199 341.103 301.553 340.769 304.174 340.769 cv
304.174 340.769 li
cp
270.964 377.777 mo
274.054 377.777 277.117 377.55 280.153 377.082 cv
280.514 377.028 280.781 377.042 280.955 377.122 cv
281.143 377.202 281.223 377.39 281.223 377.697 cv
281.223 379.717 li
281.223 380.225 280.902 380.56 280.247 380.72 cv
278.695 381.134 277.05 381.469 275.284 381.723 cv
273.532 381.977 271.793 382.111 270.068 382.111 cv
266.858 382.111 264.103 381.643 261.802 380.72 cv
259.515 379.783 257.643 378.486 256.185 376.814 cv
254.727 375.129 253.63 373.109 252.921 370.729 cv
252.212 368.361 251.851 365.727 251.851 362.837 cv
251.851 360.042 li
251.851 357.153 252.212 354.531 252.921 352.151 cv
253.63 349.783 254.727 347.75 256.185 346.078 cv
257.643 344.393 259.515 343.096 261.802 342.16 cv
264.103 341.236 266.818 340.769 269.975 340.769 cv
271.7 340.769 273.398 340.902 275.07 341.156 cv
276.729 341.424 278.347 341.758 279.885 342.16 cv
280.541 342.32 280.875 342.654 280.875 343.176 cv
280.875 345.182 li
280.875 345.704 280.514 345.904 279.805 345.811 cv
278.253 345.543 276.782 345.37 275.378 345.263 cv
273.987 345.156 272.476 345.102 270.871 345.102 cv
266.109 345.102 262.671 346.399 260.559 348.981 cv
258.445 351.563 257.389 355.347 257.389 360.363 cv
257.389 362.53 li
257.389 367.532 258.445 371.331 260.559 373.912 cv
262.671 376.48 266.136 377.777 270.964 377.777 cv
270.964 377.777 li
cp
.746975 .580102 .496712 .306798 cmyk
f
195.422 612.91 mo
195.088 612.924 194.74 612.938 194.339 612.938 cv
193.951 612.95 193.576 612.95 193.188 612.95 cv
192.787 612.95 192.493 612.87 192.306 612.723 cv
192.132 612.576 192.052 612.335 192.052 611.987 cv
192.052 607.681 li
192.052 607.347 192.132 607.092 192.306 606.944 cv
192.493 606.798 192.787 606.718 193.188 606.718 cv
193.576 606.718 193.938 606.718 194.285 606.73 cv
194.633 606.73 194.967 606.744 195.315 606.758 cv
195.382 606.758 195.409 606.798 195.409 606.852 cv
195.409 606.998 li
195.409 607.052 195.382 607.078 195.315 607.078 cv
193.068 607.078 li
192.881 607.078 192.747 607.132 192.653 607.239 cv
192.56 607.347 192.52 607.479 192.52 607.681 cv
192.52 609.566 li
195.141 609.566 li
195.208 609.566 195.235 609.593 195.235 609.66 cv
195.235 609.847 li
195.235 609.9 195.208 609.928 195.141 609.928 cv
192.52 609.928 li
192.52 611.987 li
192.52 612.188 192.56 612.335 192.653 612.429 cv
192.747 612.535 192.881 612.589 193.068 612.589 cv
195.422 612.589 li
195.489 612.589 195.516 612.616 195.516 612.669 cv
195.516 612.816 li
195.516 612.87 195.489 612.91 195.422 612.91 cv
195.422 612.91 li
cp
187.103 607.186 mo
187.022 607.186 186.996 607.159 186.996 607.105 cv
186.996 606.904 li
186.996 606.852 187.022 606.824 187.103 606.824 cv
191.008 606.824 li
191.089 606.824 191.115 606.852 191.115 606.904 cv
191.115 607.105 li
191.115 607.159 191.089 607.186 191.008 607.186 cv
189.283 607.186 li
189.283 612.763 li
189.283 612.816 189.256 612.843 189.189 612.843 cv
188.922 612.843 li
188.855 612.843 188.814 612.816 188.814 612.763 cv
188.814 607.186 li
187.103 607.186 li
cp
183.558 610.903 mo
185.953 610.903 li
184.762 607.306 li
183.558 610.903 li
cp
184.909 606.824 mo
185.003 606.824 185.07 606.852 185.083 606.932 cv
187.049 612.763 li
187.076 612.816 187.049 612.843 186.996 612.843 cv
186.688 612.843 li
186.635 612.843 186.595 612.816 186.581 612.776 cv
186.073 611.265 li
183.425 611.265 li
182.93 612.776 li
182.917 612.816 182.876 612.843 182.823 612.843 cv
182.515 612.843 li
182.461 612.843 182.435 612.816 182.461 612.763 cv
184.428 606.932 li
184.441 606.852 184.508 606.824 184.602 606.824 cv
184.909 606.824 li
cp
181.954 612.589 mo
182.02 612.589 182.047 612.616 182.047 612.669 cv
182.047 612.816 li
182.047 612.87 182.02 612.91 181.954 612.91 cv
181.766 612.91 181.592 612.924 181.418 612.924 cv
181.258 612.924 181.098 612.938 180.923 612.938 cv
180.75 612.95 180.563 612.95 180.362 612.95 cv
180.161 612.95 179.934 612.95 179.68 612.95 cv
179.439 612.95 179.238 612.924 179.091 612.883 cv
178.931 612.843 178.824 612.776 178.73 612.696 cv
178.65 612.616 178.583 612.509 178.556 612.389 cv
178.529 612.255 178.502 612.121 178.502 611.96 cv
178.502 606.904 li
178.502 606.852 178.542 606.824 178.61 606.824 cv
178.864 606.824 li
178.944 606.824 178.971 606.852 178.971 606.904 cv
178.971 612.014 li
178.971 612.174 179.011 612.309 179.104 612.415 cv
179.185 612.535 179.345 612.589 179.6 612.589 cv
181.954 612.589 li
cp
176.75 608.563 mo
176.75 608.055 176.617 607.681 176.35 607.439 cv
176.082 607.199 175.614 607.078 174.945 607.078 cv
174.758 607.078 174.57 607.092 174.37 607.105 cv
174.169 607.132 173.982 607.159 173.821 607.213 cv
173.821 610.168 li
173.982 610.208 174.156 610.235 174.356 610.262 cv
174.57 610.275 174.758 610.275 174.945 610.275 cv
175.614 610.275 176.082 610.168 176.35 609.928 cv
176.617 609.687 176.75 609.312 176.75 608.79 cv
176.75 608.563 li
cp
173.354 607.186 mo
173.354 607.038 173.434 606.944 173.567 606.904 cv
173.794 606.838 174.035 606.798 174.29 606.771 cv
174.557 606.73 174.811 606.718 175.065 606.718 cv
175.814 606.718 176.363 606.864 176.71 607.159 cv
177.045 607.453 177.219 607.895 177.219 608.483 cv
177.219 608.884 li
177.219 609.473 177.045 609.914 176.71 610.208 cv
176.363 610.503 175.814 610.637 175.065 610.637 cv
174.852 610.637 174.651 610.637 174.437 610.623 cv
174.223 610.597 174.022 610.569 173.821 610.529 cv
173.821 612.763 li
173.821 612.816 173.794 612.843 173.714 612.843 cv
173.46 612.843 li
173.394 612.843 173.354 612.816 173.354 612.763 cv
173.354 607.186 li
cp
168.926 611.077 mo
168.846 611.077 168.806 611.051 168.779 610.997 cv
166.839 607.506 li
166.839 612.763 li
166.839 612.816 166.813 612.843 166.732 612.843 cv
166.479 612.843 li
166.412 612.843 166.372 612.816 166.372 612.763 cv
166.372 606.904 li
166.372 606.852 166.412 606.824 166.479 606.824 cv
166.826 606.824 li
166.92 606.824 166.987 606.852 167.014 606.904 cv
169.046 610.569 li
171.08 606.904 li
171.106 606.852 171.173 606.824 171.267 606.824 cv
171.615 606.824 li
171.682 606.824 171.722 606.852 171.722 606.904 cv
171.722 612.763 li
171.722 612.816 171.682 612.843 171.615 612.843 cv
171.36 612.843 li
171.28 612.843 171.253 612.816 171.253 612.763 cv
171.253 607.506 li
169.314 610.997 li
169.287 611.051 169.247 611.077 169.167 611.077 cv
168.926 611.077 li
cp
164.914 612.91 mo
164.58 612.924 164.218 612.938 163.83 612.938 cv
163.442 612.95 163.054 612.95 162.68 612.95 cv
162.265 612.95 161.971 612.87 161.797 612.723 cv
161.624 612.576 161.53 612.335 161.53 611.987 cv
161.53 607.681 li
161.53 607.347 161.624 607.092 161.797 606.944 cv
161.971 606.798 162.265 606.718 162.68 606.718 cv
163.068 606.718 163.429 606.718 163.777 606.73 cv
164.111 606.73 164.459 606.744 164.807 606.758 cv
164.86 606.758 164.9 606.798 164.9 606.852 cv
164.9 606.998 li
164.9 607.052 164.86 607.078 164.807 607.078 cv
162.56 607.078 li
162.373 607.078 162.239 607.132 162.145 607.239 cv
162.051 607.347 161.998 607.479 161.998 607.681 cv
161.998 609.566 li
164.633 609.566 li
164.7 609.566 164.727 609.593 164.727 609.66 cv
164.727 609.847 li
164.727 609.9 164.7 609.928 164.633 609.928 cv
161.998 609.928 li
161.998 611.987 li
161.998 612.188 162.051 612.335 162.145 612.429 cv
162.239 612.535 162.373 612.589 162.56 612.589 cv
164.914 612.589 li
164.967 612.589 165.007 612.616 165.007 612.669 cv
165.007 612.816 li
165.007 612.87 164.967 612.91 164.914 612.91 cv
164.914 612.91 li
cp
156.581 607.186 mo
156.514 607.186 156.474 607.159 156.474 607.105 cv
156.474 606.904 li
156.474 606.852 156.514 606.824 156.581 606.824 cv
160.5 606.824 li
160.566 606.824 160.607 606.852 160.607 606.904 cv
160.607 607.105 li
160.607 607.159 160.566 607.186 160.5 607.186 cv
158.774 607.186 li
158.774 612.763 li
158.774 612.816 158.748 612.843 158.667 612.843 cv
158.414 612.843 li
158.346 612.843 158.306 612.816 158.306 612.763 cv
158.306 607.186 li
156.581 607.186 li
cp
152.823 609.727 mo
152.823 608.79 152.662 608.122 152.341 607.707 cv
152.033 607.293 151.552 607.078 150.91 607.078 cv
150.268 607.078 149.8 607.293 149.479 607.707 cv
149.171 608.122 149.011 608.79 149.011 609.727 cv
149.011 609.94 li
149.011 610.877 149.171 611.546 149.479 611.96 cv
149.8 612.375 150.268 612.589 150.91 612.589 cv
151.552 612.589 152.033 612.375 152.341 611.96 cv
152.662 611.546 152.823 610.877 152.823 609.94 cv
152.823 609.727 li
cp
153.291 609.968 mo
153.291 611.96 152.488 612.95 150.91 612.95 cv
149.332 612.95 148.542 611.96 148.542 609.968 cv
148.542 609.7 li
148.542 607.707 149.332 606.718 150.91 606.718 cv
152.488 606.718 153.291 607.707 153.291 609.7 cv
153.291 609.968 li
cp
147.004 606.852 mo
147.044 606.864 147.071 606.892 147.071 606.918 cv
147.071 607.118 li
147.071 607.173 147.044 607.199 146.991 607.186 cv
146.804 607.146 146.59 607.118 146.335 607.105 cv
146.095 607.092 145.841 607.078 145.56 607.078 cv
145.159 607.078 144.824 607.132 144.557 607.226 cv
144.276 607.319 144.062 607.479 143.888 607.693 cv
143.714 607.895 143.594 608.175 143.527 608.51 cv
143.447 608.844 143.407 609.245 143.407 609.727 cv
143.407 609.94 li
143.407 610.382 143.447 610.757 143.5 611.077 cv
143.567 611.412 143.688 611.68 143.848 611.907 cv
144.008 612.134 144.236 612.295 144.517 612.415 cv
144.797 612.535 145.146 612.589 145.573 612.589 cv
145.801 612.589 146.015 612.576 146.242 612.563 cv
146.456 612.535 146.644 612.509 146.804 612.455 cv
146.804 610.062 li
145.212 610.062 li
145.159 610.062 145.119 610.034 145.119 609.968 cv
145.119 609.78 li
145.119 609.727 145.159 609.7 145.212 609.7 cv
147.165 609.7 li
147.232 609.7 147.272 609.727 147.272 609.78 cv
147.272 612.482 li
147.272 612.629 147.192 612.736 147.044 612.776 cv
146.844 612.843 146.617 612.883 146.349 612.91 cv
146.082 612.938 145.801 612.95 145.52 612.95 cv
145.025 612.95 144.624 612.883 144.289 612.75 cv
143.955 612.616 143.688 612.429 143.5 612.174 cv
143.299 611.92 143.152 611.6 143.072 611.238 cv
142.979 610.863 142.938 610.449 142.938 609.968 cv
142.938 609.687 li
142.938 608.67 143.139 607.921 143.541 607.439 cv
143.928 606.958 144.597 606.718 145.533 606.718 cv
145.827 606.718 146.095 606.73 146.335 606.758 cv
146.59 606.771 146.804 606.812 147.004 606.852 cv
147.004 606.852 li
cp
141.414 609.727 mo
141.414 608.79 141.253 608.122 140.932 607.707 cv
140.625 607.293 140.143 607.078 139.501 607.078 cv
138.859 607.078 138.391 607.293 138.07 607.707 cv
137.762 608.122 137.602 608.79 137.602 609.727 cv
137.602 609.94 li
137.602 610.877 137.762 611.546 138.07 611.96 cv
138.391 612.375 138.859 612.589 139.501 612.589 cv
140.143 612.589 140.625 612.375 140.932 611.96 cv
141.253 611.546 141.414 610.877 141.414 609.94 cv
141.414 609.727 li
cp
141.882 609.968 mo
141.882 611.96 141.079 612.95 139.501 612.95 cv
137.923 612.95 137.134 611.96 137.134 609.968 cv
137.134 609.7 li
137.134 607.707 137.923 606.718 139.501 606.718 cv
141.079 606.718 141.882 607.707 141.882 609.7 cv
141.882 609.968 li
cp
136.625 612.589 mo
136.692 612.589 136.732 612.616 136.732 612.669 cv
136.732 612.816 li
136.732 612.87 136.692 612.91 136.625 612.91 cv
136.438 612.91 136.264 612.924 136.104 612.924 cv
135.93 612.924 135.77 612.938 135.596 612.938 cv
135.422 612.95 135.234 612.95 135.034 612.95 cv
134.833 612.95 134.606 612.95 134.352 612.95 cv
134.111 612.95 133.911 612.924 133.763 612.883 cv
133.603 612.843 133.496 612.776 133.402 612.696 cv
133.322 612.616 133.255 612.509 133.228 612.389 cv
133.202 612.255 133.188 612.121 133.188 611.96 cv
133.188 606.904 li
133.188 606.852 133.215 606.824 133.282 606.824 cv
133.549 606.824 li
133.616 606.824 133.656 606.852 133.656 606.904 cv
133.656 612.014 li
133.656 612.174 133.696 612.309 133.776 612.415 cv
133.857 612.535 134.017 612.589 134.271 612.589 cv
136.625 612.589 li
cp
f
216.434 600.123 mo
216.996 600.204 217.544 600.271 218.106 600.297 cv
218.668 600.324 219.216 600.351 219.751 600.351 cv
220.433 600.351 220.995 600.284 221.423 600.15 cv
221.864 600.03 222.212 599.829 222.466 599.549 cv
222.72 599.28 222.895 598.934 223.001 598.519 cv
223.108 598.104 223.148 597.622 223.148 597.061 cv
223.148 596.365 li
222.6 596.539 222.012 596.687 221.396 596.793 cv
220.781 596.887 220.139 596.94 219.483 596.94 cv
218.04 596.94 216.956 596.579 216.22 595.844 cv
215.484 595.107 215.11 593.931 215.11 592.3 cv
215.11 584.822 li
215.11 584.636 215.23 584.528 215.471 584.528 cv
216.461 584.528 li
216.702 584.528 216.822 584.636 216.822 584.822 cv
216.822 592.179 li
216.822 592.78 216.875 593.302 216.996 593.73 cv
217.103 594.158 217.29 594.52 217.544 594.813 cv
217.798 595.095 218.146 595.309 218.601 595.442 cv
219.042 595.576 219.578 595.643 220.219 595.643 cv
221.196 595.643 222.172 595.576 223.148 595.429 cv
223.148 584.822 li
223.148 584.636 223.269 584.528 223.509 584.528 cv
224.513 584.528 li
224.753 584.528 224.874 584.636 224.874 584.822 cv
224.874 597.248 li
224.874 598.88 224.499 600.043 223.764 600.739 cv
223.028 601.435 221.771 601.782 220.005 601.782 cv
219.43 601.782 218.815 601.742 218.146 601.662 cv
217.491 601.581 216.889 601.461 216.354 601.301 cv
216.153 601.233 216.046 601.113 216.046 600.939 cv
216.046 600.364 li
216.046 600.163 216.18 600.083 216.434 600.123 cv
216.434 600.123 li
cp
210.001 589.223 mo
210.001 587.979 209.76 587.083 209.265 586.521 cv
208.784 585.959 207.888 585.679 206.604 585.679 cv
206.069 585.679 205.561 585.705 205.092 585.759 cv
204.624 585.799 204.156 585.893 203.674 586.013 cv
203.674 596.659 li
203.674 596.847 203.554 596.94 203.313 596.94 cv
202.324 596.94 li
202.083 596.94 201.962 596.847 201.962 596.659 cv
201.962 585.853 li
201.962 585.345 202.15 585.023 202.511 584.89 cv
203.126 584.676 203.795 584.528 204.517 584.448 cv
205.239 584.381 206.028 584.341 206.844 584.341 cv
208.583 584.341 209.827 584.716 210.576 585.451 cv
211.338 586.2 211.713 587.363 211.713 588.969 cv
211.713 596.659 li
211.713 596.847 211.592 596.94 211.352 596.94 cv
210.362 596.94 li
210.121 596.94 210.001 596.847 210.001 596.659 cv
210.001 589.223 li
cp
192.921 585.732 mo
192.413 585.732 191.878 585.759 191.316 585.813 cv
190.768 585.866 190.259 585.946 189.778 586.013 cv
189.698 586.013 189.657 585.973 189.657 585.879 cv
189.657 585.104 li
189.657 584.983 189.724 584.902 189.832 584.876 cv
190.032 584.81 190.272 584.742 190.567 584.676 cv
190.848 584.608 191.142 584.555 191.45 584.515 cv
191.744 584.461 192.052 584.422 192.359 584.395 cv
192.667 584.354 192.948 584.341 193.229 584.341 cv
194.245 584.341 195.088 584.435 195.77 584.622 cv
196.452 584.796 197 585.09 197.415 585.478 cv
197.83 585.866 198.124 586.36 198.297 586.963 cv
198.472 587.564 198.565 588.273 198.565 589.116 cv
198.565 595.63 li
198.565 596.151 198.365 596.473 197.977 596.579 cv
197.388 596.739 196.693 596.873 195.89 596.98 cv
195.088 597.087 194.312 597.142 193.536 597.142 cv
192.586 597.142 191.811 597.061 191.169 596.9 cv
190.54 596.739 190.019 596.499 189.631 596.191 cv
189.243 595.884 188.975 595.482 188.801 595.015 cv
188.641 594.546 188.561 593.998 188.561 593.369 cv
188.561 592.099 188.922 591.148 189.657 590.521 cv
190.406 589.905 191.437 589.584 192.787 589.584 cv
193.509 589.584 194.218 589.664 194.927 589.812 cv
195.636 589.972 196.278 590.186 196.853 590.453 cv
196.853 589.57 li
196.853 588.835 196.786 588.22 196.679 587.725 cv
196.572 587.229 196.372 586.829 196.078 586.534 cv
195.783 586.24 195.382 586.026 194.874 585.906 cv
194.365 585.785 193.71 585.732 192.921 585.732 cv
192.921 585.732 li
cp
193.59 595.75 mo
194.165 595.75 194.713 595.724 195.248 595.67 cv
195.783 595.63 196.318 595.536 196.853 595.416 cv
196.853 591.31 li
196.385 591.188 195.877 591.096 195.329 591.056 cv
194.78 591.002 194.191 590.975 193.59 590.975 cv
192.426 590.975 191.583 591.162 191.075 591.523 cv
190.554 591.897 190.299 592.514 190.299 593.369 cv
190.299 594.225 190.554 594.827 191.075 595.188 cv
191.583 595.563 192.426 595.75 193.59 595.75 cv
193.59 595.75 li
cp
177.78 595.63 mo
178.208 595.683 178.636 595.736 179.064 595.764 cv
179.506 595.776 179.947 595.79 180.402 595.79 cv
181.819 595.79 182.863 595.429 183.532 594.693 cv
184.187 593.958 184.521 592.834 184.521 591.31 cv
184.521 590.667 li
184.521 589.089 184.134 587.858 183.358 586.989 cv
182.596 586.12 181.552 585.679 180.241 585.679 cv
179.8 585.679 179.372 585.705 178.958 585.759 cv
178.542 585.799 178.155 585.893 177.78 586.013 cv
177.78 595.63 li
cp
177.78 601.274 mo
177.78 601.475 177.66 601.568 177.419 601.568 cv
176.43 601.568 li
176.189 601.568 176.068 601.475 176.068 601.274 cv
176.068 585.853 li
176.068 585.559 176.108 585.345 176.189 585.21 cv
176.269 585.063 176.416 584.956 176.617 584.89 cv
177.205 584.716 177.834 584.582 178.489 584.488 cv
179.145 584.395 179.787 584.341 180.429 584.341 cv
181.445 584.341 182.328 584.501 183.063 584.81 cv
183.799 585.116 184.401 585.559 184.869 586.106 cv
185.337 586.655 185.685 587.311 185.899 588.06 cv
186.126 588.809 186.233 589.624 186.233 590.493 cv
186.233 591.483 li
186.233 592.313 186.14 593.075 185.939 593.771 cv
185.725 594.466 185.417 595.055 185.003 595.55 cv
184.588 596.044 184.067 596.433 183.451 596.713 cv
182.823 596.994 182.087 597.142 181.231 597.142 cv
180.629 597.142 180.027 597.074 179.439 596.94 cv
178.851 596.82 178.302 596.646 177.78 596.419 cv
177.78 601.274 li
cp
170.959 589.009 mo
170.959 588.487 170.933 588.02 170.879 587.604 cv
170.812 587.189 170.691 586.829 170.504 586.548 cv
170.304 586.254 170.036 586.04 169.688 585.906 cv
169.341 585.759 168.859 585.679 168.244 585.679 cv
167.763 585.679 167.308 585.745 166.88 585.879 cv
166.452 585.999 166.05 586.173 165.676 586.374 cv
165.823 586.708 165.917 587.097 165.97 587.524 cv
166.01 587.966 166.037 588.42 166.037 588.889 cv
166.037 596.659 li
166.037 596.847 165.917 596.94 165.676 596.94 cv
164.687 596.94 li
164.445 596.94 164.325 596.847 164.325 596.659 cv
164.325 589.009 li
164.325 588.487 164.298 588.02 164.245 587.604 cv
164.191 587.189 164.058 586.829 163.871 586.548 cv
163.67 586.254 163.402 586.04 163.041 585.906 cv
162.68 585.759 162.199 585.679 161.583 585.679 cv
161.222 585.679 160.834 585.719 160.433 585.772 cv
160.019 585.825 159.657 585.906 159.35 586.013 cv
159.35 596.659 li
159.35 596.847 159.229 596.94 158.988 596.94 cv
157.999 596.94 li
157.758 596.94 157.638 596.847 157.638 596.659 cv
157.638 585.853 li
157.638 585.585 157.678 585.371 157.758 585.224 cv
157.838 585.09 157.985 584.97 158.186 584.89 cv
158.721 584.716 159.31 584.582 159.938 584.488 cv
160.58 584.395 161.209 584.341 161.837 584.341 cv
162.56 584.341 163.175 584.422 163.67 584.555 cv
164.178 584.702 164.606 584.916 164.927 585.184 cv
166.05 584.622 167.241 584.341 168.498 584.341 cv
169.368 584.341 170.063 584.448 170.611 584.648 cv
171.16 584.836 171.575 585.13 171.882 585.519 cv
172.189 585.906 172.39 586.374 172.497 586.936 cv
172.618 587.511 172.671 588.153 172.671 588.889 cv
172.671 596.659 li
172.671 596.847 172.551 596.94 172.31 596.94 cv
171.32 596.94 li
171.08 596.94 170.959 596.847 170.959 596.659 cv
170.959 589.009 li
cp
149.372 595.79 mo
150.536 595.79 151.418 595.429 152.047 594.693 cv
152.662 593.958 152.97 592.74 152.97 591.028 cv
152.97 590.453 li
152.97 588.741 152.662 587.524 152.047 586.789 cv
151.418 586.053 150.536 585.679 149.372 585.679 cv
148.208 585.679 147.325 586.053 146.71 586.789 cv
146.095 587.524 145.787 588.741 145.787 590.453 cv
145.787 591.028 li
145.787 592.74 146.095 593.958 146.71 594.693 cv
147.325 595.429 148.208 595.79 149.372 595.79 cv
149.372 595.79 li
cp
149.372 584.341 mo
150.188 584.341 150.923 584.448 151.565 584.648 cv
152.221 584.862 152.782 585.197 153.25 585.679 cv
153.732 586.146 154.08 586.762 154.334 587.511 cv
154.588 588.273 154.708 589.209 154.708 590.333 cv
154.708 591.148 li
154.708 592.259 154.588 593.209 154.334 593.958 cv
154.08 594.72 153.732 595.335 153.25 595.804 cv
152.782 596.271 152.221 596.619 151.565 596.82 cv
150.923 597.034 150.188 597.142 149.372 597.142 cv
148.569 597.142 147.833 597.034 147.178 596.82 cv
146.523 596.619 145.961 596.271 145.493 595.804 cv
145.025 595.335 144.664 594.72 144.41 593.958 cv
144.169 593.209 144.035 592.259 144.035 591.148 cv
144.035 590.333 li
144.035 589.209 144.169 588.273 144.41 587.511 cv
144.664 586.762 145.025 586.146 145.493 585.679 cv
145.961 585.197 146.523 584.862 147.178 584.648 cv
147.833 584.448 148.569 584.341 149.372 584.341 cv
149.372 584.341 li
cp
139.1 595.79 mo
140.049 595.79 140.999 595.724 141.936 595.576 cv
142.056 595.563 142.136 595.563 142.189 595.59 cv
142.243 595.616 142.27 595.67 142.27 595.764 cv
142.27 596.392 li
142.27 596.553 142.176 596.659 141.976 596.699 cv
141.494 596.833 140.986 596.94 140.438 597.021 cv
139.889 597.101 139.354 597.142 138.819 597.142 cv
137.829 597.142 136.973 596.994 136.264 596.699 cv
135.555 596.419 134.967 596.018 134.525 595.496 cv
134.071 594.974 133.736 594.346 133.509 593.61 cv
133.295 592.874 133.188 592.059 133.188 591.176 cv
133.188 590.306 li
133.188 589.41 133.295 588.595 133.509 587.858 cv
133.736 587.123 134.071 586.508 134.525 585.986 cv
134.967 585.464 135.555 585.063 136.264 584.77 cv
136.973 584.488 137.816 584.341 138.792 584.341 cv
139.327 584.341 139.849 584.381 140.371 584.461 cv
140.879 584.541 141.374 584.648 141.855 584.77 cv
142.056 584.822 142.163 584.93 142.163 585.09 cv
142.163 585.705 li
142.163 585.866 142.056 585.933 141.828 585.906 cv
141.347 585.825 140.892 585.759 140.464 585.732 cv
140.036 585.705 139.568 585.679 139.073 585.679 cv
137.588 585.679 136.532 586.08 135.876 586.882 cv
135.221 587.685 134.9 588.849 134.9 590.4 cv
134.9 591.068 li
134.9 592.62 135.221 593.797 135.876 594.6 cv
136.532 595.389 137.602 595.79 139.1 595.79 cv
139.1 595.79 li
cp
f
46.7188 746.272 mo
378.914 746.272 li
378.914 739.92 li
46.7188 739.92 li
46.7188 746.272 li
cp
.849119 .773068 .143801 .022858 cmyk
ef
410.894 746.272 mo
743.103 746.272 li
743.103 739.92 li
410.894 739.92 li
410.894 746.272 li
cp
ef
425.62 124.297 mo
424.356 124.297 423.407 123.664 423.407 122.397 cv
423.407 121.445 424.356 120.499 425.62 120.499 cv
444.926 120.499 li
445.876 120.499 446.822 121.445 446.822 122.397 cv
446.822 123.664 445.876 124.297 444.926 124.297 cv
425.62 124.297 li
cp
474.667 123.664 mo
473.4 123.664 472.454 122.717 472.454 121.759 cv
472.454 120.499 473.4 119.548 474.667 119.548 cv
486.691 119.548 li
487.639 119.548 488.588 120.499 488.588 121.759 cv
488.588 310.358 li
488.588 311.311 487.639 312.26 486.691 312.26 cv
313.28 312.26 li
312.016 312.26 311.383 311.311 311.383 310.358 cv
311.383 121.759 li
311.383 120.499 312.016 119.548 313.28 119.548 cv
374.994 119.865 li
375.941 119.865 376.891 120.499 376.891 121.759 cv
376.891 122.717 375.941 123.664 374.994 123.664 cv
315.187 123.664 li
315.187 308.145 li
484.795 308.145 li
484.795 123.664 li
474.667 123.664 li
cp
.50338 .405005 0 0 cmyk
f
402.203 84.7397 mo
401.572 84.1064 400.939 83.7925 399.989 83.7925 cv
399.042 83.7925 398.409 84.1064 397.779 84.7397 cv
397.135 85.3726 396.818 86.3198 396.818 87.2749 cv
396.818 87.9053 397.135 88.855 397.779 89.4854 cv
398.409 90.1187 399.042 90.4351 399.989 90.4351 cv
400.939 90.4351 401.572 90.1187 402.203 89.4854 cv
402.836 88.855 403.152 87.9053 403.152 87.2749 cv
403.152 86.3198 402.836 85.3726 402.203 84.7397 cv
402.203 84.7397 li
cp
399.989 79.9937 mo
401.889 79.9937 403.785 80.6294 405.049 81.8931 cv
406.313 83.4731 407.263 85.0562 407.263 87.2749 cv
407.263 89.1714 406.313 91.0684 405.049 92.3374 cv
403.785 93.6035 401.889 94.2363 399.989 94.2363 cv
398.095 94.2363 396.186 93.6035 394.921 92.3374 cv
393.658 91.0684 392.708 89.1714 392.708 87.2749 cv
392.708 85.0562 393.658 83.4731 394.921 81.8931 cv
396.186 80.6294 398.095 79.9937 399.989 79.9937 cv
399.989 79.9937 li
cp
.647059 .532036 0 0 cmyk
f
466.437 120.179 mo
467.067 120.179 468.017 120.813 468.017 121.759 cv
468.017 122.717 467.067 123.348 466.437 123.348 cv
465.486 123.348 464.54 122.717 464.54 121.759 cv
464.54 120.813 465.486 120.179 466.437 120.179 cv
466.437 120.179 li
cp
.0166018 .826017 0 0 cmyk
ef
333.851 168.595 mo
332.904 167.962 332.904 166.382 333.851 165.749 cv
334.801 164.802 336.064 164.802 336.697 165.749 cv
343.031 172.394 li
358.216 159.737 li
359.166 158.79 360.429 159.104 361.063 160.053 cv
361.693 160.684 361.693 161.95 360.746 162.897 cv
344.295 176.826 li
343.662 177.459 342.398 177.459 341.448 176.826 cv
333.851 168.595 li
cp
.381048 .308751 0 0 cmyk
f
356.319 223.656 mo
356.952 224.29 356.952 225.556 356.002 226.503 cv
355.372 227.136 353.789 227.136 353.159 226.187 cv
338.604 210.368 li
337.645 209.413 337.961 208.149 338.604 207.52 cv
339.552 206.569 340.818 206.887 341.765 207.52 cv
356.319 223.656 li
cp
.515923 .415473 0 0 cmyk
f
341.765 226.187 mo
340.818 227.136 339.552 227.136 338.604 226.503 cv
337.961 225.556 337.645 224.29 338.604 223.656 cv
353.159 207.52 li
353.789 206.887 355.372 206.569 356.002 207.52 cv
356.952 208.149 356.952 209.413 356.319 210.368 cv
341.765 226.187 li
cp
.584436 .477852 0 0 cmyk
f
374.044 167.015 mo
372.77 167.015 372.137 166.065 372.137 165.116 cv
372.137 163.852 372.77 162.897 374.044 162.897 cv
464.854 162.897 li
466.12 162.897 467.067 163.852 467.067 165.116 cv
467.067 166.065 466.12 167.015 464.854 167.015 cv
374.044 167.015 li
cp
.592889 .483558 0 0 cmyk
f
374.044 192.963 mo
372.77 192.963 372.137 192.01 372.137 191.063 cv
372.137 189.797 372.77 188.85 374.044 188.85 cv
464.854 188.85 li
466.12 188.85 467.067 189.797 467.067 191.063 cv
467.067 192.01 466.12 192.963 464.854 192.963 cv
374.044 192.963 li
cp
.457252 .368566 0 0 cmyk
f
374.044 218.91 mo
372.77 218.91 372.137 217.964 372.137 217.014 cv
372.137 215.745 372.77 214.795 374.044 214.795 cv
464.854 214.795 li
466.12 214.795 467.067 215.745 467.067 217.014 cv
467.067 217.964 466.12 218.91 464.854 218.91 cv
374.044 218.91 li
cp
.592889 .483558 0 0 cmyk
f
374.044 244.855 mo
372.77 244.855 372.137 243.906 372.137 242.959 cv
372.137 241.692 372.77 240.746 374.044 240.746 cv
427.518 240.746 li
428.464 240.746 429.414 241.692 429.414 242.959 cv
429.414 243.906 428.464 244.855 427.518 244.855 cv
374.044 244.855 li
cp
.52578 .425635 0 0 cmyk
f
384.794 89.1714 mo
384.794 109.421 li
384.794 110.054 384.478 110.374 384.478 110.69 cv
368.343 136.002 li
431.627 136.002 li
415.493 110.69 li
415.493 110.374 415.177 110.054 415.177 109.421 cv
415.177 89.1714 li
415.177 85.0562 413.597 81.2627 410.75 78.4111 cv
407.896 75.8809 404.1 73.9819 399.989 73.9819 cv
395.869 73.9819 392.075 75.8809 389.231 78.4111 cv
386.385 81.2627 384.794 85.0562 384.794 89.1714 cv
384.794 89.1714 li
cp
380.684 108.788 mo
380.684 89.1714 li
380.684 83.7925 382.581 79.0439 386.385 75.5674 cv
386.385 75.5674 li
389.865 72.0825 394.605 69.8691 399.989 69.8691 cv
405.366 69.8691 410.119 72.0825 413.597 75.5674 cv
417.073 79.0439 419.287 83.7925 419.287 89.1714 cv
419.287 108.788 li
437.012 136.952 li
437.645 137.901 437.328 139.166 436.381 139.804 cv
436.064 139.804 435.748 140.12 435.432 140.12 cv
364.55 140.12 li
363.603 140.12 362.653 139.166 362.653 137.901 cv
362.653 137.585 362.653 136.952 362.97 136.635 cv
380.684 108.788 li
cp
.50338 .405005 0 0 cmyk
f
374.044 175.876 mo
372.77 175.876 372.137 174.926 372.137 173.658 cv
372.137 172.708 372.77 171.761 374.044 171.761 cv
411.699 171.761 li
412.963 171.761 413.913 172.708 413.913 173.658 cv
413.913 174.926 412.963 175.876 411.699 175.876 cv
374.044 175.876 li
cp
.584436 .477852 0 0 cmyk
f
374.044 200.874 mo
372.77 200.874 372.137 199.925 372.137 198.975 cv
372.137 197.709 372.77 197.075 374.044 197.075 cv
411.699 197.075 li
412.963 197.075 413.913 197.709 413.913 198.975 cv
413.913 199.925 412.963 200.874 411.699 200.874 cv
374.044 200.874 li
cp
.613092 .502525 0 0 cmyk
f
374.044 227.769 mo
372.77 227.769 372.137 227.136 372.137 225.869 cv
372.137 224.923 372.77 223.976 374.044 223.976 cv
411.699 223.976 li
412.963 223.976 413.913 224.923 413.913 225.869 cv
413.913 227.136 412.963 227.769 411.699 227.769 cv
374.044 227.769 li
cp
.584436 .477852 0 0 cmyk
f
585.107 615.412 mo
584.708 615.412 584.407 615.212 584.407 614.811 cv
584.407 614.51 584.708 614.211 585.107 614.211 cv
591.215 614.211 li
591.516 614.211 591.814 614.51 591.814 614.811 cv
591.814 615.212 591.516 615.412 591.215 615.412 cv
585.107 615.412 li
cp
600.624 615.212 mo
600.223 615.212 599.923 614.912 599.923 614.608 cv
599.923 614.211 600.223 613.909 600.624 613.909 cv
604.427 613.909 li
604.728 613.909 605.027 614.211 605.027 614.608 cv
605.027 674.272 li
605.027 674.573 604.728 674.873 604.427 674.873 cv
549.569 674.873 li
549.169 674.873 548.969 674.573 548.969 674.272 cv
548.969 614.608 li
548.969 614.211 549.169 613.909 549.569 613.909 cv
569.092 614.011 li
569.393 614.011 569.692 614.211 569.692 614.608 cv
569.692 614.912 569.393 615.212 569.092 615.212 cv
550.172 615.212 li
550.172 673.572 li
603.827 673.572 li
603.827 615.212 li
600.624 615.212 li
cp
0 0 0 0 cmyk
f
577.699 602.897 mo
577.5 602.698 577.3 602.599 577 602.599 cv
576.7 602.599 576.5 602.698 576.3 602.897 cv
576.097 603.099 575.996 603.397 575.996 603.7 cv
575.996 603.899 576.097 604.2 576.3 604.399 cv
576.5 604.6 576.7 604.7 577 604.7 cv
577.3 604.7 577.5 604.6 577.699 604.399 cv
577.9 604.2 578 603.899 578 603.7 cv
578 603.397 577.9 603.099 577.699 602.897 cv
577.699 602.897 li
cp
577 601.396 mo
577.601 601.396 578.2 601.598 578.601 601.998 cv
579 602.498 579.3 602.998 579.3 603.7 cv
579.3 604.3 579 604.9 578.601 605.302 cv
578.2 605.702 577.601 605.902 577 605.902 cv
576.399 605.902 575.796 605.702 575.396 605.302 cv
574.996 604.9 574.696 604.3 574.696 603.7 cv
574.696 602.998 574.996 602.498 575.396 601.998 cv
575.796 601.598 576.399 601.396 577 601.396 cv
577 601.396 li
cp
f
598.021 614.109 mo
598.22 614.109 598.52 614.31 598.52 614.608 cv
598.52 614.912 598.22 615.111 598.021 615.111 cv
597.72 615.111 597.42 614.912 597.42 614.608 cv
597.42 614.31 597.72 614.109 598.021 614.109 cv
598.021 614.109 li
cp
ef
556.077 629.425 mo
555.777 629.226 555.777 628.726 556.077 628.525 cv
556.377 628.225 556.777 628.225 556.978 628.525 cv
558.981 630.627 li
563.784 626.623 li
564.085 626.324 564.485 626.423 564.686 626.724 cv
564.884 626.923 564.884 627.323 564.585 627.624 cv
559.381 632.029 li
559.181 632.229 558.78 632.229 558.479 632.029 cv
556.077 629.425 li
cp
f
563.185 646.844 mo
563.385 647.044 563.385 647.445 563.084 647.744 cv
562.885 647.944 562.385 647.944 562.185 647.645 cv
557.58 642.641 li
557.277 642.338 557.377 641.938 557.58 641.739 cv
557.881 641.438 558.281 641.539 558.58 641.739 cv
563.185 646.844 li
cp
f
558.58 647.645 mo
558.281 647.944 557.881 647.944 557.58 647.744 cv
557.377 647.445 557.277 647.044 557.58 646.844 cv
562.185 641.739 li
562.385 641.539 562.885 641.438 563.084 641.739 cv
563.385 641.938 563.385 642.338 563.185 642.641 cv
558.58 647.645 li
cp
f
568.792 628.926 mo
568.389 628.926 568.188 628.626 568.188 628.325 cv
568.188 627.925 568.389 627.624 568.792 627.624 cv
597.52 627.624 li
597.92 627.624 598.22 627.925 598.22 628.325 cv
598.22 628.626 597.92 628.926 597.52 628.926 cv
568.792 628.926 li
cp
f
568.792 637.134 mo
568.389 637.134 568.188 636.832 568.188 636.533 cv
568.188 636.133 568.389 635.833 568.792 635.833 cv
597.52 635.833 li
597.92 635.833 598.22 636.133 598.22 636.533 cv
598.22 636.832 597.92 637.134 597.52 637.134 cv
568.792 637.134 li
cp
f
568.792 645.343 mo
568.389 645.343 568.188 645.043 568.188 644.742 cv
568.188 644.341 568.389 644.04 568.792 644.04 cv
597.52 644.04 li
597.92 644.04 598.22 644.341 598.22 644.742 cv
598.22 645.043 597.92 645.343 597.52 645.343 cv
568.792 645.343 li
cp
f
568.792 653.55 mo
568.389 653.55 568.188 653.25 568.188 652.95 cv
568.188 652.55 568.389 652.25 568.792 652.25 cv
585.708 652.25 li
586.008 652.25 586.308 652.55 586.308 652.95 cv
586.308 653.25 586.008 653.55 585.708 653.55 cv
568.792 653.55 li
cp
f
572.193 604.3 mo
572.193 610.706 li
572.193 610.906 572.093 611.008 572.093 611.107 cv
566.989 619.115 li
587.008 619.115 li
581.904 611.107 li
581.904 611.008 581.804 610.906 581.804 610.706 cv
581.804 604.3 li
581.804 602.998 581.304 601.798 580.403 600.896 cv
579.5 600.096 578.3 599.495 577 599.495 cv
575.696 599.495 574.496 600.096 573.597 600.896 cv
572.696 601.798 572.193 602.998 572.193 604.3 cv
572.193 604.3 li
cp
570.892 610.506 mo
570.892 604.3 li
570.892 602.599 571.492 601.096 572.696 599.996 cv
572.696 599.996 li
573.796 598.894 575.296 598.194 577 598.194 cv
578.7 598.194 580.204 598.894 581.304 599.996 cv
582.403 601.096 583.104 602.599 583.104 604.3 cv
583.104 610.506 li
588.711 619.415 li
588.912 619.716 588.812 620.115 588.512 620.317 cv
588.411 620.317 588.312 620.417 588.212 620.417 cv
565.788 620.417 li
565.488 620.417 565.188 620.115 565.188 619.716 cv
565.188 619.615 565.188 619.415 565.288 619.315 cv
570.892 610.506 li
cp
f
568.792 631.729 mo
568.389 631.729 568.188 631.429 568.188 631.027 cv
568.188 630.728 568.389 630.427 568.792 630.427 cv
580.703 630.427 li
581.104 630.427 581.405 630.728 581.405 631.027 cv
581.405 631.429 581.104 631.729 580.703 631.729 cv
568.792 631.729 li
cp
f
568.792 639.637 mo
568.389 639.637 568.188 639.336 568.188 639.035 cv
568.188 638.636 568.389 638.435 568.792 638.435 cv
580.703 638.435 li
581.104 638.435 581.405 638.636 581.405 639.035 cv
581.405 639.336 581.104 639.637 580.703 639.637 cv
568.792 639.637 li
cp
f
568.792 648.146 mo
568.389 648.146 568.188 647.944 568.188 647.544 cv
568.188 647.245 568.389 646.944 568.792 646.944 cv
580.703 646.944 li
581.104 646.944 581.405 647.245 581.405 647.544 cv
581.405 647.944 581.104 648.146 580.703 648.146 cv
568.792 648.146 li
cp
f
107.866 581.938 mo
107.586 581.938 107.376 581.797 107.376 581.517 cv
107.376 581.307 107.586 581.097 107.866 581.097 cv
112.14 581.097 li
112.35 581.097 112.56 581.307 112.56 581.517 cv
112.56 581.797 112.35 581.938 112.14 581.938 cv
107.866 581.938 li
cp
118.724 581.797 mo
118.443 581.797 118.233 581.586 118.233 581.375 cv
118.233 581.097 118.443 580.886 118.724 580.886 cv
121.384 580.886 li
121.595 580.886 121.805 581.097 121.805 581.375 cv
121.805 623.123 li
121.805 623.334 121.595 623.544 121.384 623.544 cv
82.9985 623.544 li
82.7183 623.544 82.5786 623.334 82.5786 623.123 cv
82.5786 581.375 li
82.5786 581.097 82.7183 580.886 82.9985 580.886 cv
96.6592 580.956 li
96.8696 580.956 97.0796 581.097 97.0796 581.375 cv
97.0796 581.586 96.8696 581.797 96.6592 581.797 cv
83.4209 581.797 li
83.4209 622.634 li
120.965 622.634 li
120.965 581.797 li
118.724 581.797 li
cp
.50338 .405005 0 0 cmyk
f
102.682 573.18 mo
102.543 573.04 102.403 572.971 102.193 572.971 cv
101.983 572.971 101.843 573.04 101.703 573.18 cv
101.561 573.321 101.49 573.529 101.49 573.741 cv
101.49 573.881 101.561 574.092 101.703 574.231 cv
101.843 574.37 101.983 574.442 102.193 574.442 cv
102.403 574.442 102.543 574.37 102.682 574.231 cv
102.823 574.092 102.893 573.881 102.893 573.741 cv
102.893 573.529 102.823 573.321 102.682 573.18 cv
102.682 573.18 li
cp
102.193 572.13 mo
102.613 572.13 103.033 572.271 103.313 572.55 cv
103.592 572.899 103.803 573.25 103.803 573.741 cv
103.803 574.161 103.592 574.581 103.313 574.861 cv
103.033 575.142 102.613 575.282 102.193 575.282 cv
101.773 575.282 101.351 575.142 101.071 574.861 cv
100.791 574.581 100.582 574.161 100.582 573.741 cv
100.582 573.25 100.791 572.899 101.071 572.55 cv
101.351 572.271 101.773 572.13 102.193 572.13 cv
102.193 572.13 li
cp
.647059 .532036 0 0 cmyk
f
116.901 581.024 mo
117.041 581.024 117.251 581.166 117.251 581.375 cv
117.251 581.586 117.041 581.726 116.901 581.726 cv
116.691 581.726 116.482 581.586 116.482 581.375 cv
116.482 581.166 116.691 581.024 116.901 581.024 cv
116.901 581.024 li
cp
.0166018 .826017 0 0 cmyk
ef
87.5518 591.743 mo
87.3433 591.603 87.3433 591.253 87.5518 591.113 cv
87.7622 590.901 88.0425 590.901 88.1826 591.113 cv
89.585 592.583 li
92.9453 589.782 li
93.1558 589.572 93.4355 589.642 93.5762 589.851 cv
93.7153 589.989 93.7153 590.271 93.5059 590.481 cv
89.8647 593.564 li
89.7236 593.704 89.4438 593.704 89.2334 593.564 cv
87.5518 591.743 li
cp
.381048 .308751 0 0 cmyk
f
92.5259 603.931 mo
92.6655 604.07 92.6655 604.353 92.4556 604.56 cv
92.3169 604.702 91.9658 604.702 91.8267 604.491 cv
88.6045 600.988 li
88.3926 600.777 88.4619 600.499 88.6045 600.358 cv
88.814 600.147 89.0952 600.219 89.3042 600.358 cv
92.5259 603.931 li
cp
.515923 .415473 0 0 cmyk
f
89.3042 604.491 mo
89.0952 604.702 88.814 604.702 88.6045 604.56 cv
88.4619 604.353 88.3926 604.07 88.6045 603.931 cv
91.8267 600.358 li
91.9658 600.219 92.3169 600.147 92.4556 600.358 cv
92.6655 600.499 92.6655 600.777 92.5259 600.988 cv
89.3042 604.491 li
cp
.584436 .477852 0 0 cmyk
f
96.4497 591.394 mo
96.1675 591.394 96.0273 591.184 96.0273 590.972 cv
96.0273 590.691 96.1675 590.481 96.4497 590.481 cv
116.552 590.481 li
116.832 590.481 117.041 590.691 117.041 590.972 cv
117.041 591.184 116.832 591.394 116.552 591.394 cv
96.4497 591.394 li
cp
.592889 .483558 0 0 cmyk
f
96.4497 597.137 mo
96.1675 597.137 96.0273 596.926 96.0273 596.715 cv
96.0273 596.435 96.1675 596.228 96.4497 596.228 cv
116.552 596.228 li
116.832 596.228 117.041 596.435 117.041 596.715 cv
117.041 596.926 116.832 597.137 116.552 597.137 cv
96.4497 597.137 li
cp
.457252 .368566 0 0 cmyk
f
96.4497 602.88 mo
96.1675 602.88 96.0273 602.669 96.0273 602.46 cv
96.0273 602.179 96.1675 601.969 96.4497 601.969 cv
116.552 601.969 li
116.832 601.969 117.041 602.179 117.041 602.46 cv
117.041 602.669 116.832 602.88 116.552 602.88 cv
96.4497 602.88 li
cp
.592889 .483558 0 0 cmyk
f
96.4497 608.624 mo
96.1675 608.624 96.0273 608.413 96.0273 608.204 cv
96.0273 607.923 96.1675 607.713 96.4497 607.713 cv
108.286 607.713 li
108.496 607.713 108.706 607.923 108.706 608.204 cv
108.706 608.413 108.496 608.624 108.286 608.624 cv
96.4497 608.624 li
cp
.52578 .425635 0 0 cmyk
f
98.8291 574.161 mo
98.8291 578.644 li
98.8291 578.783 98.7588 578.854 98.7588 578.926 cv
95.188 584.529 li
109.195 584.529 li
105.625 578.926 li
105.625 578.854 105.555 578.783 105.555 578.644 cv
105.555 574.161 li
105.555 573.25 105.205 572.411 104.575 571.779 cv
103.942 571.22 103.103 570.8 102.193 570.8 cv
101.28 570.8 100.441 571.22 99.811 571.779 cv
99.1816 572.411 98.8291 573.25 98.8291 574.161 cv
98.8291 574.161 li
cp
97.9189 578.504 mo
97.9189 574.161 li
97.9189 572.971 98.3389 571.919 99.1816 571.149 cv
99.1816 571.149 li
99.9507 570.38 101 569.889 102.193 569.889 cv
103.383 569.889 104.435 570.38 105.205 571.149 cv
105.974 571.919 106.465 572.971 106.465 574.161 cv
106.465 578.504 li
110.388 584.737 li
110.528 584.949 110.458 585.228 110.249 585.369 cv
110.178 585.369 110.108 585.438 110.038 585.438 cv
94.3481 585.438 li
94.1382 585.438 93.9282 585.228 93.9282 584.949 cv
93.9282 584.878 93.9282 584.737 93.9985 584.668 cv
97.9189 578.504 li
cp
.50338 .405005 0 0 cmyk
f
96.4497 593.354 mo
96.1675 593.354 96.0273 593.144 96.0273 592.862 cv
96.0273 592.652 96.1675 592.444 96.4497 592.444 cv
104.785 592.444 li
105.065 592.444 105.275 592.652 105.275 592.862 cv
105.275 593.144 105.065 593.354 104.785 593.354 cv
96.4497 593.354 li
cp
.584436 .477852 0 0 cmyk
f
96.4497 598.888 mo
96.1675 598.888 96.0273 598.678 96.0273 598.467 cv
96.0273 598.187 96.1675 598.046 96.4497 598.046 cv
104.785 598.046 li
105.065 598.046 105.275 598.187 105.275 598.467 cv
105.275 598.678 105.065 598.888 104.785 598.888 cv
96.4497 598.888 li
cp
.613092 .502525 0 0 cmyk
f
96.4497 604.841 mo
96.1675 604.841 96.0273 604.702 96.0273 604.42 cv
96.0273 604.211 96.1675 604.001 96.4497 604.001 cv
104.785 604.001 li
105.065 604.001 105.275 604.211 105.275 604.42 cv
105.275 604.702 105.065 604.841 104.785 604.841 cv
96.4497 604.841 li
cp
.584436 .477852 0 0 cmyk
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 16.0.0
%%For: (Rixwan) ()
%%Title: (Logo-card-template-325.eps)
%%CreationDate: 6/12/2018 2:23 PM
%%Canvassize: 16383
%AI9_DataStream
%Gb",K=^)h:ZKQ_.n!j>"n(<.q=aL1X&I@(B?nc!K*=JhH)/[saDYM'Em5H4E,:cDX;"V+b&u0gAbhu=#Yt&>8f"HEGXa[T[CS%]:
%r`mTK\])o.3W+s2msj0*pS,)4GLJ/7Q>h72`.mjOSGm#\J&JM/<i+]0S%[WQWtKWgl`GK6dp:+us!fsKgZ;B/V4@DofB]P'Ebk>g
%jW++22SGk`XWEg4SOU/VoCE^uSKmFt[L9cV!;r>E_9lis5l5Q)#HNK^C!#\q+'t@VifXDiZ=-7K5D]6aTg(*_[c*:g'#'j)qm703
%f"/Oi\Q<Q(^HBGS$Cec"G<]u3jUX&o;GP%-c,#IO@XM)Af6_O(\YKu<fmB+(+m*i-D1m#1QOh^`oRE2'5PZrEC&n:kU;6f$1qWN!
%rb^hgS1EdUh(@V+[VXl+3S/nUD:LpWQiJ:NZq*UR6/6/*bIs8KliK&XgnO]go,la)#Xf,UE:U`!I,or/ms4Dh+%?MK3VX]SThol'
%=<[ZHMuQo%]njk^\>(HYkk+RaIfX,3O75@@][s@-S[ZjI&$Y41/<]YXDH5^X9V6D[e]U@0A$bsfgu>!^3K8C$aK9b1ag#C#o"*`2
%.fYBg1Mo"k:-3>7[,01s(EGT]Gn*`oomkLYO3-M"pdA"S<&GkCa3He`&0QgQJPgVP[F8<#.<9Kf^k[f$T6G&#KS'@g(WucPD<+(E
%58!ocXV5m6lbuT<KWpNg[gcKEo%X%$o1$'thJ+20]D0]0@.Yee8%j&FISKf-^VLK[[b;)iNaB2f6`l1Is8-0,j_s,*DS6QF54>lT
%mEOcbleh`2.o]`nEUI+;l*WQ;ct[I]pcJE6@;_+d1j@:q='uI3[r.B_f@gb=(_HDoM0&5hkY(r/s#n3uc-d]p'_FsPJ:qesJ&_.^
%gDF$[b0=\hYhWr*)18o"DO*@EqE^1U<Vm*;PQ>@;kQrfhYeW;:5SA462?Ql_d_PW,do>Gc)/.s<=mbM%jZ`tc07d8\h#GnaDUiOY
%L*"]pkeApVXqu;N4&*90:;;.A4(u%e#pNm^oi"3<:/CSOQq;D[@2$G;P<8Pc\R)J1G093Y>%Q@]6[mW#NTcjgM^jDQ@5Fd1dZ[u'
%0hLsj'5^]aT_q98oqcO!s![UkB:rRk4693h^-WTt]I1*6(u!bo^Xe;VHF4Z.FQmiCBB;%'Z";$jR>gGPJUoKa^uF@=VEn>Ta8L5.
%_3sV_SU[a@c7QlIhJ[>G"sZlm(MabmalUgO.t1[Ic2H=o2rVeG5Z4M'h!`4TYnj!@U!kG$[],eIlIAYbU_\.AnKoYor?M;CmhbC4
%I[h(;Fmic,nNIB84A@d2=g%L!X$:@LhV!]sc#Q1[Jd&)r$PU4AZab1)f#t9:DE+fd'K2!Zp%DPa86ij-=uF3PYgKs=PD(d,1@3uO
%A8gGQ$sWLJHs:9H=)%lG=7>@+F;G**)>9A2]o[(]PGT"?rQ[,#@*M;k20NN6/(('r+3TD-Xo2Q8XQS-gku'SOF0cE>eTtJiZ`i4c
%ZesE7oZBBSD9?ZW2GKCE]W8Ma>jfV.:AgjtXI;S#%^[>0k"r^nhHVGrp?Pk_1cNXWCdtO0>didqQ"58]Q-qA;Ho^?06BqFL^Jfu]
%b?uWK]@"j^DDW`3a_K'tg*=9AH[HbMM.pH=X`iJK6d1d'01jVIb6nJ_>meh3Ls'^?"Z\)70Aph)505D&6Fhs-bk-U0mOXTlKlXLr
%m_=IOP>3!Cq>0DXXZHpQVBD8LTH:!bR*1T+S&KES=Dentc!n4d/2rLK0`5p/;Cn/K1Xd&]Xi3NbqYjX.gA9i!*6p.i2^#!@[Ya?J
%h)*,5de$J<i<C.u%+.>L="VEVCK,\M.EF65O)&+Cp&6@428rnno5_V#Xd,AkUN\ZMIWG^:X(G3NeM1ZiZKr`m*j:T$O_5>gM:Z(9
%PETn>]0mR7=Oq\0Dc8+HFn?`[R]f%:,lTbB*Ohj2bcc>Ygn8C@/tU6_2:1`7:<JiH^J`@cTiCWO9)+IUJ[O`(rD@V,+6nJ5S^V0.
%37rAg?LDY-fkr\-AsR:>lnZ!YB&DKlX4cm*YI2-@bEN2N&9Pbg],F1hAO+CF@uMEs[V\]a#jc-V`BP:Ds"5C'[oI5;[^%35(4P-r
%p6DRo.DK:@SY"&[BAuYL2)?6Pdq8`Gc"b]Co3CaKA(!2!#.&84b1AA)JW2#/(H]qenE4;GpR?=cHO\.Rn[c6cWV+OTEA%].VFi5f
%CH]7XI=hUI/Ga0^1,Pg8gr\,[:6n%&2odmQ@h=$Y9^d*<qD\em*Ht7g`8jmD44tA*c(rBu?,`nfkF^3&@TMSHC,Zf&jg3fYe^lj%
%r)\XETuetXa[D_WcYmFJ_sH7"o\\E5=`mEg)SRnL_d^asKUJ9:1(0:?\q1ao$nicGb10Z[M\>!'j7[e'Sb<pbd?h['9jeen;dL-;
%]RJ>+V+KLd9R4mIfADB$DF,r>%FDo2)=k_pUTOOSq_I1Gn0tMl]n%![1ND!AbPI44h4LB%Gm\KaBCK0'oQL7S(8kt`$r;W&9T.kt
%ncoM>KVm&5:Qo/WE]gA;?n,_M_e(5Z(+s,WVHH,62k+f85H`Je,dNro>j*rGrU"/U_R][F/p8,ar\EtN2s]QUIHtX<etuR8[d3$I
%N8ILc0"7b,j>>"5>_]#^l%jGeW4@boT,H'MdpmW?`4M'+'3VjRIu;aJ=)XE(bS%g5__LI:q/rg_Pf.+u[nI2ikpdk"?-B3pmit3Z
%@sV*[L<]YFEV-%ugI]DbY`i8(SulJ"5!FSLCX'AZTlM#ud0b>P0Z/X.VW6B0-RP2Ql<T[UeJ`lh0#OiTVW6Bq2p.k`7rha=hiY%\
%[>f5*O7KI_>6.aU.sE`u7G2]d>KU??9W$jl?dg(!k.Gg5EG`#7C1`U,8u:G/?W&_Dg6p?5Cjp:,<]lC<1V$;]h:NE0L'Y8R-,+4j
%Zkmu8Bf33K<GFGCaJ.Ik2)7b?_XC[E%="7W0q;7<9LOD3\Oi&7=Z/&f#D09SPY'$DB&]m`Qh;;'M3?uRZ7.=n\\VV^XPBUTPUr;l
%(=P)$[4!t#=(gNjafe.4gn\,</=W(&,JdM7b&l70A-e]<[4)&lU>2\NPY>h0ipGo'W^Y%8R>Ejb<tq=OC/H<[^L^li8QQ3W[2,TZ
%PA3t#Ch?l1k^W/fAf>H"1=>Y2>%=)0SF4Gh10&SD-o$/=LJ/4%Id8K'\UkdnIUQ[VW(=,0*<!dcY%b7M2sk&B)u8ntQ3?g(IV!,g
%f<1n#r0^l\l*VteCDlnhVUoF+D=_G9"-Aq_G4X3eN.elQ>&EE(c*Z1^[+``,Rq]8ZctY@DD5Pi=Bf5KMkia*Pe=T4lQ2q0hl&k=3
%*<=C'kk\a&betn3$>*a(';IiJg9(;kf6?QB?Ut.c]t(CakeI*3T(-%j[rPf0!]dgB]hC;(7b]BBJ"=*s)Yr71Zp!8DCKBJZ>''=k
%2cF9nmC:q%ApPQ;BKNB!Fkc[Hc.1R;]h:0TGA0I2-T#EGdu<C7obG&dp+"=kS]tK;q+&t&:+Y.#:3c9c<Y#,8%"H1p0#J41Ro[:R
%SJPW[br*(8T3_@J"M3Wmccu*UnYmtscaKDE`A7Ea-HDnis0YY>-N82d8<cp96!0u6BXbPa]'f2\l)F\ZT8cb]XRkkW;@@$V)P)r3
%".I0D7UpL$1[H9Ce=Vfn8W7H,aHUB"bRWdRlf<)aeiRZc]dtLBC3B,BHLrkK?5n%4SC.`3AF$X#V/rV!3&elK:?+XY2.^TIdr0EY
%D^*JVs5D#aB'6qDD3qU#h]YOYSc;I*q=![^,d[+"g%k+'r-*>`4*"7uErJ^L#bD%NeoF6HA9R)sTddMY:GC)>I&A.t2`pW%-lnE.
%_67akErqBfIb*,&;p?\[bpH_q<GNs0r@D;GR2YnI]VC<Z,lNVdp!t3dDkp]$4mPCd`<s?IRUK-I*QAlLAVf[u2:l&,#^2Y>q!UP1
%$/V5;Q)oireN0I2RP](>bE0t(A7OBD%F(!Z52A<")6ur%H'TeHV9/]uY2o.f-]X\>&A#g'@(U0OXlZ1_<^#k&GN.n.X&Enr4P-1d
%cc2[3_[PeRnmAdo^GkF^MCFtQQK-sk5Jq[(3rCL<rlf%;jtof;7`!([lMIj;VA*V6Z_\)VFL(irB/J!rUM`/rJ8+HL[bCT"jZ9g@
%NBc1Unmk?_>jO5S%;*u$]\7/^>:t(:?[+LZU\>9Hb@ZTt=lO"YGaTjaAr2jWianF#R3c/l[oA`,Objm>Kq\Ff/FbL3&SV-+3.@;k
%OCnlq=T[iV$e\V?gf.pJY*G]JpjC7Z]@hSl?CU`W$*eJbVWiPG,0P]&8UkP#bJj$DIr+,AI6Ad$Q/Ufiiu@mD7(q1+/_<I(Z)@,V
%i[-cCO_#('CQD._/0Q@r38T=TR'Q%WM78DpN4`c2ESNZ8H\#n:N8s7.VS@oR8[GPNOK[@'9=*6:`l4g/c(k6DEjbS\m*e%GkNSgW
%e4_ge<doc>_e-CK-RP6Dp".kQHml9]9'`8[If:</CLu0dL9I^WUWF:4M:Z(9PETn>6YYc&eVku'g15Yfp@uB>"8j2)hTTA8dO=]+
%O/&S-.'j1r)Bq#s>5,2^cp)9q9I3rDh72gBE3a<B/C%9#V&PG14%]'l'-8c4'OD"'AFU)KkSRpd6l$SeN#qgHO7>H$a7*_eN%'Wu
%VEU%QhLI^XQ9EI_(_[kQ:7KJRnee\q`hZIDQH,BS0r?4WJ['7!S>hTbiZmPfI$Oe)-_5:S=0B;Ue[!]HbC3M:7Lq_L/QMf/C7[.c
%)W1#6HBh@\_Gn=-m1*n(9Xg$\XiIi[/<ARCqi)WSbb(;HAMtU]VQ>0"[u$-gh71skJ+Vc5,tl`Dd!fdTPp(302$Kp]2Y0^oH!o(M
%rp6>P9T2#ZB^#1EhbAK3B_K`uBRN,%GD<C?h:XSO_fdpEcOAnkI+#"GaqBuH-JUUDl*M@3N%Hp1k]m#sUrRVL%Jj@eT7_UU\6fK'
%T$F->-80JhUX[tl-^X6IFb+M%WS6ZDnsUjsZ_T9m;ScG3btM'P=(3/07bttPVGq^Snk=;M=-bG^$GND;5bWCe>;g?=#ramYT:n;Y
%$5;s\c-=2%Ghp$4SLKW]Z4UX`c-;un=Yr'qjsFRo;]<nlYjA]0DDJXSMrpm$R_+.4@5g6=bOB8b'ZP23Fu9ZjB&VMrS86Bd\QLmN
%$g31ePJXk(S!g-mm]b6ASp&7ZjE]`p\OCK?U:G*0R)O-q+4&cM077;d$t^#*N;q$h`XDG=n>2'#jfhJX]+VIE0k]rI9]<SrA),ka
%;-s:H!u^,j7b8f&O<9Be3j+f"kK>jlC:26M>4:'@VG(F-pT'l39<Hp-MsiEM'74KT.-#cR7>sj[GZ-%[=UB']Xj6rkQ?-g)1c8I=
%9+Qr`h^mSAh;?E!:a+9SG>?;GGe[/%jp@iPc[plNBH*ASaZ;:?+T#5P-U!mra'#8u'^Ftao8AsG''>bi4,ds))'/u[`*@4<]=mdV
%O$0?Q#_P8eG^!%bZKf,&l\m`9d]<JShG&7h><!K/>PYI+US$dI;n!auIf'Um5fIm@=2qndd<<b%;mAfL?n9u_m)&3r#\g.fV1!"5
%gru8ba5`fXHqAQt4M!*4e+(^BrbT'4E@+K?@[@CE'mR"8n:WE;q&aQdVq*;cq*[$2k^Uo+g/g=MWh#l"=l"r/+_Gl>';!&?m7uLh
%g&2j1\ar[89O_D)ENrRLUN`:ukg.9to/EeS14)cCo(@"5;sTu3i_1FOQn#dSYP!(^[?7091e->)FMXmoT9LsI-[QB!*[OJH_3l1]
%hbJu!2i_#Lr1k:Pm!<F+mG]uJYF06tI%Hh\`X,RVs(f&_)DfI@Nt"jae+7pFmI\cc\#s0i3T:7WiH)?>.Xn.",eB,qHFq9Pb[1*i
%cP.c(Vu0tt7N$s(n?0T,kj[p-fu0r\kKphf8HIO%`g\/bWW*q2Q\JbYA,8!>C?L=]O6l/6cLthT2VDj)ApHm*oneaeIj8j$1,SZB
%A1ZSj7kti9\>^/A9#g>C16#j,49)/SYiCuI.=Pge)P5`DA@3jG[(:5\G'K7%<'%OOY5qFC&]+-R1[uq\AGHf(<;P&jTe]mJS2Mgb
%HAD>D)-5h+pEssY<9oJt90-c$mZij>:j4CpPBJRr\HQjF?.S@CWqDae8ZCUKlqO;p\OfJ\%rt_=VR+tI)4QVTc,@k.Antm.%\XF=
%YB1k.b0B?GQ7j[\+O=E@X-n2[mFlc)Ar2RgE1A3&GWk:ol=1ZRW8t'WYKnD_^WWge'$K02@elKoE6XFdh(*:KlY*%reK7.&R"q?0
%f<+0fN'a_%/1UEuHs1<S^\mt9YM4Q=:F(E?FF*iZ<-8uoj]/Y[8!Eq+gbSU1(0UofqZ;+j%I5BRg93BfoiO/YE]a&'>i(&3pV)TJ
%4nu4.i)qs_O*NsGr6V-%/DGp;3$2;?G?)-H"mj%4+n'p>^L"cahZ<F@:0>'ognuf+Y53)3E=]#OF&ZQs<2bbC1f5/7.Z@)-NLemG
%4mquP\W,G*m-C8?Zj6QA]agkk!DBqZpO=@KdQd[,?b;S3=IM=ILM#&^=g:u(6d9Z5r9na_HXc*._gg7/=K;8d>(S#ZMX0fX(@3ot
%0,H&\S,>u]"Yl\mpO>&\>BLqNs-_k&!$*qL>'.#Lkr6E0/s^j7OF'KY)1_(4s%F:4!#V#2aNpXS/i;.JpV/T05;^P3"aTS#;?M.3
%B^U>UHh=Z"kq6=Wh4QM%E+QDT=49nDF6ZVF>\i>sVQR(PK=6<YrODTjE0:6-B(L_5fPD5\gFO;G[jpS2Pn-C49"=+MaV=b8+tiO3
%mN#l6FUceER3X!bFiR8TlRR[cT@q`r[[dgRa*h"bh-R-:!UB-_ZKP2qN,Bcl:f'"%3VC-12u?[C%fNlgF0e9FHh,2[nFmW1nnu-A
%\N+Ce[&i'C]sq=^AB1*%MG%_U5)VKC43R>O>ZugNNSO'mD%S[m[tO'S\\fp*H"e#.-=gI$2g&\g[9US%C^O.e>,uf!IZ@VqE%eZZ
%PMT'4G'\:_O;;oBe&6JDU`sAFPeOgm)6O*E\;=<X,OUhti+)]fMi%Gn`S@Gm6qJ_s1KmFsAPla6a)Mi>nXVE0"]9?JBXc18C,1MX
%O%-[,4p^J_>J3=)\R&d#%TrA'm93i4>Qq.7lCDJIL!<krheV?Ib2$CZWVmPBN`t'L,0/H]SMq]%D=r7ddnZt$^:\<bgT$TeE=TWJ
%MZ#3:NcON-47;1@[77p&PXHje".SrPR(-Gii([RG[T8+EJ&MLpLCMFthJoUOWTK?KVsbXO[VLXC)s(m<SYjSqD,36uB!Ej*GBC@_
%H_08WDCWjf>hR\5_j-4F2$i(G*SlsdJEu=ZcZ44oKhm>c]:HGNGCIQBKD<c!DPLD$Q&f_R>4:&H3MPXs[g58b^RZkU8UGFjkY't.
%E^kpU$OAA3478\S"sc+JmDZk'I=ibB*Hq:m2XoYT?.=$NY&15p4RJJ2j4nOQXngW03M+i,a6!/(h!We+6^Bu(]n^Kd.Fm[T%pEiA
%a+R6BIC'O%/+63@Wg`ZKh1%BOi6tiBg<]OSYko$W[..dIP^6IWK4iJQa^D'*#05.+[rNjbAg$1-=u4IsJFl3tqF8qSZWG>$p*m?E
%R1jHZ>S]\LSej:XrHb$6n.&J&LkT2+WPeh$]H>a4P^Cc*X&UV#Ocd6)@(66hXT@U)B=!t?C]8d5+Y-<Y&K0D2Vff/u#1jDL`U(+f
%2uPMS88]sW):u&/\5KN<6!?"Vn0^cm.A3>\OaYIq*FelaT0Q<dEF@6Nh$Un>]k3lpbAli\ghGe75n\YKT2]!bC0VcGLtq%BX^:jJ
%B&kOG7R=#Cbp(X8drnuuoc&W:IX.;Y&p=`nc4u5Qi%_T6aBSmZY/H!\qkOhU&WQ)`NI**2?>-sGBXsb0V)>:+6,NYQB1ObcOUC=B
%4%Y@<6!C)<mL5ihC1N1V`pWg`Y_B3_6C/ZJ,JI^KWtCY82ZdKp;+?eL&I3;&9])Ps9)(DJCQ]O6!g66YSDa6`&eR8*hE&rk_(pPm
%EB:V6$ghouEkQojZgN+@I1.&X+->j*FraBrSSjBZls.pP$p=Ae([UX!48&r_ZQ&=BjJ\;%J;A[-3o4\EZuUoP]F*'[O9mFs4H('-
%ZlL'n.VQc#X4$cc)>];XXkq`rkW>s?)J/7h_T=Ld[ndt+q-u7gXcns]N%Wf`)VMi%m[SJSZlc`so^Mfs$tb@?HD2e:8TX;R5(<F4
%<fL=E[p.dG`MU4;+Tn)V-AiY?@bBJl?9MY\K+mc4hM.)LbuHhMr4/V?]@m5qVr#Y3MK\[8;<=35dW-1ag[1#9G8]P:Od_X8VT?qB
%p/%JM>;M*P\fr5UCmiG&$'E7n@<ft!"&r"/%Sg1#f"IAm=Ms(>efA6LTk!2tOfOf8;[b_mX9U5gRQLM6.sA^`m#5=4m,&fBhP]"H
%&;d/dV%@mn?nHMFqPrKYgKi;NfSh$!.l9aRmab.&_d_/ilL\2TGqL,$>..1@of,U^E`["Z.s6?1*Z):jn)PEZ!&CQGV:>^SpFtQF
%fflX>[`6?eY]ECr:,Uqoe0#;N%uJmB>FpAOEn9ORPsf=RS!!*Q6C5lP:\0ooTPDCmXhl"0N:,oodB7<\o89)^/+%ZEf-Mn>2QAUG
%Qgumgl9UeTAm@gl&dVMk[kj[E28!`-AB<aW7T>_SAo-&;.]H&YR$pS]D@"6.D1U_o[9b%DH.s9PSO)S:V`LK//htUP26(b%mAns6
%;cs4Kl)JnIURLVnGqk4r>jc\e,@K6C0PjI<eie(]=#Dm19a94j=@n7ua\"<F2HMY-N_Z%VI'nEWp61KiSWd+G;UpQi])?+jPKkjs
%F^_mR3aemJdKR)oIH\k1hT\">dkYNV/oQHK&@f4*.sM==K'?uU0j7l@G\+S)iHbtPG0e;B]>U%E$X:S5bY9p&I0i)lN]5<9(oI31
%D!08M&6dqpAt9;>^[O]L4WP:W$u;fcUQHiA7ba`4bTL3='F`j[ZXUqVS.>*[Zu!-#QY@FSdCkM:e=t[CQF%LmG_HA(@;.ZQ`Lpfj
%rFY.HAs&'PW^JYen<Hl*EjMa+:bHI*AJ>0-VkHWChWFS((oZQI>7dE.F._Xh%sN1]5Ks)57n%21\shJ_3o2K.9/GQcP;HU/gYT(2
%):s)mc:OP5oSh#)bX=V_PcO"pjiYiJb.S<@]-6.gCC='&KoYLgk5cBFV<=!jS81nI]4IAsg?JR:dM-bp2XC$"RGLslB3Y\_*+KN2
%4Li2_@d.R<eSJ723irU>pjY,3:"_rT%NiL+!T^Kjk-UVk?-+i]q/36>]@:WW"n6MlYt[@0J\A1Pg[\mQ(14(WYE=aW$kil:>%8Lg
%Fb[?:5fV'5gN6<f\LjGdA8]"k#.p5(@P9o&(OR*df9PS(m`iD)4i:Wp4#d<tjiX,Rf/nn3.RT=#UPY6#k5I>uS%3G4-aI9nR6tFI
%UjgOua;;C-(Omu8>K7ih`KEEMc0*r,Bjg`)Y3_JnpfFMgCBGSuX_'2ObX'F6K:\BEc!7A"qrJ5M>0+OuH@R>Y.G&@o5a=<1U[2eW
%="haG^[V02ghm5Gb*0GT^N,&:hJ<rV\kWHn1TU<OK7-jElQfV0XdeW8cg`2TIY=5sm(g]-:9Aqu6"cpVJ?_Cs^T5>'A>$FpjKIhG
%mU^6X8isp?k_sI4jkZ!I%0mohBQDfg]VS8g;#/)Sbdh:qV_2,gILgOC\T>_&7V]eA[3g+*4o["5i'Zo/(Wuf5X\3BNc"7-h(!*"9
%?!_sQ2`(ff7&G')#rW&]i/^q%I-mpb0_`M@J(>:j>ob4tmWW;.&KgH/V@\*2Bc>CnMF6FI`H$W'@n*[m(nkC(h8JqsiOG^OU[+$j
%0cO7hBE9=Vj)T(=r%%1D*X?&tnHO,1QG7O>a;(%XoQ"^M8/fTIf0b[7V6Z2*^"'2^8oCsBjK5!&o_CfXZ+K(-r,O\j,O5CI?`@4`
%'Bg?cO#A2n,X<F+RYNWS84h*)%!*`2LT4AK;R@U&?G^3InnE_/h-p5*R3[D7#9s]g#pCUk`NM,sh!=W5a&^tc?"s7KFL[pDA2Ka4
%j"N?0_)>Ta(!C)H`;"m\-9Sr]V6r@NahrWd13i%])ho"ln9]-*D]C^Z[<`TI?O=o,;='XclN(@Y0QCKt].\@ME)2,C_kgerIfC6V
%gM6HUOG>S0nY$RT/2Lso%5<72^2>qi#<tfIZ*"2S">?8IfJ!8`[in;@_/tB^e,-2?hI0Un=16uQjX[IIp/<t#Z.V7ciU,ZVCr@[P
%5n*tVm;c,Q4m.uA6uE<Pp+:=,]7X*M03cK-*Vkn%mh,cf)B?*:YU[Z/lF6_h4u[i$<b%X6p=D5^6a$c?WRAK[Hg\52qk*"P%\Gjc
%0#(b<l.k0!>[-SXDk&DM2K-8[h--1mY[/jC]6F4_0/i_i9<3!'5M^LT/T#obYeAcT=+\kT]cGrCY'\3p]#F-Wdfo(*lLNR)UXbW`
%G'C@kb'jcJX=eGIl>Wej]sZ<*Dmi\Jgj"=^p>fqaR*RuV]eJ&=o`Il)'MJ1dJre6)`U@0bglI@$KgojY$_5R*Rt'_\l'I:qh8?Yh
%o`p7+:%?/JGs$2U]0UNO]R087F5^Lis).J1B"OlmX"3A00<7b%Ht0n#E3EW;HX8jdBaA(BDkP^?-XR@9[JFY:rR/gA=`=6ipaB#W
%q0'MT&R.J#=.VQ7PQSar]B`g"^UE((q`ft-e]h<6MrFEBL&JtP9t?)Sj_>m7M8%<\=#MPbS%82JpLniKE6l'Z^\3!4g\g@5K=@]M
%\GtdW]9d`eQ7J6k3W<$Jh`0:MP>_kTEB374mXAB?I=57(X5A9t@'MNf\R4"C^]+Bpn8NOGjd?5"pri-?X;77i#EAO,gWPY1`oe_W
%+F)[)E=/8ZVO0ST&phVknR_G8?nQ[8#D\=>?)k"k/d%6Tp63&+Km9^@lo*oG5&B%Z?/JntF1AIdH2(c7EV#BDk@q0WqDuC^Y52kS
%5/-WB`dQRR#?uN>5IuJXq;`XoDjlK^VebH+rC+\un#BTXpi:#ZppdtW^N=8j@gAq%nV=;)$8mBKXQ/')0)];ZBk^$7[;reI9"&)6
%f_?d`ZTm*3^qoKAq57"I(@:%edjJn'_^?tXeaK]V&iK?>@D&-gO/IP0CG5>n^*H>_F&2M6<U:@B]<t[%,'8HWIcgJKrU6#g61Oi"
%n`95@*uj>4K=bpun_6"Mm_/@5$TmZi]>^!4g5jc+?^=GqRPjiW_3%.L8&+n?j%.D/>BA[<G"TaBLI^[<n,DA/PK(;bde_'1!B>K'
%/I;'MX^o:fs$u*L@;"oRX&AIrop*H*j'%<?Z9YUaIl%,k?2992dSi@]Y:^phDANdhpA,Ra2h5-8'24AZSQe5+5"O&G3^+4^nZdE/
%eGcoIXD!k_Y<'T,/)OB"7Gs:u$hJ/9kj'A)d`=;&bJ]M/oB`R5-Tp@*9N8^\H<rRW.>VnCk1e):8olA`nc`gji1p8?mai2aOu,Z+
%ra$;*k3f]#Y+PN:k8X"sq,5)5+9rulUho``WlV->+C1!(Ydlh+f2'^N]"rFKm9Ut2BHI`4@J<4h?#&l`cSlUUNh^#nM9b-_lS)&l
%@(SH1b3!D;>hf*o5&@p^e7eUS6Z<+DZXI)3F*IL*qt,&)%sR?_V5!_3Sq$V7)a:'[C^p)<3@SeZ]jT)lgj)E$-SJf=>G,,WO2&(E
%XaTY<)f,-/]2mnKm/:3,j41d`TY7VWH>T#:0*\$UHREG:T\Gh1C]=7_R8TRdM^K$AporW+R8f"^n(tfeN=IbWqJtMY<_o@#7t(E>
%GjM"B(>doKFOTXF(\S>&e\gkK`>-g=M-[o2Op8%Tf#l_B>e=$?GqS4f<W@(-;;">FfG6hs$gY=;1&'bL@:FKdIRT!_lNO2j^j,lG
%KCIXnnn.V!oQTDW[jLtE:PJac0A"aX;;p9pb)>pT2#6hToYK,W2=[r$<7pX]\B1r((j-`^)QTFOdX=\B;c"Qc=F%?]h@0*Q:?TRc
%f=(qHriNdOaP,t>q>/Ylrq4ceq-6%eio?kJ@UX0QR>*k!HGD@/;ZbuDf2+-';c!7f^V=?p_-`hUmQABJ_Udd]KpBVTi%5`=m%]X/
%%;`=:NU`W0Qpr`J%9pM@#*RHnK]t3lp%"a?*m<%9Qa9>#dMjgc8miRkWSB9^/(f9TI=SP5)D.A3`YcW,07%S<qPPBQT;U)mWREU\
%TT)',YY"4rJJ+*ie)`M,$2]BR4jD+Lq2bd.e/C[2^HmeZ9(4[C'B1M[S2N^48n6ogm47u[NM`V&5%G8+_ft_EC9koLdpIDl3G\J`
%OuL`!N+.j1]Rc'OoY(re)2^*D!?(_X^7NF5Op!L/Sg:qf`]M*-3Zt^HLJJW4#'NUP=\=bF/A7Qr4gehfJQ\sl,(7PZ$-?)@I@;iC
%[7=aAL5='Z?K/+g,Ec'k#M&r5me+tU3R\Pj$'@&"F4r<b8=S'`H9Gl)AC7]Y<%"egcO\"4*VrEl!&m6fa8c"'p'DfU%c4m6Q<#*G
%#7q-1fV\V'$;IarVd$!9gE2_R[iXYYXPq_sp&GlsJj30r?Tl'np2n"Aok8KCErP+5Zu(PYiUq@aLHD@d14MjR%Rt6uLkh:"4C*@0
%9_sFSRh%_27P>L;=a*p(4d_/Ych_u1Mm$Ic=>RFnFqbbdR`1iJrNDc%FDgEF%?[5oSjJ@3f2hi`Aas!(2>HLtgCHM7T_bh);->l'
%]]Lm"MahA/erEOanY;'[M9A<teB<<*i'r!)T>MZo\hcJWLgMk:Np<IlM0.K)%.N,-DMtX;gO#P#\1i#t^mFdZr[5NTL<,&gW;ePr
%aUl"e4/a$>&N;'>lVrQ8ofS(=_Krrf6IFcZ]lW9n]mmR^*c?S0A>gF`GYl&t&_Dre`E-jS".8'+n_0J_:QO)`h##ME<uJD80EbBf
%W'];>e:3`:DLN,=$0Er25ia@,'Ug\,GP/(j_Tpn;_"JnJP"1_$N/BV@8tYtZ,:s/HfBWA"-]/@@RNt#*\C>c$q#(%r%!)&R"k+P.
%phQSt]RBZ:MWU8]fBI:a7`6u2&!XAF?J)Hbc9q?T+/6(8Cr]k1HRi"Qm(oG6n9+/*OW:SiT&3[8qg</c<d]#-/FXqr)pY2o=?GE3
%LHoGF`79IFKQ4o][<)5eXlK`3o@?gI;7DWd02n"?^K+Okpmfs2"Jr;/*o/8^2#A\mp:[C:9)`#(qtO),<46,9^"HZplg^\==tR/^
%iEkKflhu#EP4K3>h]7F5epT&.miV"%>O?h:H$:Y($r"q*3AC=p4Z,p.3O?*Hl(#G0QaREsd1"4LZfQ*B!3TNRdJB^ppeH2'`L>Og
%Zc'`8m]@0D5(,"NbHD]S%gVN`I'"Nd[>fmjcL$rO8rk#G\=gDC+TP]E2SiYcPtFOWDk5inS^j"cYKbV82tQd1cK=k:?k&n"`9rA_
%^6%W)YulD,H1XgNg-r`d[II3SeWQF@/XmU3Ic3JY7*=1f--8oFVn?8nNKp.R6aYK,=g)s`5,B>:5ODT,2h%h=%%/7X@#Y!F()V*.
%@gANm=*88`,f3b&&X4>cf^0D[I1TCMb9sK"=,YTu[(n4PG8nEpB3'$N`>rZ_(0e8>k%2CpB%mffGY@S9qlrK<MquEhp&(D362-l0
%Mnh/icI[!P0,mDgmsTfLTAEcMZ1`<8S$4]nI@u5k]Cu:Cd3dS?duED.+)>T:L@k3f$LsAfh`=12.QH4$n#,Q`C`9B7)tCr"S`:sa
%=I)hYS35T*bZg\ImTfAg<8h76r<"plF(]XWg"ZDCbsq*LReQ5u^@::4mV-+u?lfE2kP(Qt$.dBj[:;6Od_Itj>ho7aoa!^B4_b&0
%H=_TYo#$+WGP=a#GOBr/ScHpalJ^QQilelfF6)m;>(GCddsL8n):@j5PIp^)6Y:JWXR:3ijraCHVS,?C[?&nQY.hO&lfkCXJBXq#
%r8(Ig%iO(_a=jE>HZ70^r:GA*NM0'!j`S&IT:@I_*k^/1?Z2W7.XlX4B\;HFmC[_3B),*ce*"nX]mCI+Xt9#M1g,jR5!5aUgX>E:
%jk@^@l_=G;l&!9k=8ML#d<kKcgO7\rjoR3ll%3d*5*PEZ1]RFFp"/NuSddB03rA-rq?/GDO$00.l4:dL<'sf6_!iL2DbK7@6g0U:
%6%.kl:J*iXX;'u)?K*(X6@QUhX*CrMXgMKIIFeT#G'=;<VjjesN't$=hV2aEg<oW9@o:l]g3C$:][f!sEj`?@\^eu7e40t]=pViA
%?PcM4DiZh@`kD6O.#krb*ZT\`nF]/BFgglIOd9Ssm7#De5:=X0ANed)=QSc\h\jE[d<T0\TFaM<jA-g3:Yp3@85$(Yf)+H%Bta#t
%['[Pn](b4P'<t\r*hO7'2^plc^A@8*ZWpZ_p5J*`?G:K-Fm1SD>n,PZ,>)MWR0I-77mo#gV;8JZH^4S;HBa]Xp$Kcse):$0Zo:35
%/q;6tE^4DXF>:c7#'f5+rRH*>#CU+OVuFkg0u$dq>[;[SrS6ntiP,m#gSO&D3kE^ZqkHD"mTK_Z@>Y0ulAs9NYMU2QZ"mh0`D42C
%ibQ#->W=?QX?=.Bmk&M>LEC;kSYt=5VKm5%bh;e^EhJ`;*%3uE*r'[ZO,G@j*Jas&PD16<S)#aTT&2'SHF;J;o<hX^Bm&u6pbi18
%HMS0`LYeBK:S'S'(iaqU*^bJB>NpI!m_8^-ZY]+.XSD_X]bp[-aHr=Lb.E^?4mm?)DR4YF!U+1G(@R1Ob#\usqX[:;W/le*7ro2.
%YHrT^cI2=QKcRG\5W&K,I!+Obqi3+illEoLe].k<XmX%rs63a3UYm`<H@m\7%%2iRd8I`Fm";!$l?6mB\P_mc0_JoSi=LB"-j9G%
%-(r/2h*S/]1,iY\_#CBRe/38b<*?+lg[bp-eq<k/15Th)q\<s;$%U=U><NP\K4_s*T9\75CONNI.N^]XEV2ct#<,t&TqgdDDL2:j
%[8+c'luL<7H27!,JKQX6?e4MYl<T9(e:FQZ-PO=k5,sXVV8\X`No$h)X4Vmkcs!L%gYW4pI"TlV;guB!CoofRrHgDt07PD"b;#T&
%gqglLX0C40l4k+YIT5!O3q)BGVsFjeF+9s*g]%>;cE0iU,M[W#k^iYVZ+!0\o^YT6rdBUj^\`kG1rLos#5u5t-\CA8QT,o,LE#hH
%&*<nJ?PbA2pN.A8n^Up4\s+9p2,'cX5?qKnQQDS*qVZ&aUBM3?q8`?tNT_<!R/*Z9O&;W";0Cm$T$4lnp]2V,f8j]kQ<'6RbH4B,
%ouB6E9Y\:[]Kb4#K[77n4@ig1c+RA0[k?Mq]$'Wlr<DV7n"Dc7diT$>01eMqX2J`&fe8$!m8LnhOS\qNVYgLc^m;BUdZ6JBMR`>X
%pt4f(c^9Q10[&uR7/Po$n!?YIVnhZrrIaCcD!Y)29UNUD@2jITcitk/A\51]YR7`tIFLqb6ThqWl/+ZSKT#Z\kUQE29Et3i)6^U6
%eZ/Z;m?`$*n8/'BqUqe3D%+6uYHGNX^(t(h>.Lc]SHld#T2mH!hcO1`neO@9i6AoG0Dqc!df4P%B)&0-fW0@S.@".e^Y4,2rc[h^
%9*`!,c<>R^G3'ouh2fCg;87s%]DXhW:Pu'AIsYb#s1.8VrUFP'_PB[d8h6`q@S3c'[$kIsUi]dA`>lMakF\g[[u44E!%[lN*pcs4
%/*O"Bms\P9187FlC?8jF/jJ&qX"T?_kO1XLDZXd%CJ"M$2L58o\6o++V1447*"OHB>&5f2\3pahi"ga%5Z6\(n_t]gs6X'bH$n>r
%H7h)9=1^b!dAYejNVa4`g95q?iJ2cQinj<k?PTIZ((T1*#7:7$o@<;6Ykc:I.a<g;rcSQ*X)2tef#m<eO[pdGXZ]cH-pFXoY,j1%
%GdUQX(H-9Gq_d.<8Zh]M7U_nqUg1YDn?LOoKq29unD*^/"(K,BXm+)IYSH]+jmljG4,18+2nn0"D+(M[`n0rtDaF+KIMgN4S,[Zp
%ds%X)[S!/^%UOJ6>Ae:Wr.j._p;;ZnTXjl1Sc\W%2"hmX"h%&7J?/-fgfXIcT!#VZcD&,V[BBt9KnEk/OoOHAq:QF;T][Ho=qU!*
%odGmjr+>bLl24-C9C9V;KAH/b'`N^oC5a(KH*_t.>$W[sf%1E;g]5NHoD)-qmaYKs[+YDfcn\FZb+SW88(94^oeqg@2S;FPVPa?K
%cGYVjA\'minhHm2$UrL(<DDXhQ8ZnC^+U1hcYi-9^<M)2;(+UE?f!iKOp1F77phTAG@'Y39CLaZ_f"Isnf<;?PhpY!@=f?p^P=M\
%B/@m&0AZGeWG9P5Noi:/k9H)&q#ukVKC24jkmJ?nmJZb7kj?Bf]@#jd7aeNL(RW[tIk;Y1<I20ts*L26"/bDQMY)#Ri:Y$^V29nP
%I6Y_d7cTC2(Fp/Y:YZA+`oJ1i#R0N%s)!-WKkg/>#BPRp^5g8dMHg_TCsU$!Z#UmP[uULeY;sYs*p0o"<!`ir)YX+$gWa2F.5uJC
%VrJb*CUn0F#b&NY:S-MhO773LoN@g\J,K1NIJWuC:Bans..Srp_1b,7pOb5K%S4t0JE0)5DO=YXIl76(0E(0U!j.qgrE%ep@5uaV
%iInqSA%A9RiHKHu'Cba=nd_fDrfMC.C]l[2\<1@GrTM)QaN[58'r2YFTmqEOjp3?&na-,J^iA/bU?@BG&<Xb>3C0$nlnC,dFV>ZQ
%&POJeTEc;@2#GHbjWjP5(b/k!o"p8N$^'R5SfP@^;$&se'\_eO"g.rW#BkFC"I`ME*aq$M?sSii6rhj"!Y:UVKpJt4lUc!T#6OpE
%/3eq%Fg`*@2D3Sn5kk?Z^h*+-YE0iCccQ%rcJf'ebT2#>HB:(Q!/ZS0hh0hP&fM,9+k4V(Tl<:OrOh7FeD8B)Omi\<7S\IV0+S-h
%\I/''@<>:9BF)LB_]\DnQ@g;E05Ohm.*Oc]D]9ha)rdchgf20>mmOl0/IFk#+JH#%#mtKA:?qutCnB5N*9[_P:IM4V"nX+&+'NCq
%^>nOnTcFCFKcU^]N3'g\(]aK$!'BWRafGhAPM*n;[dW9oOL,TbkjLK[1]VXg5q$\]-Z;#J>%(sP#Qi/%$3b`b*$eLN!f"MXML5uN
%\,ZkD]0S\).C'6MCsWKI.USo"a@EDp8hBiOJ\o(hE)rcrk84b!gs?P[mC^+#o,N=#+ohY!\8oR8hK;0<f?IO&(F`8Y(,g7[cUi0P
%Y/h&\e&kMLPp-96!bQOf5pGb$J@J&Ul:6-S%1kU-h?0H::a#eDI97Ik(BaaKKoeD&59k@S&GV%u%`a+>&nK\2H?K:/)2+"N_QL+$
%@.Pes&ELkYNlD7<%W(2p5q%Ch"&q>2(&2(EJQuN;%i-D2pN[E)EgZr[h7Ap6EaOP&o2pNP"M(u.9#ST20$Od2<p1>sABV]k8_4>E
%M1Zk#-fmuu%sJ%H^lpSZh!+3\&leo@".V`os*BPall\%q`?<$;"R,A]ZQX-(XHT\e'mP;nj+.hC4RP7fHXXn%A-L=@QA9:J0ELYL
%Y$_NB</,FOA0[3e9$1@h@h8-.!X5,9KE84*[3[;.:jbeb+86@%G!f&7#bW>S5>upFecSS()m",g6P;_a'duAbCh<dU"HGJVC*q:D
%"*:1D;hF=-Tgk+_3j.1gB0.ORm+(Yom]3"bbQuE)2'fU1:^@Gg;Y-WaTJ*"K5qNY@Jr"rhE0P_R+mLICDA5XHK>`UaQQT$6Q=(PB
%%=FeE<KTU$0-M0M_@OQ>&B\%.d[U19j9F[=2c/croKh%H.B'6#6dVd*Pj..'fU!D.&h6-hK2?98#l-C^]j[,8eTrGCAa.j`J:[eM
%:aMrp6Egb;CEg,3G)4"EZ-)T(.5kUbFAuNj'IEtY65hN@Jk?bDOc\9-D2?Wq@0e*)$5tn&9gZ8uJ9F1bA3p:^QL/We`JY(YKE4;U
%""?`,E<+r,!eDS$65HjkBe06e!OrjMnf5b:TK>K:A,p?J^=)en6N%&^@r;=tk/37'kPu3J@t:L2=;g!k2[#$XO:F\.T_:]ML;Ht6
%`snhY7KWIiRb&(t;Z]]""5f;X(+=YU\X%e5@-C4##,i3W3S83q9E_Y2JQk/8MP>p=1=/;O74)&Y1SQ;6UeE!:7:sEqE0(@Ydu-[_
%!?\8E#n"8[%2Ib%EF9"_!<dtEZAOd*IGFqlNWP:Nf1e+*IK]CHJu$-n!PX4`CNLSN\Hq^oNa4CnBGI#\#LLg!D!)cH;.,4njB4+/
%%\XB25REFc2ku,!cbt!(LEK-u+O#&0D]jHWJ<F,mT[<7orXg3Edf9Ef"=R(6b><h%\A'0!"H&5Bit"C`.L/0mJ0<2qC-f47"M%:#
%\.;QC_D_>Z4"66.^c'7G#%Ir04Ed2"_hq@/<g\k5h][l/$PJm0"!Bp/>-]?FUX."^%FKuXCcPa"p:s/51(+%L`JS1Y.rZ40@!p<^
%^kE=m"UY>Di5G[6iaDg]XBpti.3=KQ%Z2(t\Wh=U:d`Jh!gqO.`?5l]2FKb6'Oilf1)U-J.mQoMGb,%h8X"NFJ8Kt;Jr0iO3!;ZJ
%kFpc<^7/WMdcKsVpldH_E,;mk$jB]9HJ18GLBmsOqR@"S/[_tV?r)/aq]-V\"()X:"J@"Pi^B@^Jqn*Z"9C+t@csm$)IT#MZDjPb
%L7VgXEE[NN6$5H2/,MYPj%'f5mtP#7Q4,j@*fTF5DM@dUJU^($o6+tXq-7[D(bZ-\2d$]E+@lWU1uQd&G8SB7Y`ub6!BQ#RO^K9_
%#Q,6\:g5;2.<Q)]pJb3<)A,&M4G-q$.faC#hTA[/1)s+\#S>u\D29CaL>jl[nd)2H$[h`bJE"/ALn.7tM\-YJ6D;ZAaFH/[U84_a
%foBlilbF'/8GqUP,iKT-$+5)0L/+BIA,4IRYmVV`0?H]r4b>fX<^ENt3>19N"`Xen6b&f`Lo?Uk4^ZROJL*u$ns@DpPsCTI,!n@2
%C5!3!90t-D"E&[]kmUV1PO'B#+pBnEg<tKoP7!fK'_tW/feT4%KEf%2,ZN7GQ`_(-0F"kD5`GNU!*)p]A8$B>I1:t\Z%:TiO%Ju+
%!8/NGJ/*0\&@j'J"gip3.FI6:(7[mf\2&jSa#\CBh%aL.*=!0@i+4qZBTt2k;sbPB,j6r5EI]\nmG+`reoB(3>..j=^mr9YeIF!b
%9cun:CB.?CM\+&=<?OX`/.V,_M<>]kTj[@iS4LI'Xq(</oE`F?\-47;PX'6tMgGWBNSPr24q9-dQYK.3V?rQI(`'@_IRn.\"-a2c
%R1k""U_-5F,V^juck<K!_]%$++m_XHW!m/K;h)Sn4rBSO(.t5LJAm4GP+3N-+t+!X&Wd-Z\4L/.,jKJf<"4BjRMtD;!A%[,EDs!T
%J$p?O*"#5G$/6Mgdm;_A<)SMR=<sg+LFQ(h!NZT"!a#QI!A"[mWGmCi6t9CFIPo]s+X_-DQK#%K;aXrUpshWdDO2J@O-X2+#[e*>
%kk-5)irF6.ALg.4D<_edf7X2>6m,aU%5.F2_GQcX$9[U+:_?+>O<+ZlKJT9,!gU]FI)J%(kZ^@[$e[7>Ko67&cSUD00W?_LoT%t+
%<')F_\dI\:R'MHQ]?_p!Os(&Uc#j^R\_qj-H3N$HYRCQRE^JV;VBS`r^soRUX.XuOcR6!L_]a0<rl]RMT9BujCCF=<k:#^g.4a,,
%(YGV%FR=I3Eg>4WJ/AX7c%[>L%`d[q%R;j@+\*uc-E/eO7%b;18(#sW9;ui+\"^u#5faS@+*$0@8m!348:EO1Bm`nE#0<Yi<Gg>'
%;@?-*>lg]s3GffL9kC83K-%8ta@ReE3jFgL'tp`*ZX8rb7Sq#sL2+S5PXLu@O@7!"L7VhhH-<u4$)B+,qEM\<2;m*X63VL:_QV6-
%TQ:d?[rtVL.RPN'e@)Sq:;JITV4m`FNb:WC'$B/^oFd0.Hsiu`J7lJHJNQH$X9t?BLm]U^D%;U.Zt4cK.#?ON,%hP+7K*:j,'$*d
%V:ksR8sQ7d4@gskO>tfh>=U<dZR$L@i\:Rf>`1C#G2Tm@+Xj8t7>s:RHE5>u&:GBE=;\%@kfTUFJ;7jscoWXq#R!&^-l7CJ1':?D
%@tenC\uQ)ZLD0_0)Og^n#N<eg!$c=k,nPV[@LJJR,PZe@%_rhakUtjb6_GZAfQ2JI)/'/rj.RTc6AQQe>:q'sLGG)iPZn4B'-IJn
%ilX,\jB\P]Q7J)g!5Vl^,@EJ>X$+t3#U.e98Pe#8E4*LMON0)CFTUEd5g#9frepX#P,VgL71'*i^JHupDqU7<3jCs)6b*h_39V\:
%W*osTe/2^=@[YO)BIICt,V5r>K$Ys@,R.h3EM4/&^-GZ@[hXS5!@5!A8B,<Gr<(^`psY@]&6;3h&nXB_Rn>77bS]:gKWQ@<l;btM
%@bM_D+F\lFINX<\(\o#K2j&F._JnBU,FT_f@=^(0c-X2:C4+dB$&*s4=^$G22*S$ThbtOeb>JOE6ukeX/%J;=O=*H[X,[LJr4unl
%i%BRp7@[4C8haN3`uo6:5]LCd3Kf'(aK+6OdN0Fd2BWVm$5H#doFIab@=eoM)FP4RLSmZOb?)POH6f1%/ees:(M1989E@[9JJO,J
%/<,[E#t0>0.gZd6gkt/,7:<K:qk7JJ)2R5`Q00XjpHU*7PT'<D"+qDCM80gtit7YiRGr`tbdS>Mqd>TO/Cs>+9*>h5(>9ta1Y<8`
%PntobK06\Y8E:(]oi"*aSl%!?7%Vd=&hTb7>"hO[&u(ZgLiHrj)LuOTJUSllC<Li=QYtPMm=Cb-2Aj#VC.3"AV-9\[<E_&lN1h3l
%Il?<;BSMp4f/8d;5Ua`hl:,eL>Z3SYk`!+C,2k&i\A9l8Qq'IoVcgtAqEFB`<Alh1_PJbrbuB*7ETp+`Md$jdC)0)(MTk'oKh`h#
%i$=F)7%M4"MOOdCPo@f/$'Y"?k`OMX\M/um,ILh7Q&MU`a=i\8(DDW&S;`-D'8oGF$'?%SR7OV9e6;(:j4Zr?.adfb!hg_L2[U50
%RDtO68gDlV;<&]4+J*Eqo\m2bTOMILBoUJo&p-In@h2_R@05,\TrGi36HfBtTJDuLBSW/lE3R0O@6h$#!=U)k6U60j?L%SrB-dG#
%K":[??%<Dk8tc7'GJaFr'B2lB@fl2i`t?0*$6W^grR?K#$_g1[f)Sk\O=5'I5Kn)"BNomR62%uZA@k\2K:pr;As$OH?@f5Apo/s6
%`,5CCfaO66\>IL]Z$M,3,MRT._K7$C0U_um:kC\1UL"$(Lm3p(!b:NHBbb#T_GNR/-/W\p!6KFOLrEU@i;$C:aCLb3VGoC0)i^4b
%aX'6/A[)o";)+XMH4HEmQ*:L$BX*[9Ggp:I'"nA%3p9%g*(G\(Ng=jHA2@1$Om,o"(rh8iYpr==a4<>h<%f:R.Z:,3A-tZd]X":6
%RV5*Am>_<9GMA1k!MGTf4EdOLD!dRDGf$9k$Fr]*8tq.39sleX$2hm"3^?qW6tm&5=F-/t)j^@ud2>5("c-X0C^)MU<66!HZ9E@b
%2F(u"4i\[jJ2A!u)ab$7AOkJ_g#7Sr&0MfT%T3WHfrj`jJHcT;l7&^N6;O0!#F*LIZKb<i%95j[hnClZLdbF.XalXO:L*o2ZScJ[
%peQ]rck2!gKFEDdMljRAr<J(076?X2"L(WDE1I$;J9J^DB!Y=F--9=X9K9("TV:G"Oil,$3ftTdEC/P@A1GNn%*P2&T*cgbk`Wb:
%M#rdcZHTO%"c3:`4-flo\&(&GbI(l4&19inaRIWENZ>4DAIk1;3'aPf<*G-9$"8%`i._(YU$rrZ(oHj20pE29_dc#\>(N/dX:Xd-
%Dl9'RdbmqF.!-`-(0&o[,[u.cD?Zg=#8MbKC.<dE)KH6,=jc5_4AIbaM@8af=OZcK'#rtq[4qY,5<e_i\I#f(IMaB4BXk4TR6W1(
%M#nDC;5#82p7jr:I<J9h9O]JlL$=4uI0uQ^)Uo,!,/d'b>=^Fg^Q?&2O@X+tG./*?a[.>9C,_?M:j6<#JMXm=b;o*I$O])*`2NEL
%nXcX\)r`32p8H4G60')(a,\AU^8fDNTq"Zr[puBqS.eY:c]4Zl/L%/</s<IpN4+JY'tNVRM,95c+<We<d74eT)'6%PN]^j:X9bO4
%Tp$la2S^:@bS5U;'l7`KXg+$79!LQFCnKIdKLA-I>:7\b'<E5_)pTF+dRPX?mDpOST(5Cco#<+$M(i9N.1#(e;?3d0P2-rZU\^WK
%E?L0"*=iV\&.$D1fN@eR*QsclP%\*!TS=':84Ap0&8iEb!-B2$(8=Y,Lo3!YGjGdi7g/V8MPBcc)(Y8WSUe.Aa9.K0BgF4#U/IOQ
%Z%*?sO?..1i#*u0`umYO7hqsnJF&Tb1>f^$$ms?@,)m:iK%r1NAs*Ujb1]7N`RO;u(-P/iB?EP/jV)[.?Go#>=aXJccU(%I#ja6e
%r.1LeZ;kA_C^+q+*RReQoQctI@IF4/9dtPY4TNEeW>8aO-)j6HXP+XC7aq>gOFR`qnqbU%$\_$j,,*1$$b5I]RRKe_1RWdKm<Zp&
%L00NKiQ8WKqX=IkP>!$`1!"bNcW)=C`C"$c!L0iY+Uh6d%Z+o(r3"_s_>=JO3L$S)/nmf,M%jfDXBq5$6fsE5P#Rgr;hTi-Ssg8@
%.5Oo\YU`'[#=rMaVC?aUL``$^KBsF`To!k'YV6J/2WrsA)q@deM.F/Yl6q3Ak.P=LPlVT_E"_J,Cj6#_Ma7=`'U'/LA6'rGn?>5.
%4Fr*<OMG>'J:tuG:('ba3e]9*1IRnTb)=+Ge@TCZN:AQ7ilWtJC`)P-mYiD_6<C1U#Qp6h+B3Rd2'S,NA6Cp,1/q#3[iA$hD<?BJ
%a(CX@>#>J177sFHal-.g,S_+^n@/qhajYMF9[]S!"d)t#?%n@\+TtkL!4j&"&=LkaU(Bg$Kn`E1<-?\U.[WiX.41]A6Y=saJX9bH
%kX(h(,uc3P6X().A\JJ5L`n.cB]c82Y%/ph9f\seG`%]mH=L04_6hP1.GH2])HiSc,)8eT;i<FWF@R]IC%B2?&2H_?@16RJH>it.
%2NLce$.+Jp!#S-RG<ZO1;C`@1>6Lrfh=:P:(tiL>(<[K2Pj6)M@Z]iBWJ:c'8`6LG)ji+1'q(uFUa%^DX?,I%?pb#+="$EZYS^>c
%/#\OrBtb2%kmeG5+iq)pf:Z>8&EsK<V_JI"/;B=A,EOZo=O.-8+:[=f&-HYs">[k>J_2'Fo`p$L$]>J,W0<!mE[2X)7nRnPc"Pbf
%"NALf",%./,uKqa`,]Z(Yj!P>CJeA\:aoA)bVKllkT`40G0Gb+_G`scGm8=2&a$jP6qi<%aHitE>@;m5VS*HQ_F?@BP;?$[J]X1k
%Zin@eWONq!DBqS=8)!^KK_e<C448j,.!0!D8(r=n7=i[r.hE<IQHk9=&49"QCh!2J9S+C0Sq6M0ZB,fpSf=V"Vud>m^+3JaFMM<!
%"9k+VlDe<@!r>58L5I2f'U!uTodA<G+9VgASYbm+3^H+C@OVd'(08h%6ZU3RjEZ]#<P=/I;!5<BU;.B&IDRhj;)O;C9sEt]6#G69
%UE[&S#]eE\W`"ZZEW\sK=&0QE,F"^&fb!WG+UB&GAWGu=)*sr%,/Yq(^+L=V?uV*MA^\*hFc=u.QUS\HP@H%N;3_3b13=4diX9f\
%-Bf^q&XZ+3j:3c@\6\>;')c)"8%>4\6Hpb!&?`)t->!l#K2=O`$Q[tV5`/ahZ+;(^eU[c^$Bu<jatW'W;MA\ClEEjJ]nV3GD^24E
%<!Z,s/!.5mI#0!'<rnn5SIjr+8=5$%"G(?&*bPceDkT.N!MUll@BaTuTV:CdP)b\T#a0>m1p,l=m=EEdGVPH#64alPdiLi[d0+J1
%>FBPn/VD=uWpgWE+paGGVK10Ca;$8p)N'(hQBWO`B-U75dP?2F1IN^P:?rXB9MUH^2jVBH(>chlOCs?kU6;:Sn.b,'U*ic*7$?e7
%`gE^b6tSH0U5pL.dLb`W3.jb)7KghKHt8t*o_/p^qg;?UGX4k06S:'cEu?-;p9BT&4@3mK"ee9i'L2[3'Dh,>'^Lofjht&fR"F$(
%T;;l*2$JTE5g^$?S2UGBicLbs6RhUpT[6^(Le=TXjEU#`P$=[W.fKP7!,eQT3Z16SJe0RJ-:me<4PLliW:Loe!Fe;7FVqYJKZ`&8
%3oE;#(e2`3W:kmp\:X;mY3P4kaU("h%O_Ye\[K]7"gUZJ&D:[GQ_DQ;6BE5_B$qbeFNmB47Na?aiT`ZP't`+=?[U)XbM1%HG<UfP
%5naQa?<\aNI!H-217=cTUM,<_[VnDF+5=*FLmt+3YiK5l05!cuUDk*So#&gad;oB_AhEpkUp0?#S]+Wk,g*ucSJ0oA&5Z`dT,fBd
%P]#;$#]KQ4FF&P?Y6K!VVYW%^G9g^+2&rn)3d/NU7ZtttTP_l23Gg"(\dXR\X&PkS.NcM:D-*c<hc:eSdL;..mK-U$$(.^\'hAXY
%,S(?IL1%[rS)#L`XH88Z7la9$.gjN7OdEAVaA49/LR->N+BPHD_2KiiKa6ak$*?k!#hWen=Q5(k\b:qe,_8EB'SEFe@1g4o#Xcdt
%,3?FQ&a>GbJqS*-dC!-5U3N`V"_B_$0t(RqB>U<[R5US[+l-EX$oT/P6p+^F^8X:e_g/"B)].D:Q&d)E:%d1!mK0.AA;l$t)^UGT
%-`D6F1Ec;t\84pNLd$-H$D$,.bH?*]c<%$opJ<MH=ObFr'GfOe1I2iqfcKlf:_X&YOq$Lt%u.Te6=B[UmqE3O<?R>1BP.@(4WVY+
%q$oQa<p9+GibqSkHEmS^d;F5q!n"P$Bb>LUmcc)CaF;7p7^kbJ=R^"b80D,i10X;?O_8G6#<F?r@P^),QD8P,!<+3oI#h3C+O)(9
%@oE(lkr.O=S]%>h$53PH`,(JI%PB;b?%u7N#>rQrN7p79]%Sn0[@RTIlP[9f9ThLokGTNNa_%&nB&1u\Y\Y[HonOY%8QR*TF=jBQ
%BJnemdn',`n0ntQGo!$ni[lNu3Rkm-3j;Fd?&R#Wk[9GkeppDqnD;t4(Uc*KYr2)iUagLr%.i86!FV^O17>75;sYupe.7i-^ib(d
%W;0lE:GCj7<IYTbqIVl->;Atjb]5eVn\(kshoM:n4gl&ej`98*k*&W&k_Y@XE,Lp2;l#gJp>p.6>r.I0.Fq$(Rkn#gJjP^.\b&UC
%]gu_$9-U--Yl``PUYn<AS,n`;-/teQ<;o0^7%ThA+JOWrCuG-r4`*FA9S=u\K3WGEJB/!Aq2Aef_I[94!t?FAj!k5T,%6G)O6\4=
%_2^F?N_mk7+[O0U&h0Z3hk:BS<EFIrR_4)W5KPo@4,XtpO<LUuq+.#/>nYId6CfC$TYb)1)umLj^Qi5$D<)01H:>8I\hEZfNAT.K
%?7_LJ3p[;F6e)J8U#U0(WIHV-Q"G(^5W=E=$8k^I6cS3o6ZlZc4e[V-L5t=Tm7:oR+VdtNj07!*N]STMdoBl`$=.j0hP+[PU`0YH
%eYgikK"O;gdA]5W66hsU*,8eahS_-(V5QXb>uo7=;Ui(&R,W+CTK,qAR8VJf/291a9#5^$;+`=q=$`r^Pbp],;49aEK$c"V+2eS=
%)QD.AP]ETIE`B?/5Z3dafhu6+LU&C8C>rFY9+`H<>T3uJ"Bt0CbN+CpScd-n#>[_N-BX]O7Aq]I9qnFSf#T5m7#7X*-:s[NPk:Hj
%RgQ0(0OqF'7(\]m9?G-Vp/c9criIaE1$'U1)MLcbPE-o07md`"0h)uip#Q@f$W*IC;Y4^8V%)8-#3/#mT3Ku8?7$>M:_W2FTe]-"
%'8?i.imJA@?A>?t2t^hh6:4E32nW0<n:#!afV[,1j/Z^a2rG\0kY=U"%3n:q:Bc)'(5!!d_0;1"j(2<*3BTF&b7VSFnkG_g5cR'Z
%a&-n+^Rmf,0oi?_2B.NEQugX263Yd1g=E0sW1ceBd#k>s6CN3&"ECF\L:XF?-6rec8";sc"uTO2).=pMV%PC7.W[<#cjJFg<QCm>
%PfkNgjRHXih)c0mL!t2Zl`,jJ#]r5D;<*A9=enj^Q(AKU6D\r;7U7666mW;Ye+;3/?mW$rbekb[)*hlnnjO;X4?/XQ1FSC['Su3#
%(f7r"J=t9PZkM7^5`d(l];kHo%XJ5[atcO!'0mc$EZLQ#`E`a57Gr9jNP6?qM))@:Z!?lIJq5;E*f(ABq<<V7f22'M"Jch]Js4Ye
%KW8cc^5nB<!5+CIKI86:3Q:XenIE'VpbB`X-Buff&L<tTda`":nm&n7^f>.UQ#C*ql8HQc>m+E^-#b2gP#=;,V&cBO@b!W>3Rr)2
%I)BZ+?K;QUb2i[FMpnY105#foq[$sb(ASoEEK6Kbog8@oeV+$6I@T+NG+fpm6ZNT24Ma\=:h)-r:89g,YGMQV2B,WE]=:,^b#"Or
%?En"@V`I_ad=A7G.TB1R-F,Tk1(7orZA[`m5'0U/EK)JUXT\)*msY]#X[K*0o(=TG>_sTT;p7M9.hMh4T?C'\rCWT7bNejB`kggu
%po9I@8-^5B@5Y,TfCAFCFATB__Gf<NP[&OdJ]f@HjO1pZIS+V]P[#LZa\>(2`m0*T`@unfCR-fgjrj&p3r6E%470O;@C&G#H>D5d
%^/2Xi/J/>Q@"n]<'DZ<6U>Q\AR?eu3B@8K\2.l,AK?3(lobHAu5U[WY8coYSb0'W*4,=$%4=$(_QT,43VTGr5Jm)F#-G=S-N9@+`
%9d!B/dN)@)052Z&BAU9hO<s\5OBS9[*d,jQlKcVL33sbl@E4`7V"Y6>5@Dg*Y?qo6/Dd"@llAmRjJnqD"(Y#H$;+ARNT%CuM!"B`
%o''Zo0$rSS_(r]e&7)>G,^RNZell]6Le/L3kuMY-nNg6'i%cWG+Xh!hlmOtH@bU*.jq%\n)6,SsT1!_'Bp4iJ[;4ij)%#OHiB,)k
%cB*H!HlPE')3Sn@ON=k./rrXA?Nqgn`DG&!WJ5Y&i>YiS6#*gZB)"gqo`Mo/,+027d9D"i>5C];OS4YHW:l3USXe6EO_^PgC#@"N
%k;#J`Gka>,D;N[Y9a!YH1:(a!5UU$M8,>]"UHc%^)E'mGWF9)66Va[af?tso>/`s92k*^M==>5ZQSm5S+B@b3Y,Dcj("50`F`u2@
%,SMS3,8XY+^q?n.+?/5+V05]9)L2+SP^F?rh]SnP,j@#pA;HYCS36%jJ8^o_1,U$ocgi^4Mm%L&.GkTlX\dV?fJQ8dVJDEJP#IL%
%VHos->15o3eu*p6H9QsSQ)2N2#`dj^-$W!"C@!7aBf)aMeb%4kOX?OR`#rbE_rtt67BUF=WhB<b"DS-ioYq;PTS>al>agRhC[nMu
%=Y\k2lJ4s9jFA@*I+*9i&La9"e5n=9'RF1k1Z:,c[[D*0^4AsPVAm[ZGVU2nRdpYp7751r3P*Wfk`m47-t:,Q&7=Y%]BW9AW%@V+
%Ofes[&0TH'lkUX+J`dKB;@b"_[*J?-3coNt4M5FMA_YqLnF4MS'5#Z>"":DLNZXO#Rim-kdf>i^XG9tj0J5;W`Wa[F<4ZpQOr78$
%4:r:sXT?/q8O+XWDc78epqEKH^jG^l4s'lGI>MT.DdcM8esgpG]UTp\q4*kgF0Y(f@iF0"^D7tU(o1_`B9De0DTEXWKt?Q++SfW!
%@X1lp^?fQ!9r&t7b/DkMW,^_DKPJWLJ4c1M14jmS3.0hOjMA6+39`-9%<Uj87Y<ACD$0S(eZ5^LL7Z:@SSiuaH>84n8,2KV6A<<@
%.:(dAo\^8Cgkch<8OTXfq=5n!p%\pN><rP0r1U9CVEoV0dt"="H9oTJT>D1b2r%p3N!e)S.4?![i*c2k<[^F)'nb#b,7K@e6iQX6
%-P9PGZ?r@?`X)>H1=te$!?18Zq@A;NId9A+TY(KAW#bCk+q-jX.A4nf,Cmr=PR!"Ge6T6SU,]8!3sM^H)a&&GL'XML&J3%'YChYX
%AS2s'_<R=46@JM,&!m:S"4OER)NroAOJf*^ND(of=`"CeWZ`^O;C)=:Y7'kS?RmE>01kH8ZO"`R"C;K//4Dq+:dC+Z].3!EX&m2h
%lQe1e9@Z+GT9;nn]t]1Bhb.5T<dheAi/eSh8-GnB5,#&N2B[l:Wi$&aE6q^Ic'RKX/Fc<_6)PoXSlCCII+4*66<sa;n!"AmECBko
%Pi.8I5i2[>14^!D9<hI=_O"BQZsf&jCDc@7KP]kpp[4iL%0!eJ':n%1/gNT5^pd!&![QgZ>XV*8nV\r')91:*QQ4EcKqB=BH4@:4
%qaUjgl>j'>?^S0F8Q`7=RrnEpDLaB*,;t4YUJ-UM%/`X%Z`_JQG@`Qm<o>7")@LWcp>DIT;4Jb)s7$T"laWoGBM]%!$'\`*A2mQh
%W$b$1jle_Tg/&>WY)NnSo+64#5#kXYG,h]V-4O8VG%`($U]srr!aiLKa=nBfQ,"c%9cE:;>Tdfn.'ZJg3Q1Q[/I#?$J[,KuN/VD@
%&($kYI^UKKJ<>/<eBi`.H0QV3+?f>8VdZY-,P9q>55cZ7(g6,=^-o6bD-,>L"uIH/D\[_cC+/.;5skh8bq]$UNhHOE0!N!cV,\XE
%^iERl9,/;sd]fWL+C5FUp7,,*?@5^4$<D_?^:%FL^rVWA;2,Fr4)u+OrZQEW!A]J"Jk@VN_qC'L"=*c_!)"sq6+f]'Z>(X2(tnKM
%D*n[X3&.c_?<ra$5HP+R)OrK]Sj=Gs$V'pa!-ZMM(6!?TZ.=MkRNHeQLcA+AU6HGC%%=-2$_1H>b24X:La>i7PT/P0%8F3cB%TK`
%imXls8_6Q@pSeKk=aAs`Di\8&+q81X-rGZ=_6.RCc%LK=e/1gLDe`#dhd!E\7>SE$ds=hX;J`.[X@&/UPSQ)D-;fDAAQfHgX4PM=
%&6)")d\V.?HI`N?cEn?T<?P)o;JHc8f<a/pP%l\ETN6[]LftZgC/YR2=R@ee.hSJJfESKu),OQA#297iNC"G-g0E!Y23rR4W?FZ8
%XAH_i@3jbY"],_;3Y"Ht4`?62`8HogeE&X>e^^S0QF[_tG9=B0`X5;@k]tRs@C7&&fYLDjG1C*b\2Es?MCM0;gNrt5Wg'@lFRRNt
%<50?$%':&ZWl2GbJSj>V4hCRH8-+po[UmX_8XD[S8<A@oDk`1<JfoRb:aQIEWot_1N?D4]JPp(>#EA4"RpZOKGuoFi\H_jM1;$_c
%DF`Z0&Fis<GYQB/a-Gq<&)2-pfh>.R@?b\7SpVT%;4egNaRM7oUVE3":uBjc/2"l*#R^36Jb2].)FV+YeMi'-,rlmhAKoU:"pCn4
%<ArR2YOFQ>O^Gi<qeAl:\hFEL15&'<&Sa>?T5'2.A@!IW_`@Q^-<3l0IF5J,*%bW?!'sZ,WA!#7#=3afKr?Ns%M:j*:f#IYbB\ag
%8KNSe_9dWR-k(O3&UG7K(D@#>0jqOH;-5i9MUr.@^2(;/N'PDi;[nqDU.9-/,1g$?@u;c1.oI-ff/:O2`5?"b!u.f*!X8F6-k3"X
%,_EZo5QBXQLLWlm%ps<o"/59Y2**mY+E19S'eAFqE3Q4oA5cV^Mid"N0M88]Eko0]R9Ka,^/&t'Lg+,5EJG#g&EH8bVI6GK<T50'
%f.piH:Jtn^Hp`oXi.PW_37&n0;]2He=?TNY<B1&,^27BA^8gp)*`cQ5l*?;u'L#qePfhfe&q9j)jMNh:/M,-._`g*e\#JFh7mk>u
%2O3T_"-K::`P*KcL9_tQ4I_r^TFY-K.(&WAR#\$>$N9CV/-nb%/NBc+B+WK6O8C4G.[m6.ZsKN%Bpqs`!Z&l]WV(Q<B5/mmB2d2;
%^DfRRA%5Tc>M-I9Kg7,K9Xf)n)f:_]O<VbHD^S$F9O%1d,@]n6j#sERK[Sgf![WqpH9%'P+m0XTD60)Fm=^n'V<fIZe4j@82c)I>
%F9)YQNjS%#,?o,5_(6%9ptM)`.")QG+>3O^K]S$YXO1I-lK\T>XuZ-j<35)?pa-q[iXqgYlm-PlT#$M#6cHK[3+Qr_D$jX/6YN.L
%Z1HMd7o<FkXs>.IM*Mik;b<]_OWs#Tn<T^A7OVP6OX&k4km3.jO3J#[To(JC=UIPu#^J9;LP#VHT%lo59>mZY"tX"Uj@E_6:2,*.
%_Oc/FLr_*!ISX8`<&,]5n=q46Rm,9;kqt#"Zg#m>?P@G^ou/YuU7g#6\qrcsot7:SE(koZL%I3$IeV>/:>ONqH-MKYeW]WG&q\OQ
%*6s=;&59_apj"X/0L,t3-K9])[#CmO=AgRR2V4hO>c=j.5/ono$m%.&XZf[[YC`W;HtU6JW^%@JM(I5oFEn-XHrOP5C\Xt<"[BRg
%\+GK^r58R=Wl,PO]<N@''(Z7*30t>ocZ@H-DZn`W(]"Mt4bH"J^QpF39*tsR.U6:-5H&nU$rr$#-Y9]a3h0QLk8;3lb&_]i,J9Q1
%o.()6JY_/gZG6==Xa,oC-6;E0O\g*%]OqdZKB&i%H3r^66\%W3E,i?V@%Z:5c'cS*;:]TZ@cQVjc#!t"@"aFrZC.0h"WA!lWCg*3
%6;JQ>#8,XQU$nZt89re?5sU10X8rP,)9ZT_TY_0A71PXl@$\UJS$O8&0<(*@#imWNE&7JQZ7Zt\&4H5>c\gOKW^57GeEQ:^[``D%
%[u2&idNH[dW4o@*fc@leCjj0XDBmDqIWJlh"g<U>+nXZ2(WgapoMlLWD.!@nAjHjRc"pA>I(&*j"S!I;IAtNPCjLOr+!=dF2D1UO
%O`P;7cr=*qVCL&oY!UYb<9;32JtJ_.XYtA['MH.DZ]"!fXC;/ua@Bfd]W?WTKdmf\&LP"#:o\cO;p4XWo:ouPlR;=&%5lg]P_k+h
%Hud@5D[:Hq7ZZtj+iO-MJO"8N$kS:VIM#1p9qYH.8u)4KZVkNK6)oNfh,rf3T9&F]`E:@2XFC[V0GHDCm=qTp2Le>M.nc"Dr&k0e
%IfL%R8Q(RhE&JHAZ.)UuAV`CG$rmp4;.J"#aE8*'e/_Z;lu6A94_@,.VTX<9a%k7aD(=%Jk=.L4FsNiLFSLl-n+%&F^7'WrHD&8s
%k4"RO5'r7Bla&qri1q;Q:?lNp"Nc]tRQ2W4l_-I:Pgb6g#i\KI9(*tFeW5&k0:/^)q,B5e5TW3:>`61R+Ut/I&67WK314*NZ0?mC
%g<W9M+4m#F50oQ@Blekj(.,E%#kDh]k>XM.G,Scb<$6nXj8tcb8?Ym3I0X)u6i&hU(X)[Q[<ps;M_uY@nn:+P_Gpr"l7<PRC0LV2
%[0`)..(ihon\]D.%O"BV[qR=:J9h\E,cVhR&:Y*TeR-cH>eVILALhN%^;VbhckU9ufoB]k8&SB8AP/IZZ4J33L\(m,o2[`#/2gb?
%39oeppP)KenPcac8O@kgOIdRK5cBf4a6()E<UW6&E#p+5Bn#-dO=H2c49b8>o%n@Og4\po"HEloO=d9m2Icq*5F4$0WJ6O_V,'Q'
%6:dj(Se;GmqdKUUm>TXbnKZ<".&sM*@t?ot;Al339U?#r/*&ed`(,eQ.*9+F82f;L;0:6);t='5M05&/]S;)(i8R;lG,)uE.:8Df
%:>boFLQ+jhGYZCo$)O%\]/F>g_itD%24[KiTLs>%$G!&U>VY<f<k$-^A&@15/mdI06hjYR""GL_#WJSb<UL^Q+pV:pU5=#8&3V"J
%CkBjPE3oK;Xo^>L,/2U%)d98]64\iS@/f4U12jr7Tk&_Cgpdf@:2C2C</,FOl2Ne93a4WoNAT"$EZBJlMR0.sTZW]7'OM5Vs.%@`
%&0rIu*[?,Eg3*Ocm9!%.=.DO59&drQ<;FMt8'I2?.,a<OZodsQNMhj,m4<phgo0qY&`a3Rgn:eug&j'c!L1ojfi5f6aZk'bJ9Nn<
%?1.+5!O%/@f>-f1hG$h5PuK1VD8PHK.@n"l:k;bS=W%AD+\Eb;U7/utF:^iiBYmc(;,d9>Y)j1o/F**L87nt#NqbS#g0*#_*X\g&
%3!?eg;A@Rclbar*mrVZ%+A5d:@Fd7E,$0TtlJhtlCdD)#m%qcK5#iRQL_Y5N=u-C.F82obDkaR]G4E#)2jjHXZ?^S[VAiEINL(R/
%0apZ0YH,Ae9^?b^S1ZuI`#]b]m[B6uEKrAFDYbJHfXfuCl%RSU50$/m!D.\[q5nCq)@h7K+JG2JF$9nM<F:2%5ZN]j,S!n)dVX/2
%MU.(CHuU4$%]dK4XdIu:O\pYr%6uc))c0Q$:AYR4</BE#_0*if4&Z4$;ZRlpI;gBQC.PP9f^tk(%Mbe3JX8F!JW^/q!Ll<WT\<Q>
%aNbdMP4&A[9PYLf30U7rGS.pW4-!hr9opZ.o<(X?QTuu3O2G,'XTY84.e1.IIYirOe\#dq[9Vca#n$?BG7&/A#]=4P31K>e.u`q=
%30)GO.4A3FO>I.=-6F7C+@ptMgH:uqBG+0'Ng)S)Xrb`e1(hOgJ=]"uk`S^^k_>eFR6W3L,e[dTmmu\GnYCqYouPJq5f!;&'9<[<
%V*R.XRY"H%%Lm&lH<FjMEF-I/SiYPA-jn7Wj#.l-'lI_T1o%/U/\5):3^$Ss@rp4S(`X!^81%+>0%.0`PiAe=.?U_P5Yl1o"K!NO
%pu2@ASWNcJVo"+G$@&;,;bqMS`Se^'^?P$1^1n=[\DP8h3Bjs:INmW>nbC:Mj8^OdS[aN$_1cZs\5C0d?R&T,BT#W[Q`*\=d[t<K
%pcd)_[e`ff)Pg/4;Gd4K1^t8**/F<p+jI(1=O\R*C;G;Z:dm%U5S7?6Q7$$QV36-O4sE?F-'bdA+hgD,o5Jg0L<L:pGqn_b.Kumk
%Ha_u^V2.j,[pS'Maq-`k4[do^42.#^M]jE>.Q^X@;4#Yj,B\)JkpGN#b'QVi^D3BR*JMkekA0?<P]c5jFC5_F^q4:*!.1@cL^':o
%DkJUU$i+q+'MIFE'uDfriYt[@!K7(s"Sk*<AVZE+^4EDM_/rS+pFi':ce4fJ^_&(oK)PakLOT=2gm;f`eaB)\YtFb7-f9i9_5d@\
%NJ8G;.C7)@K>H3X<-`J4[q35XU6buG2H4m3>9&S;<k4?62.(#@09-UM*!fQN7Z_/&=I)ZD<5WW)gUt8iG]6MREj_,8J>mgT4Z\PV
%FH_A]"p$leIgqKVD74$'#>lY_SB\^E6"Uo-*fj20]e`Vul(2HsJIMY."D`G[TStVccW*nE(oG/i]2ds'2(P6('eFYV_b%sh#VAL@
%&IE'H-QPKo,#=k;&&Qm:MntL&RRP<c@^M)E1qbI$Y\YgSMn:/lJZN4HRQU5eBgMNQD#eTS"ka^UL+'UrX+i[iY[7Joa@22SgrNHA
%IFY@X>'u'SJjl@';nWU3eI^i*S;([%bAq?0mh+STS:?dt%^YX0dI,gW:ta_2cu\8"F`sg*&]luNF#d/tW[LmSO1DdX9^hY4'4+R<
%%&.>AQ@GMTV%]H;A/36TQU;+PVI;Z4J',`2W,.Mk(Stek)]T7*!rL/IT?!\7>"nP7#?fhm>sC:I%\oh&1r/K4EVE-O:MR@3Fh]'n
%7Kc]')uR*Q.R'?:!n&,bOF2*k++&;dc0;d7&"St;*2YC4a<tLGDH^gHIF)-oq71)4%bJ3="_u#gFFn/S>XJDCh:Kt9^JhT%!_%H9
%:Ij!CXTO<:Ve;W,PP^?27&o_Y5J`PS"]5)\r"h3h^m&$2rtUOb3kt.t/LNdKHOWq>775(*16mQ17oYWeJCpQXU]hlf=KmW$1+-sr
%W=h?7."F-1hNAWS4ZkuXhNkNFct9[giW4J1J=9XbN0U/llF8$4phoeCQi8*7`Ru!C0Kqa&B[r:^*p*//Pq;of8IL(&R'EqJT[D$>
%?qC_k=0_B3-7o5OhHEc5T7m9gO0gKhf">7/(''V7@8[^l&tn1@]hliWr&JJBldf^mAF1cgfp&hB&4ft)dcXWB-*53[>2\[k%4A\@
%d&GU(I(9O.rko`Xh+2V!*X!'KX*R%G!hbia^9dl':g,e"^N_XIJQgL=%n_<LV!iP@b]B%>l?C_tnpt1#Lq0`cWnG?CJH4T,jknk:
%M9`n<r'4AX,=R68h:sZE5rp[dqC/?"CJ8F@k#)cX&Qt^C+u/-l%WkRr6-YF7ISTGLii2I\KePS]>R6t[G@!81iGukoN3thj/06Re
%j$e,f]mR+4/oW2N;Psec@2J;M^,PcYF1\3=L$YsI5D^PVapN]99D'DXA.mn/cu<KK8FJ(K7"c:-o^qh_DmD^*ZK5NMa&sQ2*NLos
%XK]kW(HEHdg,43'q!Rp5].6E>*L<k.S8`e/I,K\,NR,lVVfhu$S.M]VfshP?>TU-3S8_%BJ)l8UPct[!80@Z;=<[SYhV_O=iIN0R
%7oWXMnkQ"+$C?J+?*&!j'X"]-W"(.M.kC6\M6(ZN-EYDtLR8Jp/+ieN=Q-UEa[4bS_2^G-<XOnh&>\=]U<X+4a87hH49XrNn=,SJ
%5Nt88_WQEnST.TCU5+dh_)a)oTXr?jE7e'tUqss`OPFc?,@PV*M#o=MhYbG9S).r%IqqXVdDqnm\""70;68e:3-6b!6(Jg`';<(c
%7ub0#L(IbSKd2<P$]BWrI"*D]ECjcQ+7t7K]WbVUI,p"6MINE7KboJ\oPaNYg"4RKNkB?*:h\Ye+SWe$4ANtgF9`7H>X2"+dtB29
%Bj(M%R!.-:d)AUOirZ5<N@^%sOB'-*ZjS.<[a4f^&NttUGl84=@NlVD/q0kK6])1rbdU+$m$O)+UB!>`-50b*K8mm;]maq[Z\fok
%lc7`%b#]ipGs8b"E^_f;qNU4+DfjW-1RW$r6=MhO-(,.f=J)+;H#hbgKPhW;^R:!eI'"@XCt19t/=-_nEI4-?Rh7IrD@s:[8MV+1
%hms]I/=EQEYFhX0n3R1E?071qaT.dY$7K-T5Y]q+eh##Td&@sZ+2SIi1=qL@R>X;]9pDPW']YWHkX:&CJkF%OI0HSAE="I8@]0L4
%E8'"BYN:fM21Wu9\^7R!=p0g4F7%/IcX\YM@SB8BP0A&7T$2oEXl]cZA?N9%QHY$c9"XKP/n)Jhq+j,>$i?De0,)AX2H]<,/pC\4
%G5mY"\:3:oK.,>XXU:67"[n9uL0Q@(>3"0DBK.'!b8$_7bB9T(jhf>H_LjTYNo3?J/0Y)XWS9b'B4V0&@n94hfn+`A10:8%8`mkk
%BGYndjpL8o-?F`A[bY1tcN^e%]X&l)m2_pq4dkW_O9\6be%1su`E3D7lK2fgA?I#5k]!Kf3G4Z&<S:-n_L*o($g@;#11kUXKG*1o
%S,h)Sg8G3k"74M8#F3Kg68TCE<b5%]<MYcGp/#eZ++,=_Mu?+A;b]W2QN"g=Y0(oHQDt;d8S%sreL"iC`!pj9mm&_To;=F0;<(G3
%V?M'G1)K,^9bO.pJ6t"6U@8$0BpLPr<<:Vu_"1rt((l$YRgY=C%Qi?K5YhHHATMjVWt@5:YjfYZiujI)T/lb#4]EJ43YroSds.Ti
%YV]CQ;?K,a<OJoA3nFgDT^.Tc8K2j)Ua89j#62V`0$IpF9:)O`a#Oro,c;$<lb"gYem-I)(_=pB#G#bYcSb#))19[k#bJOoG9`0l
%1*[C--plJF;+p'RR\m:*4K$G?Pj2KYAC6haLC%WH]=KPaMmLeJ'M[a7dH%>8&m&Lhna^RKL@Mef_o[!QmROQ^?-DEj&^a4uWqc^B
%mWfJRTO\/Y-[f&0\n[ZH=T6?n3!jG;;Fn.i%9[A]NUhg_5GuMCNnZ/&_G[s)_/4`?<(m$)h($c+V(8).PL2fGd4?5q)-n4l>'EML
%FN)@m"::a&!W'hm\c?ksL2\Y]aF'Nj<Rhm^c$g6IZkQGA>&!oqF9,B]:K+iLIdJlTY)s/8-'q,1><=QfYZWrkAoq$2G>73B8k)`Z
%C*rrM-s+j0QTJYGf8lurp%*d`Ru?[E]\T\>1_KC+WQO9hX+^9^Zm7!2YD#V9mT.TW'/"d/f.V6&0`:r:I1#KLIXjp!q!kaXe\AlQ
%1:dN*1:er>55"pRh&jBCPfHDL/4Fu;^OPnKPL<IqcglZ<'`AkjBt`.f8q7g^^!_R+#u&mS?jDFP!idt;!J"cs*qM_;e`]#Ro%4G_
%1X,%a1tuZFk_d\<<`"]U<i&UJ@aLLiF[MJB'i5\QG]];/resP2\/(?Aau[>0bU^Vb/q-3p\l(XZiF>5I=67tJI)d>Q`j&o$`;6d%
%h4L(^<I+,'q[[=r>N<O"&9,Pd7=I[JadQU@6<DEL1^iis=G&%s:]CgfJ[Cs01jp[#_\,m)T8TLB/`2Gp-'r%B4MS+Fpu$3(Lb3a-
%pPh9OG0(Fm0\C8OHBuoX)2_q@%5YRFAR?tL5cHD%+\:W_)62#TgK%:)`kKURa8[,FenB)-i[n2]j?,qCamgJV/fft65A48;l!-LE
%YWg9sc;c;rR066B*$EK6ZuE2jXPic85q&'h]+2$R,O&Huc$6l$^SZ&Q[JWrtk5nU>Em'+c,f!Cn*aF7d\!c;d)O)g=_21rrN]fTY
%jOg:mUrm8l,hE:%oFq/_!Vh2H*S)qj<T_d_$\!Zd%7ii3N9OB=V<7J#jWY(RQrAb(>_%QA1,AleOS?c#F=s6,e'*nbN,+Ej1n>"N
%X$-HPcIkhZ17=%.i3ciZ<+e:6iuXN1`Ds)6Idl%5Ca6`P"6;HA/XMB+OIbq"<)f_9R/dB3oH5=/iW;\R5b=rWob4QX5e4I]gf\t7
%?:G.7<H`bq^_u9TOmY>H`cAV?>'-(mEfm*a,7&n$.ipTSi%F,oc\'1\U+DQ;cm(XG0KIrk/HK_!>a5Y;;B^V%>QG2B>S5Lk0)hAF
%K8^TCaXtn>/eW$,8qQh$I`*:o)??MYg*K$l5l[s#Q!*cG7#C#mb/JMtVU(ROKl'I("3^l_&rLB_U'5pbOOk#G&nN5VNF_^&/=#Nj
%C!e&6]sJYqa_f`Y+dgk7S1J_S!7FW'/oG18ZMB\9PDb3u=hH:qh#QhR7IV_+J;d)O#-."C[l$.La$L1]N?7#4__]FlPNs42U5<,?
%X9QEbEnuNtEWsr*\\\[)1oW0BaJXnH=9IOW$-UQ'9[<c^C=uf4(R@J,):*s.1G+R0f"BgOf]$VC5!Rq>9B5k7'<e$m&nTpG%,%5l
%'u;$HTX2oB&pOJ(d^Xg2\P%'Ce656:8]H>_b+DgAO3et!O$e5on1C*1`]-=Nc\8Og_U>rE4rV(f&O5USS7Ga:PRL"3INU/RERMAd
%a`>n*3Wa8iKbAZ9GZhB8c*m[DS"tak(80J-Ajp=7=mR)W4H1k=75W_!0J<fNTK38?38<Zr_V3PR_oBB=mAA#RQ(cYR3GTNLd$fr7
%jaKYp=Yl*B/cN0W[!^El%5-1<#KT$]l4^cQbN"JYGq:X?1'8'+IS@`O,>UW@csqHs!Pbq,c.0?9cqp'K@,c<SGA_nLrABJ`+5>A$
%l5CCgeCLmoBj?0`Hc&9e50-=U\l&;F!0L%UGT%Bk7q;?cirWETa)7F22;^3SaLC)49D.8!2![0;1bK94OVeuMc)FAqnnY<dd$7)A
%irZN-eanMXXrBB3Io+DMiW=?<1<.K.]2i!sMBu6\4#G+819U[ld:3tJYdJ%i`$U!c:9(lh#d;afILTV2n&"J0p5j>hF#Y9oFC7%<
%KMET?ND^u%j?4.L'OY%h"&%Y5<:\RG!V:Ho)cbQ5VtTfT/4[7D\gnoaE8;pjo_b+f@=6;X!lPK@:NT;%Gko:XDS^%Q`S<$4MYF3[
%,VGa:[W+I?]EtTma9$,$C:B^A+]hkq9@7Bl=GM#>@1q0$\Y\pbkn/e;B6NDkDD6&8-=O@P3b/,;l;!*AUQQ?--9Ps14oFJtkHW!G
%c[M5sGjUrE#emeBolJRmh_2rpTm,\r#P3MJ$^h3knFUC;nk%jK!u4Pjik22ND!CI2<obCab[;`;2/,sA7'+uk5pQk\'SJmHSnh1m
%XNT>[(/<lLr\dCZZ:$<cbNqYBW7`9,BSftQj?Ak;AKk4N3D8Gm\=Nq8fdE<JY^em:0)UN7\tM*s_CZM8@l7H<og(NW]<a)Nb=UdS
%Y$$qs'pR]q1LoX,-sf+D-&RLLns`Yg_@jCo4&MRsOUJ,]F>-K91)kFs_Y^+t=kVPM'"NOm)8u2MAku_;:ZR$a,>4dBj>#iM5G0ci
%e!(`D2<I,mcKR`R6tt!I'C&#LnM]N*/\<cr>JEbY\:A;!]t5YRZ.uK#VLZ$!6$-rdgUVQG,]3r3c/Y*HXrHo3q*pLdF[Jj_\fj`,
%ir#+A%&=bifl/qd6"F5`iJi1AO/k$k0jh(m/:11?*m!_?-)Pk=c5)>Ed0H@.R[]_R;*YnA'i#B>':T5&;J'?hs0/F?=nr/j4K]W7
%Ql1D!(c2=o333@B=rJ4?[k(F70g,5gR]Hq%8<:jDXC&\1&Dt.c"`R2L?3!tQda,/k#K8+%L!&V"<gmQ*r:)nPg/sP3D[O\J!c#-a
%1m&/Bok'XdjLQL-jGKo+NUq4WaVDfI-^0H%X;:9Hi/I.?(6!RR2IpiJ<Ml1G(lT@DY/tZWqqb0Sr88@i?k1uuRE5W2D/71$R9W!u
%2`hprW^(/b1V%t=^"6%l(o8l*pTAjNWE^61&VUJ;X5/[pf8`AhA9)[D4KhQ1+rnO3VI;r'<He74&^hCTM')S%EKc[f*6P5GW1(dB
%R(.L=S%I-SH+tJG6NgBD)Y)E9:Psd:Y6_-7<FJQ!d_n(Tdo`!0`K*`"d7+e[ii7Y:Q*m6V6\c[TW]9%1h=(aIQC3j2[Bm&DgO6B;
%G]fn`kb#We&Km^hs8+JLoD\jYr6PE5J,`l>f,2SL$q.L?\e/OLC/Z,=:@g040t(@;M!oX,ja`V%C^VZBX24T+R3dQ>dZj15p^=3T
%"6"70A&G7$XIZXD5NX/^f%B?m>;m+)$'37ca[\4S-3ODW5-T2e<4.;e@uMbQfhfDMIe3YuW1qN>F<HmHd\tZ'<+69e5\:I#n0;bL
%4`5'nA,Ve<lfS\!=--L=>6c=D@NBkLFgg6r/-B)3&#Am6o=8feOngf\^#Ac[0<ggQZP#2)Ie?_R8D%<l6A_7_Je$R5#GhNo<QkL*
%#%QZs<AdNYi6qDX)eJ;Y*!>G.np<825o<I,3]t4%n3U)gK2=gd8mnqU,DZ%D!_8Q.(2"h#3?`-D+=Ym*#?8&Boa)]b8p=(rl5(Wi
%!DsVQjcG4'N1/Jn?r^"^"n=)>GdkIR*ZrSbX,e?l`I#g/nu*fjW0B_"d\MdeYmfaqoGk:[_AiTaAAP'4l"Q#e-A=[Go[.A,1SuFZ
%1_Kl.S7I&7D-$_c0ul7Qp.iZ]JOero4E^Ln\U'@tNA<2L"#HSV:kP8>8Gq3Pko)C5$p"18Q%>`O:rX4tY[\d9L/&kgUF;RcHB[en
%Pg9DoaqIk^nPl?dSPK9/F.se[FsL@t[F,O^Yii5:X2*`AlfVD.[k6rg\8`FEjWZ,Ghh>Om&M-]O%jPTqJO*VfZ[U80AdR"G'!pAt
%kJn"81&7DLBKBTG/;h8_OSPXNGchZH)eNN?H)kJero!T#s1.Xl3pQ%oRTs_X,]f([nB+nW>ht98IOm;M)]P!c`/XPJO@<bHo:J'4
%UnC)u9qhhBoeZE@-LK%;B.B]s*i%&,4nr8+BuFB%80HdTA(Za)N`s<l5gaBXFM?^!p9B#<TQ#JEDNRAB%Qt_C$ks>N/auF<eBk(J
%(!*2e+Qt^H?Ztk"6Z7O_cW^-sB1;d^cI0aAcPH?S_Y2\b"@tcOoofk<Mh)2@j:`%S;_^8<?7E]jO&>sCFmjjjGO^2X!^kie@%UGa
%FPY@l\(+@;q:&I".uUl279Sf/E[JC>q&%U.Z;OqE)Z#:G7\t"!3(/"b$J<KId\'gR04KY6-fsYS863TNRtOA]rDN%5=fYbp1P=L&
%k_GW9!K#c.J9mu+WkrSR-eoRPgdG/Yc$0O#&reFY%LKC7(!Z)\bR'ZUr(tUZjG@9#!?gVNh&*GijopH+'$tSg!fBh@P/XoN],&3l
%b\+bgb7`23"^1TnafM(h&1]!3n7dTebmgL+`O&VkKbOf0;D7Q/8f9KmXE="i[+h$qlVuTl/c(gC:-.5Y$(L%Yj2PK8,<R=`I[)+t
%.i_8!FIOjG#_RfU"Mq+<*JoN.&SP`6<JXLJ*1*WcDH[(ZidOjmEu'E3Dq5/FE&Y[dq\J0)M=(Gi3q"I>.38jf>gsSNpJjWK`sb5)
%IM!rtrP%,A@34CIJ[+Kh:(R,a,O'-Y/]:6JLA"S"e3U??W&=4];(QW$T$^Wj%I&hk3c)s75LV9tDYatd^*(Ebmsg4YA/Qq395#E*
%_)?:=6t^\E:R>$b[l+H(U^:)j1pL7,**R+Q$k)dEH4g(2V*PUAE`OTY6?D.;kq6*noGZW.Npd\(P&afjij*X4k\,Muf(:_%X,/LB
%L^_HV^`(s+PJkD_'nWS@Q'I9hk7H5Lc5`KJ<<k,86%3/h4_RK#_fSmeCBK`qLCJbY2Z#e+hct2q//[L4<aI(Bfa*L#B,$\Sh]B2e
%H8)T'WnclE'9s.7ApHs+":`@5Q1XkPP3A@<9ChcAk#=qFdA!I7dNtk6e:l'HMa5!%eNU?d^dVHJ9=V/1S&U_b?ZRL\dK/BJ2:0=c
%1Ou[dR7UZI1M)(*I$jq==Fn7L^=OZ'Wrk3+NJEn.H;Kt##-<t48ui$p,XXf;`Pqpq-=,&7[nO/MZ%pX6!^L[R5G(<iJ%g@_CE!41
%C/:9oj0O(D-?4]73)I8C!ugUdJ=;jL`c,AU9I<Ak5&$?9rPSQ)$PXC0`3WA@i)rkU[Bo@Be?_G)]s,'@&HN6El8KGG=`lXE*-Dk`
%T7F;Z3=&$9NsX4DHpJge'@<MGhl'6BN+)#ER7^<$f@666QZA,W(27-uq-j\IO$d06/*?r`H+uR@q7n\?/OPn"OJl7.NXCf\09iri
%.,Utbm`KRF#R'`=+DDYN&BB?+D2s.\"W]%Olh.'uiPH]Lib\6''ob$LU'W]+VQ;*=c-Q[LB1a(3bmPRMUajS>Bpb`VGQ)2o7(_C%
%>dgPb^`RXN7VM((o%Hfr3Eut4rL\;I+"S%L*NXrVCSc+[#>%iTG1KPF7hA+ihHX"fAY<XgP(XtL>t;`+N;j+sc!+SA4G/10&/Ppj
%KDQK%,(J"<NQ[IC^usbU:,o9c0+TVcaRsl+67rNuEglh(G5OJ`Q)X_*[!8-O1SoIDTg^Af79sePNJ%9]`BtXL,Xo3<)2Ja7+cBU=
%;0L!.he84,RlH5\)0%RnDV:s'52qRn(((qi?%s&XUL;+tlC?(WK=uZBc=u,[1^'GVY.gMsCO&b>S>0=#nfG-PX!luC@>fWY3>%hJ
%!hk+?*Df!6-VOfdq1cJ*W?PH@2:D@8I1GgtiXf+iUP5ZqnhFoKh\TI["LNTN4T/^)cM@!qL%O/c=e73ah<o*Dhi)2<_\F(-d'7,i
%UhBIqJ9&c3`K9_18A,KlBO6H5,p.tR#j_A"L9Fr(;E<o->)G\HT9:Bcp+#ouTk"mIZ9]9Dj<,'J1YND`"UD=A+:od$MYDgZ/*BCt
%OUWle7up^]TIH*=Y+15G=/>Cm<t<Tn]^P@dd&()WO9jO)'@7jEgaI+00SnQT@5^D>i:l3I^-i*si[##:0.hAi#$KZL/W'fro.7*H
%NK(."(JEiG5''-E1_W==7uPo+3(#JHUoocH1]BOcGTLOF8F(T6C:V287YH0K#E8k*Ts?U@L2Z"<9AG"d(V"t9p:m-hn#mP02\O,d
%ORN38,NU-'\Bbbcr%7dgIGr(XkZTJtS/GnY#C?>2EdAL0/Lr13WPj.7b`r;$#lD1lN!lI>J0?VRfP9=[X_PBc!PhE!BqBm;]F*VM
%'g?/'-:EUY<BBa=:.MYmTN+n&d,>ETj\je-maSDmiPB(@*m=bl-k-4!C@,j*9kmMc]?II:QJ,GZ^T,.@Rn&._UH"(r'Mq1a$&a^L
%7cI)<:Da1u"V5:6$nUt<F;ebN9L'""^?pIgUDXi`+C.7$5N7=Gbg1g$>ias9L^AHV2f#-,;$>tOl=00(cTS1rZp[GpMTjqcjbh&f
%G+ipZ%W1u,6"Ie%_s$7lGqJI`p2d[M3+"XX7]>L;"lu2Z:Eg<mJHc53/uh)_7,\'Vd>9njKcA#u$V.qiDP_L1RBU$L436@tNRZ<,
%W*IUsCgh$"U)UOV+>l)ABCS):3:k:!97P47pLrB!-8O#%i,2NiE86r<"0k+#E`4/o!fFpt<cne2Y_;)Yq&d)=&n1&;-c;.,e0ciY
%&1.i#OTFFifNGNQYQT^M<F;ctS1c:s&&EY=_W*b$0i`rK16Z/!a.d1_Hc&E4YFf>:$j3WL4VR5\%!4eO%3o0k[JJDL;+K-I+;;.8
%cpb&E'i?K?Tq^,+b)s(-n;%<;G<G2m#rs'r!(`PA`9<4oj\T%!*lQb5b%;cl])"*0(L<'4g0jg2VM@KB"X58B>R>6fnQu/]>6QKF
%*5dD#j!5.g'(sL9:]+MJJY0>U%kaVUs'!o.D`_.Bq<kSVh*c%uGI3)5E*I?dp]7eQQ-WQ[#LK2r0H/gLLk/NT4MISqs+&/l-b]]H
%b2t]nJ-R4=9!A;V)mKC(J4;9Z6:D$o(q31mq;lGXY_uY_i8.B/&@8Stj*l>!dJFQ_0$)#5K80/])s+DVRYoG6R(,qul[#*@)/_;>
%LgbZ9p/l&dT<m+WL'V*hdFUri6"aS,F8YBSK$N$o$>>Kp@L.0i+R*HAOGu_f[okR;ik"hqPuNQY-!_&(]f"?3E*msu"Q,2GHa@BY
%o'gsk=DWPMH4FUCI6DnV*Y*#q"W[V$4fF>k=ku$8#1iAJj@EM(K?m)=dNo"uROkgoI8394V.l\'3IPV"cgX!dfu>>#?VgJ\4ru.r
%R<HE+GRM)W]TiB[>2V,O._6=tW*?o`dR4cX"r%lF>4`%gr%fd6]C/m"c2knVjAKOiXS:'8j,Ghe:u.9nBLNoQL'Cg9>O2feYrSP0
%<EuIBj"Q:k:RFjYT;>DP2lg%J1N:\+CP:;NO:-)8&^Y$*^/=^E0Sh;KR*@?E2]@)@LN"'VGW7?U#`Ub"lYN;OpWT80+$rcXQg-Ml
%PM,B!]euE.0RsEh0cr5Ir0o6jBKG/D6nSi/AcrUhXO7-oc-OH./Lc"5+*IM?VRq4\hn*[HcFL^!"koQKFk70Ol?DaCg0-HuR&$5&
%O^&sgYWXd#\)geg)4L[">W%n"`j,jj@rjnfYrSOnS.(%[b^="9N6Q"dAnqmKk)/5&K;`d!Z"Ca-:+U+'O!\Iu[==E\1Eig$\ZmK`
%4\&HBZYNI[fM0WCE%-nc:!K7!W-57u!ijEFV.aVX+Yu"5W0s)!Wi"o<LoMV<2F1]$;);GKPaRtk9%N(N@USMoB)\^-)3?[AMl(*Z
%;?H@Sk0@k]=5-2tNi>%3dAi-RghMt2&Y5Xi\ucj(?L'B<1Cs'\RB8K"_:F"-Zo*U^bgmcrEfA7_hT+7gcsU\(;&YqAP54o6CE&5W
%@2$l;*4F#/WjAThXGZB-aAkJ_K\0*dZ^UM[%HrOG"1geIJ8UU!,`X%,n!b'+IdtIBIN_F-rjT0dH:H>Ue21m&,kMU\6H[%hB>RUE
%Q=k!<mQ_"/Wf8^;>cSP@D+/41=&D9mQ'P`FR0]IW/^&R:fJF`<!Q3Vk@dWEiI$^]&S^CjXYcQ?,Ft^$Pj`(uF2&m*$fh^#CXB3u@
%rfGj)+$Vh5+m*PomDj$9W"WB.WpSW@1mMJq3h'4\c&`OAW(XOo&&\)>f66D$=c0]C$iA$9Hs\tT`3f76EEN3Sm9k>c=R/RWc,)[$
%./1!F4rs>/N1j@M"5cVmccaP'd1MX'^LdftSn5=_5"a+BfKtl2C7c1G_llbtqSe9q0]`rg<_b$D26;=+O7#?(<M5CW87RbSI^:V:
%]qFpf!oH)9>K@)XNt$aCWdJXu`2\tb5OE`'gC;)45ZF[/OG=8J.`JuH"(?Q%<chY+&-c1[HOUor;2$uXScVl;B_?/<_qMST%7L&9
%S"BqJ<@m_(5t#Btp/XfbZcajO7!,G$GHH'0=uYsQ]Cp!"S&e^Krc&D[9%`kc'n#G7DB\$a,qhAs@R*qJ_,$_*Wcgi2NJ?E+IocmA
%`=!4mWS.;I:p'E7H@U=nFM$aaf`?s$";$0TJ["VVO]A2B;""\XSAo_K*Z,G_Z%ONHp7A@oK0alDM'*WVKV`H1rOIU(R=KCGWn>_h
%.XN9j@l&'/!YRqiH*6N9@'$d1%`U!?J@%3iC*k*1Za6K9dsQ!JYLRj!>ih9M8^+:B(IE.#4=bs-$+/,"5kj^:>iP&enL.P,YUYB=
%1.[bAc?_VYGB,LfLRea`',lp-Q#jS&)d9N/3S&`!(;[(nfV,kS;C3A6TW,jT+R:dt[LnJ24[l!k.j/]/NZVM3TY?-q1X::BGK@Ia
%eT(YG;i($<;WZh%8h-rF@gRW=9hU(lTaQd[eWR.R73lr;PU1.`nDDo0F6HVnO?7nY@o\#bH%Rq7rQ^Iti5-%WeJ(qlU,q,+"kM01
%(:K\UREt]eV[<Yb8=)p"j?/g3?F1fo//q$2e`c?R9&hDah:T\_NC>0nR3.sXooi`",8m2:,1ku7N@&*1*B&8X3KbX4!]nHCkcMgd
%QDO@pH9;3j-fR;rgY5]GPHb()/++S,%5dOX'8'j;=Yc@u:c)5XB[]"57\_[9Gu7q?V?gbl$2Ufu7094aFV13Ia7D<-J>>sb<aP`3
%!4*Gld<utU>%k_#Nlo<<">-r`7FL.qaW!Sij<\ZGM=l47^?Wm`nPqDJ?8hsmer.rOC7j@62DE_MZB6roYgl0W4T1q0f2#!F7R[1F
%WqDR7*%W9G!YO$9cPTQ&1&7Ru'FB0kfSePc%9=K7@MB8!k:BFl@]#3X#@[8Ti[a_D,>ig$LE4LZ#Pdoql32%*n!TFl%FU&,IJ9Cr
%]]-+@ak$lp->QBm-3mRQ\LILaXJD1Hc\rb)_kNY+IHf&'q%B;s_bMI+ML=e75N$<U?b^bF=F9p1jSG3"HdF1L_;4$#r\quH=OC$K
%"no`7"Crft\!Ue/WQZmji[&NK)Ma7QJY\>QesaZoQ5Cc`N\jd5R.N\/QE_XlZtTR+aXV)[W&W$_2.6qu*G53LSA@^g&<EAuPdWs\
%g@A-"a=%ZdilO71R+^1[`VIB)iq:Cc60,@0.j[Pk@[98a/kjK6.<enCV-9Q-6GF[ii8lgdKA?;3U#h[A$_!n/j9KE4)PD!@K2BMs
%8DY]F'M4?1fUA)XTs0.aW$\[ON\Qjb*"a^S!E:&I,VrD,iL8K2@6ui5\u^uJ+al4J]9W$)UlHUb<j7S7i0@6i]bQ_m'b)!)!G1Z1
%B/a[X:jT)THe6WKU``/B:k#1.iUDQDM$G;Khls1=J.@PGO;499qakHj,&HfSLb4\*15r&LN7WA=W'k9O#H.;&fch!ulo$r;X:M;.
%pZU3;d/m;'C/VJa?@]$8,1K\"QDFip,^8Q65hG]=od.WTLrNHnib^/4c)#m<.E/;)2%e3VhPMeFrtVAnT]f6E7/oNmk&#f[\.!nh
%A\b_k1OuK?44ch-ggW,YKfQAuCP`VZL%f9<lt0h25B.AWoT/[Y[Z6A5%oL[i#j<s>SrHaGW0J>)FmB(1BrcX-;CR9b'ugo8mXf+s
%Y]lG!90trMOKu"c+`$1[=;@@+S7%nmp?ckI!-oDKV*19=q6AX?6Tkdf:g.gCl(PG1n0OO*,Xo4\)%M"%FshPF)lD_g)jqfB<D'RW
%kA0XJ/]eEP%']ese<4"_'cpn[l&$Yd9lWcp<9a&RPBs!/G:6D>m!gskaok;D>&.h?!X;8V1,D,Z>&/3c*qPQ[Y[jk(8/Jl[97]5S
%0'[6<,`Lq"l^$k60%MT`_['^WJ0J\r1m*gDYG!F\lIW8dOiht(P`N+#9QNc:N3L0fj:#3PA;,,r<lrsGk_H6p-oGE:-#YSL<'<ZY
%,>@74[ZF\Nf<2i:luWs-i)OTj!'OBdM]2XjdX;LVLDkON#F.,7+]$n3JB[_j2C,HMp?%T3n&lnA_r4aJgKL5)B3CU,GRuI9Z<:EE
%kQRopV/n"AH`UXbR&NN&RHp%03(WNNP!\a9l2b&D(m'Cse)#fdHlSe_V-\40@kuB%=^cOX2ZodAmuOj#bF+ICco\kVgbZ,jLC:,g
%oBf?if_1Cce[c2\l[rXA,RfWc5S6T0'i!9BYG)@]+I.U^/p%QW+5=1S1'4-)b`%\sQJ8l/:u0dp'"TbrS"b9qq$Z0crUm=\TE$8o
%7^+cP.8OM%.qst,/QX\qVSG]<CY:#fdDD/LH[p47L>1>P6.?5tWC6qXXQM9#bp3uS]sgKD#mDc2brQ9M)TOGqehPUqJ<<m<I2Im:
%^(oIY;J??7A7Gg#b`fW)Bh<1JH-g/_`u&*uJTJB/M<2_Ya:%-K^HRuJrBM2i%bM\gEXN;[rq)97=I10.)KsLsA5*sIfTXj@XU)N?
%1qi*;[CVncOb'.4eWbWHL>b$XX?_QefU+2.9-W,6Jnb^$bnBj:iWkUp-5+>C)mU@s&M6oJi;JKfN1SCpH4a#2+=(umFPrP[M[]7n
%-45AKU$^t^hXPQ,CN\Uu2''U*76,L[LR>7i<13[=N#at!(IruRjRZ4a\5'XTH-T`KOWhRAOLDP#]?=?f]1Zh]KiP-/1Crb72*#1[
%:[,S@T"C;?FD'c3=^I6#'qRL.A6(cP>14K#>19Ep.#O^Z=>-ifl,X."+1TQ)nN?-LL9_ap\bL00QEKb8WY,\Sr&D/(<];#1F!%s+
%1g9=_[u-#@qI$[Zl-F4ka5aZuN=k*-`On?S_h!AN]C]4H(Q`A%,/P3Zege,SV:W`3[nZ_2#_Ua`lR05J,/oY$\pl>*d6XORoUqB9
%qVP/Z'Q*6>/1^t61E]jY!e]4M>Cm#JL7Z$FiRA,,?ahF4,BG^\N3!^V`]LP/d:"3/%@nU./:b+]5LcI"R_>aAhmC.L0I2kA(^C.2
%Q-\Kt,%u+%H!(d-(lBT==G3tn5k_4POa!Iu:\iLf".COejTA3i(*;&Hr@pC&(bCN=ZSQVV\!#P2[aK>u@lr3!!JW6"4h4(k7H.og
%'5b@Z`4gc[^hLBh)^<ofHX4rl;,WHm\u,\PrOE=qgPqA>U[R6NG(Jd@=TX"Y6D]FV(&akU3?'3:=ISaY@nRYPiiC;+MqI`hB<udB
%lk7)EM!\jYK";K6Ra3MVP';]X]Yf@KJ9MSA!U[18"H@(5kg%qk^072B!A\@1^@Xq9"=3m!,s#/c/CL6m@36m+%Yu]7#Vg'%&6lm_
%C0DpPW5s"@qOrCujM<mS#S?8*0h1LUb;\2gC&DJF*U]gSL;0rE0$1sBJ4_g2^IS>rU9jC5_%*`Q8Z6/W:c!2qPJ2`kNe$[U-%UMk
%5d_G1[5(>Vl)ab<b%[NGWRh_HW!=ad.FY/%Q:<DRO,--MEL'n)HK1nk&fIjqFin6"S!oU/.(XI!["e2a*CjHoH5I9c92`oi'SpNM
%5rA`nUkEIC)BRB@mXUHe+33I8oC1tC6Ek1;R,,Lr4cpQ`d@n[`$GXr/@"8*W%`mA\k*WROMuce[>=2_TcPVlbWnkXMcN(mAM1<aW
%3-bCjn]KiIJ?m8h+4mV"KeSELP=#?[:3mrc21!V5d*)+?;<ZPk3%/g:EQP!gTQuqKLOR0mdct>C%/_Y["AG;u0jXi)]0^,lIm@oN
%pT"dJBJE!]DgO`*ff>^RP[?,g94m]35UEAb&'QG!WSge&AXY(50mqU)o/p-N%,gZTE-p%0n>QE<W',4'%'Grk'EV4mr_Mi\C]PH,
%I)\8i(83HR9bu"u2a54<WisnK%4Kc,:K`>T^Vh>SG]O@<\FUY:k3'=26+VTm\[k!N8[0GR3X=3cWgCI(BFO1K_jmBee_p5A9PQO6
%2e9)2Lh__MIr;i3#5jMAMIm`X1q;`'>hoh:#^^G9`-=,!XYHnMHr0Boie]L(F+Q6Y6.piaaYC;h_ZFBeV"'(#]RDUFj!N6M99/!H
%;0<l[)W%$:(Ags0BOn21)??U[OSK:hX%B`J,6P6+6K(&V(a:LAf'Ft8kl:lPF6mJ/(fe22"@B60>.L+:'ql;<&Q'"d!2RkF/PLdA
%P\QGU2J8]2QH"(X.>uHZQXLeb"oO;h/5-/EPVhqbNPX,Z*)6?>SM'WI,u?]f\27CfYh',SXF%;*iaSmnf<EpHVX]9g?9`-MW:1X"
%?/HGE*E4n/c8AZ<Gc3unBT>MgD<jI;]jjNVI/5'<md'Y<2%&NJ*Z`0?A<pp,0bcrR_'k8"`6)V]e7Eq`>DRf4oHSGZ2/\Z,7//Vs
%RWDT=*-f[1-WeM$7TXX*"LB*)kJg2S@8Y=&0t]c#0!+R\2XH,YDXW#72gk)\lfW^%*IQ?]eHW;BTM`?i=\e/S^JWIrJIXK#10A%j
%;QAP02!YU87I?t!(#@FU3a0mI3S:De7k<Y.PH)e[a`e?CBA0(E33riS^o%<KGPa??[CM>NCUaSAlHRcqXoYJ8'>bEc!H`U66,#,.
%B11or*i9`$N(-U^I(B6L#4T37JYj,V?nPTT1i'EHbCtm]:Wl'camsAk68g#+7+l3dNB$qkkR#puW6&k7<&S`MVA2GB6lh9?i(*5M
%okQg0)9jsL"40%Z(:+#uHR'b/nm'jg.JeZ#BeB(qFFTt.C!n)fRT(oUYT]#1Cmji)FLl%8;&b&<UGQ5h!BO's&IkcJ\nn7er^'E1
%`f8."8,7r)nQ\'1J>C7`N7n88\!cRHJ-;+MaX*8S,po&e\@u:*ZqhHjljk.KPR\J#iVD^N)6ADEm@qY/c1>;t6+R5feO+O<BS2hm
%6g!SH,,EFcUGd#2U,F26=7qKlSV/Gh8Nk]$,>K@o.R3r\/pUE<B"JY^\3$g-b0[EG1kq]QXI?[VXMWBZKu+PS[9poKL#6S=L&^mB
%kK<^D>-U0sKD'1$88SH]r!.>DQo*_T5]dtMJ;]hE^^Gi\R@_BKZ>3aOnUO57@%`<`.W_R,'*rI4J-p&X&2M]o#(MYb50.Pd5SDg/
%Fr+pS-8&`S%e8BS&6[i@K3^S@r&MoD"U.>aXC(SQ*^JtLHr/=!.<lCV?hoR'GO,d,.k%.GPT;uTFt_9bLPuk-<:q7cV->mBfefoS
%k]7%_cFKV!l2rW(g&eQL;M<9S-+hb96L]M'!5qb]VPXb]/T=b$TNR"LM!lt@`=<D^T?jdL[k@AO8o"l^J[[9'<oKUUGr/5<'<qX-
%./Eqt[#L-C9j(gq6j$IMHnEfY!*(?q!:!D?!Ju;Ocpc]t&%f<$CauEK7[H-mAg)oGi0It*MXVX6g9Qu>7P'p@T=W0a('2RdmXopu
%Y]q^ul]BPnoU-*u4q'cm?[C<t<$>R8`uMPBB-UE>"4VBD!hj*XpRfZarL1)70aL2TRK98.K!a"'-^D,HMbk#OM@l8O/.oaO;=bKJ
%8,=-c8#0%9ZDX7m>kNWB>RnJ!n##9GJ>r/+WUDpEbLEg;.=Vn^g5>l5k!qP7hfdU[ZYahoNB-/pn"8B-=<-NnlKF@CTY;#j(i&(d
%HOL;*$6Wkhf%]R*Ptj]!8a\_\3pAog+boe-O>r302sA1Zd'tUVU!tQ+cN'dr&;Pfn#"W9$Sq$Oj!(eb2L\PbN;Xa-AD3m_&o%-_-
%TIEU)[g_IF;X%H-$f?P.lZJj&*Oe%Le^%V(1JWut^-hX=`!<Uj7#lguOc+MOm"tU)7B@k^@atJ+f$>pAB^c9U;33&iXeKhM7aL`K
%[e0N>UQ#=%$>_.s;>9u9BHBSaB=%#X?lQ*Wk<<!8bo"*KN4D,cKs*i2P32i:_,TMH]<i_0X(s&X6[ZAD/N,_IT3cggm_YU&Sj^4(
%<DMUMB0C-n!3l9(AgpqL/>3cO.f#`,2ic=c7XD"RHE0HpEW@$Xa:!=eGIq\nP9W*$O`d^,30t^AAQ+J1G/;e-[9GVVJ?#5@aqB6#
%)Pli7^:S^=E>`><<A%EL(u2p4mSin?p;D@#hNg<hpJI&&oVsjH65k[f9689HA78@3Y(X^pV9-4)#%dQSYOFhUM9mIckdV49WIOnP
%2)ZVJR3;YpSQg`XF^-ia,!4I?92i`.$)'%C@;oB+!E*s6fR?%eL7NJc\O3&^Z>arKk8*kB8OGN+7Q$$V2D.8.VA8/RV2O;js+&oB
%b%b]s?eh9+^\-X>Y*ZnjRR.e/`\$(:YNO__iNs\4[pKOSFep^&W=.@HRLgOI$FTdl,Ui_.[G(T4p&;l]T8hss"JN1rgEl?c#\C39
%Eha&1-BtB)<barTcW7)cBG"gGc&`#uYP)0S>%Zmo_J2?7%-:m@kdVdjr9Nel[+1l]%YFu([($=_.;f#Qqdc_2^/Pc.[nuOg9CIdW
%IPKL,:UV4dK_XH8okZG,>C!O(cm)c2g#iL*DF"O[IJC^9[NoBHKm;`K63UQc6"s7aW,LYX&!KgB`@ri+5^DgDEOa);BJ@'/e/ZRj
%>jJi'9P#Q/hr2j)rNDXlV`!<jD5.ub5_r`,$=9^]%u;[bp9(0l-H8@B#EbZ&UkrDObHi)<)>8bkG#U5Qb^^`hIg&@Zb1MS937+,!
%>sF+)WcjG$f@(1$A$,'sRbC(XI)XSF>l<AhkL7a8Q>5Zr@LhD/mj\bEVQ&0#64;qt6LgOtTbY5IL+Qr1gVbn3!cba!cJN<dM_I^8
%J>,qr%4F"n!'QiCTo@np5[,Wa8nkdLC&U?V*%8RfMmJNo?!fE(L`5Je?-d6?eenS:F8sqSWlei(W@buEM1O;Tjr0?;_+/H3N5sLn
%%5%.[6Dh,+GBbSk6;hNM]"QC6qfW@RUSMhZ!25TNs-af<9SL:N,c)k#^iA:Y;oZgr==t9i+Xk.NC29mYl?7h4EIU8(URX"_oTH>)
%eAcYp8B9.9BT`REEWE*[!3lPG@XJ-L^rRe1Rf3eVs1;,i$sQG/Ebam\192bF;r(Uf<:]L'i_\aB0W$_n$8K8H+'DYE35CIa/N)kr
%T]&#2_Fi'alcp#1GH.h%<a6_W/J*=a/Kn/oZJf/agJ$;[c`sin]%N>+W('6);J&<7,tV949<W,c>QmGdEg>sLV-]phCsKP.'a]1K
%Qi+>,<O.H[nq^gao&%,S=eM4BAPCXN2A8DN3nq4RD/<5;2i:`A-H&_fjiUdpk2\$cOa"bdE$Q"mLmt:ZnYZMpnpPU)d4nb]#9CO-
%;J0OB3,Zr[](GEGb%k^+=CKtbq'Dc#;Y`^XlZ(1R:l7FdP--JbS&0^"U^toM"%_uDW-@F$1PYkTjMo0Y_U!IL>j=.Mb+o=5<S/^<
%"WcQTh2F/&&PfrGcD3'=V6*&5@ER.UR,?J,^EE2mlamC%-B(ccVA.75-2&T*e'oMb*oid"h7,)c+\#<^Vhcs^YicPXA_9sk2A6^r
%=T\P-#`k1/4H4B\<.s.$;GeH2B@!XU+=rMh4*Hmq,CkY<3KG%#h;=Jk`R+pg`d`&k1^/1rd-Mlb.W%:iV-C;=gCE0;*4u3K#([ss
%2ku)+5nD\<WBmW3$&B#\O.1_%jlrd&b^b*8;83r@HuI$Vfo_JPhTS,/2*$g9rY'CNr,I,2[(5q!^JX51lG)ifq7AO-,%'WU.E:C!
%W.2oUq!$T2(Rj0oFM?kWn(N:tdMmE9YZo77l$kninL?[Khh"&DX^6!@P6+-hr7k0I7@+Z)D"3[.W#s+a1:se9@PjNhJ>cI3L]D+R
%rog<JHI/*c\=!VaP[U81;S"edTA/]ng@;kd\uceA%=+_XJ?%JDT52I/&\e`bp[phHSBNOaD6r@YVnB';Au@"=(#rK1H+YE5\j?m?
%N`H3/AE3L95?MN"q"*EO/C;eb\VJ'4*c7c-fi\XBE=YW0ODE0SW*&tN"(c[]j'?[P@?7N/W>q!667A8ccKhkn(tj'2/LD+'VRe8c
%!G(=.E#C8nlB+Hui]X$_^)h+M`q\R@;aACIA)[a?LXR)IL$P<le=1>m726Y)VTp6^#AB`0$&)i5h!MuBp5%oudoR&Poo$SnL5Ck*
%dY_IG$_j+2MqOjoT@B&ulD(r3,IL511VGQje9UQY+Mp]N15j'D^V*p:458khnAS@55?X!:TPTTu0;b)BQBSuV.6=mSj#g_u,*@le
%C29jLLitaCZZgQ>0tA+,at1**Cn&Gib%<+t+/FZ&OGP4.`Jr@nI@'Vdk\7nBAe0"8'=ep0e9K5CSuKU;8._XHnt;aUASl`,e(f=<
%:9+Cq.@WQRc.iYOU9aB&;N7n)cr".u^0D,he5u,OC'+UBDk'Bh>bTh9X;,Y;L1Ft[BMaLShPN?^W5qCKCOFJJG%2dRYN&@`HY."t
%c0gf&:?]hqZe=CehAdE(&OsFn.Z0:I*,4X0PHoeO#7AXtWbALXfc_:(6JmC?((E?mKB3$"0<VT`cdIYJOk/bigL%,;jJp%&jCXd]
%OQ>!AnMZZ+YoS^9O7\&,)C;EnZZTPokpXCXKHjWD/%)MVcbe%ZV#)Pn1rNU<:R=-J\murcQ)jsX=R6D#BY2f[XXF8c\G(^J?6^`(
%B9p#Enh*QObFu.hN\$]*YJUIabUgn-ii?n(AfAoh2WLZ?_KZb,/;/`7F"=;Q-K$:7]2q7(]&CR)l9sOEBHu_E'erV(Ua)BH&<<T)
%s)F+G>>U.W^qM#VU0>^j+e8.F&tncX+c:O7eW*O12BY&nW^YFniY%\B.09<u#f:ZYFt*'>M+Xk.Mr_K,hW];o7Qd@#9q5.bKRhQ_
%K\iWA>Di<<$fn;mb&&Y/1W_(4a2<.sdQeU5VrY9_(75b4e$oU*fSl`mH7Z:N:SYae&.<@UP"P&i'=S<Q=dqR<"iG%R/`JF>:mSn@
%b?BV%LMM:A*.:%C4tO.R%$a=6-61qlm]qO.W`kjn85&gA5q&2dX+mA,$J7Hr0m;i%jT&;eeC(q2+.H@7f?q(%l9Qp5:IlmVMbba.
%&:'-2@PV(O)OcGX2fd5@-;A2^;P_%]]BLQgoeeBSOPqOe8DqOs<LGdDp;_eA:V2G@SH8A]9P.n+b)I]JbucVY+/#d'R/1a9chHbW
%TtdanoiEdl[0J*M8BH8I<jho/7;V<";67DRF-bZ24epO715OkGju]*4R!3KrP+GI2lnCeeaS6OYs2Wr7<AI-dJ8E?*\MsK'gtW_O
%O!f.UR=X<f/'h8*U_B!D[\/IMO8*%rf<7WVGVHJtPce[_jcXE=L<,`\FlEd?2B8E&ciB2.8[(,+2Mnc,kh7oNh\+R[k%8XQXd4"K
%RBJLV!2ILS?XAb`h?7a2S7_-Z,r$R61@KWSfL6PTj.;kmBq7-q2&l_KBI`UI!Kpp1r3f)+Nt@!QIJ9DIcNn*?71q55&X!GX/olWu
%W7qbX:)<1a9/sZP3O:2UbZ]Fs*fWE,UcT0H]!F.RHBP9SG6jF5,=)ru\NUjA'mEPMYMAU%c!EP:[9&9sfi]K!9#?^9hV!8PJliII
%?Stg=mZG^errf=R<THc$TbGEc;3_%4VXAIbOTO6q=3S@ek<\gsbh(/MXZOF?RooB8c>6O</oRmMb\d\\S<2qkVH`8R3eTp4]bPC-
%,I>$$VWUDYOk#S.>)hoOoE@IS\cP++<8Bo<NQ30ZFk=]XPZ7MET+@A\9Y]q7YGnW[*_9k$g^B1B@^'!g:>!CBQDoKj9]hE5!BBMk
%$F*us&bkM#I%U^n6gD7)bbp=?.k7'k;_sb$iuGVJURKXQajet!CufJ/G(;/%I8s7[!l`PDKfjTF,@j!2)hf^@5M#ckXebY63B?9J
%eMhP.9og$Z38n>8hEYWPZBS>4IV5)jqhCQ*7;#G-K-nfsV$g2i@2Ajt@03;b1'q%D<_BhS\O]1JK5%Icg7f<DO-Sc&\p=7eK[cfK
%"J9QY@Q,8O(T<f<_6"Nmh%_#FOf6'/3<&n_)\?G^2>SA9^s^\eCE5X1P=`:i?!7Bh1)tfDXpt/^b%[k>_?aQYLubOHqo*pRXlpa>
%l=DCY5UDgZ,9dYkDGP+$Gm1QiFSV#M.>62S$(GChT6lAgrOQ/'_LRZ\'U<:ma9(\5[>:q-KMu2XJG=$5]("=(HZpDFp%rJm(E3;^
%D1u3I=YqSMU'uQu[cLsY*'e+CehDK"f:j,T=M4m'N+,s`;!Op`F5sij+RE1rnbQi#6+`[nY32I<fVUFn&s/pFn.]]&#.F6n%[+bM
%Y!Fh;oQ-\cC:V`DirAqeIX,f2m:'BDX`YM\83KF^K9K9TjArF$cG-oem@-T$\lOTgXR/p:OD7t6/Ek`KSbD_aQ!u'q#aBsF4THj7
%BP>:\gZP!)9bYB]oGE"GU^nt*h5ijbN5Ddb;.fe=p*p*-1rhtEK2-g=V.`:)6_l>6d"'UMZHP\.@NL+RfV*':5WA):WX"kjK's/s
%NEW<JlbVXJb!UD4[rYOI3EC6#qN),-c6cE:4S3''%TG:GNn8KUK^RT7&,akc`siL%i,pd*#OUjKeXcp>?uE0?/2+#RJLd^)qsR"T
%'JeSRjf(:S<USC<;pE4^@3Bj'-_b?)+#Eem).9]MgGEG"`?9SU((1C8F;+Dp;gF`L"R)Q>*$B\((i].65:g$&F<W/6&P&&oc1\&<
%$`$H&5]D']eb6U[&`Za/@><dE;eWpM=J)gY!!O8>6CD9+?Sa>U"ZVO1N*!*"go":k(imL^3Y<b;EcoiH`!P,"LYF;"C$p*.S9iaQ
%&!uc'G!J4]EM#r"$lc5:#KFW]7g@?"cV/N2qaG^;1:,)tqbU.j(,\FLl)%G"C&T73f2%Qi)E>;5RK(ATNnQ'!pYpEbb2[oDdT&4Q
%8-#4:<fbib!Z=]e&2-C>?-Qhm*mLhs,Uj63?/GM/.@'lV7n5SNr"7'VF@aL:H#Qt=O\Hb@aTc58$fBcR],]j*!"FuL6=5P!AFGY.
%J`7tEg1N@^-\G.go<YC-`tSV$;=Ca_Du'B<>Q.$W7lk4"4j3Sp5"EDq)l0r2JE>j.<7@*\;4hD]7(or@d7sQiKP67[G;d=gjgqh;
%_WBCg^8e6T+.SMME!?@!88V\YDKfYC6]2?p^I<i=BBq"TjTeE$+t>V(95+.SSZc&m,^U8^)r/DEluoQtK4q`Qfpc'92(eNOm%b).
%BsY.pW"a^Mp]Za+?;2W=?N:u+kmEjZ<7R3O<2>9(%$Rmf_5t%pNan_*f#6'!G75UTg8!$60n:P7AjMdC(dN!21:>DGUNSBubqX`Z
%r*i`sR$7Xd*!7!,k&"_tk8h%8,nFDnXoZal\f$a8!@75_.YtS=>1Sj(QYQSXl,c9D7#FC(HWugNg"[)U=U?!r8K?Q3&@&_\""_0;
%#+'"@JSDcM0Vi14E=Ohh_F)Xad8pk<c@LM7EraRm4&f8l),E?*!L,EC%->gs*'cQuLO>#$i.Am-E'`n3#cK`g_W!Z)]8o0;#I#N!
%,3Hg(@'L&JmLSq1quWflOSe3nFuIPtd%]FKr;nrZdkWVr07[op/*;!Q39%-6#="*"q!)_tL$fjma57h@"#ij(^]fRdHpR0=\57/S
%1dl1_>*cZ&0NZ"Kh)0^Ym2#LHY(9W+"]:4pT_;E]\%l$M%EAAiC->[4PILg!e\PL!mM`l1<tjE.2#rM)Au?C$_"S2MI]dIN9c>J^
%Y#"#P+eI'O]3PhZ'A@F(7a36)Z;?*1^Tr*B[?EtQ!EFYn2V3a3Tfu0<YHnSuTE8gR?-Yq3[[Z[5k1e[pEZX#iYfsEh!(kLqR,3@;
%V)laFA$KI6LOp`IJ4$dr\Wdd"*')2/4We^9S$8m!0F"1V/L/H%:k9DFdirtBTp6od'bSetk*%ndJ`ilKbP6FV6S4+L?Pb,`X;1I`
%<U$74eg''7s*.ii-tASCQPCZaDjGMYl8]">s1BNY$^#s.ZWoI@4>P$9^:l"!dIN$dMou+e&Q?[F807$qi>g/SquhN!X8kISS;M9@
%B-'UR(c12*p!IM5Ar,ffJiVFQC4>q?$LSU1EFY,hUtM=Sg&,&PK2J7ldZB#RlDKCK8=.h:X&]3KD9L+S5_sJHP_l:\6(!FaF9I)g
%Ws?O7.t?06MR-CpL_b^W0?Ck+LMcU'&XqDY,,1%=BTcTZkXo<oiR#ei!Q<9-Ke6J9aT?"<j-b1b2BQIQ_3Xp0piJh2i]G[=!7Apg
%P*-V4[mG2S$smPs"('A"V6IlCGZ!]+_Rj=AKlA(QLs4kq/?Q/\npOKbrA!KL2'/-c^]YB/WRF:A9O`Il9+>PLF[CsRh3EaJV$9\c
%>mcLU%PK(l(EKGNg]5Spi=Mte78:K&M^qbnMV^bB\mlOF\AXt#?[ak!7Igf]l9S:/GYlNh.!t2%2;jG@eN&!=_T&.XG\>1D(Vi8:
%+o.g=/'q*;=JXEM;NM"n3"jdU64/mb_SSYaSQbXEljs:YN.GiIgg%q;-jj,(T8\eGLI`pL]Y[-W*h65gO\oR7olR059dss,XWT>t
%h?VaW&qal`a@i1_b"JZK+o]Ap_B=:sf8=Aea'#F_])WEdb%TO9270-WfCIo'Nj>O!?j.!nBpVRADhT7dT6A`,i7Y?hj4)9Q<#:IK
%FR=8\W(]9f9`m(/Ru&^`5;q*h-A3WN*&Xup4/>C6\V5?WE%kKk.&/M8@q`Ea5J4P9Ph^XG/+]&W)RUc@'\"?f\[?Y7K)i/&U#s`*
%'`*`D8J.N14+%<U88H;p3\s&nSK])0cAYWiAg9<P%'BAL\G%A7J,SC)Q@R?]dadLPW;-Zr;TR7SXGdaJ1;d1aWN%H@RCrt_IOmG`
%_Ks_f.WLNG.UdIeOq7lqYVFu'[-ZVFm=AP@4MaM>O%7?Zn/BkEj`Y;@Rqfpl*fpCI&r5#9C=S?_M7t3fI\Co\]8!&$]=N@k3[E$7
%$o589.)TT2nqY3.qQ+=.?c)WIBBNsJ%Z<%(?Y'dWYpP+^,VE/bFKlJ6#YVqb3(>\)I#Dr*D+P8cIC.bjm!#snQk.(Y^ZQA!C):[A
%fT.b&NCn:4[*WbHj5`<Sf>$6Sqh6[T9Gu#n7?FL`#8c%DXft5fn+Qmi<lCqV-Vfp0hld=M`kE^tgJB2JpOsNnKL(Qo_JB_LKio@S
%L2Sk?%VlVHriDA*NNf(!JATHaP88>_:ZU3LF)F4gpZpG)NuGA)k7J;gH6U0Z"sUF$0oZ:I2^GI5D:,snIAn!DCuNds5h&nE2#gn)
%rYW![TctZ-H5I'eD-aNHKD*Rp@UT[]94pei:Bm9<dbjXf2`l]UbNr78X)i.hA8jCqhk/X*\TT/UgTMd89u;P"W6EC!aj4RS4P<5M
%*p41<@\<L[r)uI1=l)*;lPIRF<=X'VgCYe"qfY0J2YWC<?9cLTWr%tpPdYrLbr>Z?ZtX('7.f4^,0,OKI\NGU>YeHBAd5s0h6uBr
%cjid#dZXM);4g-E\GE10]?8H$Zde+:j2rqVfIa_0=W(TdX-t_MU'X6AZ%m3P$d3%6F,N?eUte(Vq4NdG,qgQ.LlhV0UrA9fln*oh
%OdhdXah,)^0gE+OY%U'`A:Di_+dEF_8bp5fn,^6a;%-)6KjHDtdWu9o7t3Rm<T*'b"faYl:USMX0,e<S3@`L1_=:Vu-pmlp3(+kr
%W9I=N)hkmBq%B&g>H/WbA/Cd)0SDYm`C##LrZI[pQ0W:CH`!b+(^JL2]]<?eN@*OAC,?5FmhTWCZN8MRTLlM<mjgnsA7,-e"&3s*
%&L'rTS,I5e-D01WLm18kcYlbr>Fd*L#\/kF6^,dcK+>#o$1T33]0YG/=X%iRY0M--m9CC)YVMS10'S:1J-;2LbN$e4:e--J7(27<
%-R9)=E&?!45],E:oq=hSlu)3"_n1a-DIDVT>f6YumP8P+f?JX]#!#L&Ne:dm8%10$"(?dI$nONZ[7l.=06Mko\E9p*>M<t$<Lu29
%,!$l?_FXmO:a$bQ;EC.VaoJNM85$tFe5TE!l[=\hO,b.13A8to<QCu&?Ko[Q6i_FR>V^i!q8.dJf!JE%84`H1KF<.rp4L_F3NGp`
%kEdWdJ(+pXZdGRJ)OI7:[DP0jJg"WOGAPnS#C`IR;]]4b?LK><61Vb?'"!Z?-3M(+O%Y&#F[T?sW`mX/G;U:35%bh#&*^f!@ljc'
%;,smB9\Njs`gUL7p1$\SaqA:srX0;@ok@X]$]EPrpaun!C_KJtI-7HV3Q8K/3t&^^!=Cs_T^a!*e4:Po,1k(LkL-46f/]9LGi%Us
%13`%F8*B"uK,c;0U[O+JeOfrFD-h=r9CC-@)]b*U!(`WmJ64;6DO,k@!Q%YAh1[<.;,!SL$sr>aocu[>_\eDUY9J2+^]=q".)4"c
%T@6jF@0[@(fS)sPiGdH9EY2?N[Ne&.ID8'gF$fn;.#l:akPW6TgieV=T2AU:`UaU=n^uI`D[Ft#9+AqVV'83VkD6Ke8H53VQDQ7(
%5F==G`dQ2c>D3thmEnU@dqDlg)Y%%"Wn`]![^*"TJp\NC;8cuMj,,,Z2'g#ZA#^"te=0LXS__M]+(IYF\W5j9BZA'301okNG\Dp,
%B,^qF2lMBITTM@21SX@QEi1.<JmQc#i=P@V!oYgV@1j-Hq']6-X0+[S[14=U<%ta]F?J8U)r+'q\SS@27mhNeaR7'$Y=*J(OC(A,
%EhRI_p+lD;+9)4?9FjcXeaV*%mRI&c>1+VU7rQG^.Q%A5^Tk%H]cX<g?7&]g\D847.$Z?%Y-GG?=T_B[UFWpgF_V=X)`EJH4\sJs
%+)E'7Rc0edoeFN5VKB3Z0*#H!62ZpdeFZ8h5_A]NbPLXoP4F5YOCTDI.9K1VL_00Nl7Ft+dLRjA2crY.2"Sb.d4Xpk-oL/$MU$Q*
%.dWdLKQYfQa+6a<7e2]aR4^fuH@5I[ONW<V"VeE2r#>_G,)n?k!(RS^Ag?ONF?R(4^R-n>(!!IA'_m'[H44'b`85F!j\/jr;Fsnd
%GVDd`os+LJ*9OD$*p#jYq^D:`Z]-K9*-H[kKmCOi7tL3"%"q.mF[djIb9"PEoag97S-2>(^+Y<Pa'[@>eX*.*/^7r'`9t:hL2+6.
%`32%oS8mj1mf]SickB715\q/oW2o<I+c[C,U.GBFbkWEd3@i&%#5goWql00P\OXM@UL..(?5-fS%)SJF=@C.h&&NtPe:=j?:S.I!
%jJmdpE=j]>6FW9Y,.81-%,"lr`h@_pTe4e]po^BuLqbM=gh`^/L2gjmG#Op;:Jb>Ni@B:#^N]VKP7E37TeW@_BU#*?J$MIRPSqi&
%]<k<JjQ_-R\&M_cVN91gY=l6XaTeh.JM3?,AU69X2Dt]4WC,eZ1XM`j#Ul@WS#T$dd=i/nG(>CCK,It1&VMh)=YGfo_CY"?!0Y'Z
%P]+&0+<mo[<E@D_GLU?4`o7V)m8&IPh[HU=6`De00n%,@jg"J=*")&2Pl+rD8CcH,Jp?\F.,Zrd=&]qq"U6[MZ_kFKNp-%sX^nIA
%U5ZNp0UCi:eW`Q';U-?c%E7`QQ%N^PV*cG^L!\'8D\F#.qtlKSZEd/#J/TsVX=2Ab5a:n^X(VY_f;J*j$p$`S:+@Kh-_JOI_6G%M
%1TS<kbKq+;h+oL*XLI]GQ./U*EpuW+qgsP*POi'M"4)oSj%]f6m\5D1D('uB8dcm!hR*euKrp&MJM+<+#0UMI(/Y/L#T!tR\THD:
%-H:b*'+\6?BAmA03suZk)cA3O(/5X[PqLI[WR6Daa64F<T9Kom<80ULN9q'6k=,O93EA9h_/[:)Pd3=qGg#^7Wr3ne$h6T56r105
%1'L:](7\ZD*CEqsGp*28[bQE6aP&)&9soXCA[1+tk[L4jm1NILfQXHt\"%>nE9P8M3/mg].71h5&3ZW$.[Ib<BP?$BOQR;kQU4s>
%U$]>+K3OOlBaR7Y"#a$d$LgP\dFfItF0$\l'FXThR?F?Gdj83(`9ZsGY6-7TaW[#56+`?t"k3l:,?PSgoR1JS%BXGNf=hd?c[rlm
%;4S2Yb&31r$l14(*+qm5_>EqEWp&JT?:+<mf*M/i)Aqduf@Ld599`L;Y,/!:I_T@+m\8=Z)bTP%%O"j_(n=?"6AZnDquC]A]q%T+
%"0f4&^m-QPNl%N;<=R&d4PEnPq\JJDDPVXeJ#kD"g#G3H-)CGEIgn:-qdgo5]0ufk?2/3B)qYUWnK3pYSg=&QH-fs[LoB#L)D*Bu
%g&Tm72UtZ1BoLHM;#XqQ,0/[8Aj3d^aFTA6,G<(V&A]\V&HGNO*)pgpV)ck%jU-Ki&(E`+oMdZOWg`QdH8s";k(:@GW<n)13*3\*
%+ptMJ=:H2WJX>TECQ,$Y;7@omF@kg0&$j6%2+&Fp<_j!0.N0+%QUkL)3g1OZ1E1Ko)]%m3:JuZo6=%_uo3Fl((.V>*+-;`-p-%EF
%X=P@#(j#V"n1D[MqNHZc;nTnVO9;%*rc&MBKVGITG8]AS8Im6'@oB3V/AK`'&mYX51u=@bbm<RVmLUT!FEA"(1R#t-n$tOk5$Q"k
%-^@+1T;0l'/kKqh&DjNh)RRHg]=*@P\1ikbjQ\F$S+Dp7if;e)dInFNq>>>)RLA.WC!Oj3'C,qs='Ga;nO[n5DpAbo\bVB/3do@q
%^a@lP*V*Kuj,+b`&n;,FEht:5J:M6>)\rec$Mi3[@JT/)D[mF`=FqUK98V#Iqk.kOl5:@`0G$7qT,UZX@ae@$4JkJ((=t`\LIW5.
%Sh&NHjNn6S]\<4T1mD+p258b$Y!uBD>&N[bntK),eN-rr%&?Vh+?B)icqo46pn?-(7b@rZ$jgG']8gX9f)#ZXA<12Y,XqfjjQQ!I
%@?ZCu&`RG68SgWT>>V;nI9nQqWj[RH!`Z72I/jk."OZmjUJ!pG!NFg_Ce:Spdke<5RI^*40W+Cj+LZ3]O@A1JcC&"Kco$a:l5aG3
%WeN9,o]rTEcrH*9,iPM?+XCk21rdtifEddC%5aurH2>tAWhrffC,gP)a#/ZP25J`MHk9kG4W5(jZ@S5Fb1s@n^;KXcbSHf'/N%Da
%+;Fn:mR!:\`QU4ViK*`.SWVqi?Xk)>D!h>O[4"[m84:uj`IZ]'R^R*9EBF(FU;=*r?Ln7NfdN+gdtMG$jmN,p9EZp[B9F]0#N@K`
%k#qJN4]n#YHNHUH%Qhrk``)\Me"SW`qnj8)*iD%21>Gj"/]&t3i.Bb,W`d'Y%$tf+#\]$5`@a^-mma6IR]!l8BG'FlqaQ]Q;M8s6
%rO+9%keHSUf<7j2"PG"^4?oW$)Uk02\u&Q[@KJTYG\S@`2XNN[0cuLCc+d,ajElBM&5KA_BLBMs6:cU18I)p'@$s]^!/,St5h^&%
%+MJ599=l;4Wc\tAHncc.nEc7N.pck_KB%-WaVti^6T`4fS+X<P%ta+$?Sk+'DW^!8>jgbd_qFAK&_0M:@6)m.%[:_9TTHAYFfEQ?
%171-:OYdmT=_'mM]\MN7<bj[X[5BS1<qK\oSb6:5$t209/^pK57#2VL#\Bua@daYmL'7Li5>eF_KVUpX+@HbPP0R&3kqD`<e/oC0
%k^$HSJ)V:Miack&"jP#UmbVV`[O9b$MU(C<[Sh"lW[Il!bdoe#TSYh`!l!j12+/k2F8>ZX>1Fu%Fb#Ik*t\s=K1o8QW%C%QO\,\'
%D)FE3F?$*l6%!WTo*#*("513\mQoOuq0f$a/V')M0F5geUW?K'NBo5n&tQHq(d?W%mTP=D[EX0%9lMB:Ip4)V8D;knhi07fHO<;Q
%cN,a8-.Dk7Zs9(%a$Xk^o/%-7P0LfJT*o-9`&rYHS^ULF1A_#CWml;*'gVYR5DNM0eb[=rB]:O*)gm62^E2!>"A$:/h`[p7bQS^.
%O-&kK+Rg-i'04;!3ncc7*!ZU%KTA3**bisBr%+1!GS\hZm]:jWpM?$hn8+tO`jP.1hUbP,#gS#1=$hoej.CpoB,i<tW<l.Y1[kui
%BHL&&3n8jX0u^i@:me*>+NSc,3_6QSbTr?[WQTJ'(_)iM6u96I5lapL;@!QI1\=t1Z%=/T-I[e$05>#k=,W<eG7iHJ4O!D)'2C&B
%f1%,UO[eKgCsG`h:n_g_1Gn2(*J8Z`DH5a=U%kFY<^p7(gSdRBA4V8X*!(`,!UA+>kCI;relO__)[?H_OG'E2_6`qG0Xr8j.i7J`
%je*LFn;s>dOIX6KbLoF7P73J;rBpG(H@ff]iO;CpZ^dkm4!6,R%!jRicc3qeP,c$Kg62-XdU>*cM.`Yf=m1)F@?5Gc2\@rgUiN$=
%Y#=n?6p"kRg\'L/3`K8Zaog)'@">V73md#`T8l"7gm:YQLR'[V@8f@'P+HW2R>ka*IA0?!L(^Kr_2Ju!G_KGee:rSt-jV#[^>:kY
%2V0fCXfZ9L'TlHI26Y<k;hGb$+;_E>[U2uJ/$rs_?Z_N%*^[t:=]E0B*(AsU>MF$G0(L7\`T`,/-Fq09$,WK[k/WHSXM.4n,RDap
%D,E"<[8,/KpH470'l..92QJp".1]q_<>.c]j;O$g!ZGjdNh)&CqQBIH`HeJJNf[-np!@85FD9EV7q4"*6tAir)[4@WKN(Z3Q&BrS
%(M-$WC4hh.,5U1De#W&PNW(4$%V^%dcDXb&\-B(fm/jDYl^.2p06IRlp^jOb8c!]$>QdD6bji]'+/sA:F1YU`g$L(,>$Qho#jpL#
%VHnTdW$3*B35'tkqfe_dGf%.Vb,(">-DIm?8R,KtP``JA[JMsnYs[,D7J%SQK=^"*KD6pffu2u9dln;6:UZn-<l#ZppY&"q(>^IN
%k:\hRTI'X_TL:7j\sV-.oo4n#,XZ^PhQJ,J,)L;u(@V(gSO"BC:ca$"5_+eg'1>eNhH!A>P+U]m+)u`8D5"3i8E0r4=*$dUea2L^
%s(mW=,l1auC!nBr@d!PD^\KM)o.0A_ep5W/o_b5_I2qutP#(R`V16Ilk:X`&;aQ^XiM9jJM[PRF'UA[$L&u\h7tp.Fr.%I[$trJs
%02rYP0Sl^e@5^E.LDs@JFk#E%1+;k/N`]"iWSrJ7ODF@eeX=1e:jujj`"jQ@-A^ApUTY[[Hs\9S.<X8!-uEFHUlq##[2k4`m]E;q
%;P9o".&t%\<>=KZ[5_]L*,)?F3M>!J^Z\"pbCBiO/ScL#ItBF]0c6_k!ZR[V;ZoA8D"IP\/8G@L">B)nW7LJ35_sdaioZ&ORJVFe
%>Ph\b/Md!*k@UP+!'VT\M3nuQ;;.d&4e[fC\KT_n"/[O+%.@!!U5X=6_f[B"$coSkq`UKjd]/bp_u*t'.hHV1/<pq73Y,7c_RgrX
%#%DfO9/\Ak>tlsFdA68m5j7_I8=MWX]7)RCF``^e@3atp7)X!>"6.HV;jK%fK?N>jDtc\f8%;Y4PJh]08)Jo!-@:Hu&IDc<'rLuP
%Uq1CgY&3!G5-j^m[^!nQK*$?b6edGeF:7!QYL@e[+/kEBE0O2BHD@fPg'9Holm'Z1p$YZjlZnQ-Yc<%*KYAd.oR3E*r*LQS5DLOH
%kJl-)KPilSZ3d\uSZVHena'u&4tjW[[SEPIn*>*Sq#4(9!%u20'+o?$`!$M:L]`IFiL9puc-L-#O^Z,9S5a'mNrMo%V&W]:67&Tt
%cZl;11o75#!<#h9$At771.13]&WAYC"Q^*n_A&P^;iJm;@i#TfaS#/!!F!^Yn#t>#b/YV0nr)Y';)#LV]sE-KF0ka[0#:ptVrgW+
%(o"a`f;Eaq3J1#MY.Oo?KI3YK#2L*1LVtmWgZ#m)F"T(on0\7mndKP%<j!OnT'REgl'27[n#qIe^H,n8*6>%+d(&rh.Q_\UnbkPU
%M;+*N+_L0:h8e\po6C)cAmZ!W*6<@(TGQ-r</!.2Qr_EY.d]1?8_DIq,G(5RAT_qOg%TL8F#Y7iC"R"`P4"#ZU)HjD/)8N;qC8+Q
%?EIck2@%'H))Z!Z^+OH%`$HWL.`HeE8K^O5H=rG#^i4'6ac=L=f8Yh^GZh?Di/f]KIu`%sF`9r3UTW0cbq,Zu<H_s2@mHmE`@,?I
%!%kW^doR($P.^6&7HrT?YN$H**a:Eq-DSY=`0#dWj054@Dtl5$O<IpX/:p1!J8:N&66AVDJ7q[YdN/dH[$uGT`m%JX+1!H,ERN'7
%cTQK]b+4hDZH`*Ug.ce:=[_ok3,tIP@clq@R%[\pO3d&$C7WoM[aJk0j$;dtI?Ae3$Xb?XIgO?V#d=$tM)&ZHOBVKS^u9`6=l*h/
%R^D^T'LcZQlk5s(`35#dIQImY\e>c!mg#[NM+c&P6-G"*/JCF6X.$1\Gn(^fHX,jjfbmJdW+5bZgUner34s,sb!BW;$FS>FZOsK$
%G<BpN\Gm4+lN$eS!pDAi7C%\r+`18"`IkB1[RMj'E<F$R`so#1jRmToUG2`lpVXia4SiQ]BRIEC*.XhTV[HWdA5_!4\sRW8Pd@MY
%7*`AUj)PoM#VAtarB[RRm)g^@lrB)ZZ1ni_DX,5p#IVmKCT49)k6>d%;NX.'>f!86af&"!RiJI"$51a1oB_g0M@>BNap1>TcM]AY
%[!Nf8%r.M[s,+o^0Y3hks1phgIc'fH/R]uS`daXb@5Cil#CmqlF;QM)M\,,i:0;MX!1L>2*WQ7@H:_ZU!!/=$V'H$d5f(`gcqDlG
%W/<m]kj$%5Z<"H$XL5.%`[,CPlh)9*h^VW]5n8#)I7J@7!4bp_!1CmQBFuB>Vu.82!d'nf>LXkJ]@rTX"8^(j*mWB`,HL0[5p*('
%)Wb,i<XIYJ*7/GeC^au1gBOIPEMt;i'!AhWi4dH0nMqaS+<G^eGMba*=,Eru>L:dkrAko+qbgpiS#:kUC(1W(UN:$bSRL'9jVodL
%Q,\<h^m_H"G2Y^JlQT]Vnf#9?BZ\<lCJYOSI(nI+WQ%-CH-1'rB*TASTmR[5MG!^CZX$9=ZbiRt&)[_KiL;0gCp6`hJ55bg;1_Co
%H^M%5dPQEn6;+1'Y^X?:>qJt^Mquf?#c!jW7*M]e<r<`J+d2m-)L05TlLLH2I!O"R_XaA.Ftmooo*Q8?Y1MsE7)P&aWZ,tb&^Xou
%^/9>g(rR16bU1u1d8,&6G)LPF^!:4XQ-p^eVLHqQf$(UmS/83$IO]k]aZT9.4^aW=gR*CTLR]BuB)Y488s9(/[kp2<7Mj5E#%uD)
%1XX>Sc6f(t=l`XDqqLaf_#ioI]c>IDB(6dO403fo#iFGpVR@2=`PX4NdYoCLc+ZRsbtRjc*[ql2$aSSP@'hatW0f!Z(bRb>aTPQ6
%RC$b.kL3\.4DPKCca-aD5q[)/&APQHC<Lg^g!LMjm?TW=2'YAt\AE$iAqj$@bLd6_O@Fod1G6bmblJ:Ijr:/53=KAs8=3,u=kF9C
%R\=jof"NB(ctG]R(9X<Hf#Lcg2g[=_].JWW2mZRAC5]e$K&#3&csU"r)<p-U\5=_5#:7m.g4I<#Hp_La^/29t?RY<df,.t8^*_ki
%bVaCL2]jm/RkIV)c"G/Xknt7=jQ>U2"YNlINH2SP2`-Cl(\_ob1Rj8irEA+HdMt)7au<k"d"T%XFJH]@iZOuRI.P4Y3<kE5$0I#M
%#oTY9V'/f'L+"A\cQ$IP/^m&e0e![\Ag1Dk.YC1B4kh`UrZH>*5ggtNK&f8_XN8o&]dlN\Le;2Qd=Mm^,fh8u'E+3`>t*.S8gU/=
%A]ZdSB$5"Fj@Jc5G1*:#el0WO'Pe#ti-_[/8gY.EpDciVaPJu+6aYAWQ?B+:"D,[b5]s0-&2JVMh9*$b%e8@(4e(Ja"8S)e,u!SL
%1gG)k55Noh1;=!$iDSG>&=^N=lFOSj-Og5Kq[c'`!]Cn#kWK;Od2IV1ngN#]5kV=X[PJSIq=B#MT%aRl#F)(i[MtI--]>]SBKB&N
%6._F6.UeFH7+)U0=d(]ao`o'R&/ns$$QfS,!&Cd.5El26'[J6ldO\>E_cfCYJK6!e3nku<h/(u>eKe1NH\`<)KG^f,c"9S\6V8cT
%R63UAV73Bg]1XPnAVkClD0Cmq8Qt_Cj7Y)..S[GSZ,@qufuG-UF$@Wd25u#?K/':<9>r8F>mfHQ]*DnZfD?4e9+S38dNs1%ZU)b]
%JP,L.`bS<*XUOYd`\C.m*+UfM0?MKFe1<F58Wf&i)hs0ti=0Je.QIR)pGo$>D:ndY3Rlt)7N@oVmp4I*5YMR4P?)F*6>7tU6lO3R
%8<c2\&@O=\:2,;k?7PCO_ZaIo6h9h^;2!6<@31MpEiVZW3aoIrjJWiHJ(XKSRt(BIrg"M/[6(?d,pRl%+%rBZY')MI--@)[KF'eq
%%L$Tt&c9cY\P3AQP9Tp,HZjU#[$ihs^@pbVB9RBmUgOE'S;=W`d"I5jOCWfL4'9+Pml&qX-#ImX0NFXEKr*)t"<OApMB\K8(%H^I
%Lq]fCZAcVsd/&AU(Wa=sp^cYcToG_G7eeg]OVC^=)IQ4Fl$ZYbZmS>+:KUJ!A!O<"^@\q>/>UL5#WE!`Qd7SdrGqTn?:9TQ>jZiT
%C2]j<CPYhW=f6%3('C$N:(CiWBYQO!_"%qXh>=[-B^](<KVhMT3c4+XG,2MAZ,Y$>rb"$Uq:j2T"\?+'h_eBTi-h:o04tioW\^,8
%I:q8/VW[!0R*R6MW^"\ga5\_NSY<C`nZ89UnjDY'km-t[KYMu-q^_.":e?``;3.EKa@&:L@Tb'S@Q8KhF$@'0AOR,4oM#J,p0QOW
%7q^]qPlGK4[0S,L;SFf+TnZq3+a0,T;g47C!CKX_c_jPWS=cP8q)#i._@"9<>,p)*#EbDuKO[6ubf+jel`noOJr$X++r&[B*6>iq
%WPhV9ReI9F&tUh*U!I8dL7Cj4`gome]"f+&]REaK[-b+A86(e4SZMkIk[IBs,-8'MKZ,5;R@#eDh?2.L)kgi2!(h6%Y&C(V%pn:u
%ZC_H)1J)@eU+@#[aFo?m9h>pX0N64<Op]&9(jgVJ'#`kT(AAk])#O.ldUS0..m>qh9;qb,'8R4'_HKVIKsjDo4js6F<TaTU%$3<g
%,qEEPfBCr9*"_FEBbZc\nfSmGdh2hFfiODI1>U]dJ_VFelF<f1b*J`S\e/Rb%`ANfF7L=#'Wq*W\qUYGZZ3,4I#1/e`?r=CK5,d8
%]3fGN`BH\CXA*OsN@<[CW^I.=?SmVTe\:>S9`e;r1n$fa`*$iN8OU(g0HZ)`(&_2QOXQ"I>mHfdiJKf`C!r_>"&0Quee)STh-WCC
%.o^/^@pKTlm<QsKWsZ7HG8.*&nD,?YMM'E=!aRVN0Ytt*Dp:h^=@BEhOZ4smG-5a43#D:tUL8!8,RtO9bOq&Y:k"Akh!dAIad.:8
%#W[/M']1i]Z!TV,h\=e;!>JgVG$YX<ir6)qUd4>*DCG1Wgf8[_]nMLq.Hq#KrN^cfJSG_@b0^,><BrtHgJ#^S5ei0=<'telUjN?B
%!QOQ3phRS(G_@&p'dJS<*b?31XP+bH5?EV*7_,H3\Z;9T,F_AKSRGc;0r9,iIK^r?S'amcX#T9=eqTtQI,'64ZsP$$JBPELMD/Gb
%X46neR/8_V8HbcUUsRsE3$C1u2UdL[,nSG@)g#^K]"\9/gi2\2XW">'"t_3MoF"6-"`=aIB04OGCQ/E:[7'8Ad*d9'CDR$7YR\Z/
%'LAF1N&jX4O>AS!pi#\%klReD.\%UlD%(@[[=-&NOIr37>MfMLVW9$%)5s]L>qI^o[<FCL/PAJn[R-'&IErYUR$B#$=p<dbQ6bub
%p?jWP]`3FG3"PsFK%IPo+BtZCai4Tg6i)b_;dV(b!=DV&Xt>ARbd[F/7qV&nft!,,]2e8:O8bZpTC(jK2I5,\7isGfXD)d:5&,PE
%I%?:_7+/].&V=LF%Y4t,C:MZ[ZZ,&!rD]@)X],FFYo*P&N5YZO=?h+:41qhu*Y&Crnm*eW;$i7?q(f.MX`>I5Qdai^9kmAN`Z86W
%S)tNA;W&m=HG)*noH5QiT2^\3?tLhIqnd;MVM#UF3kT3tCi$nDFAk+]E0Icn<c,6AAqEa^(0-/9Gg<'8BS@IA>$Gl<^m,ER@)75Y
%oh_sU%\jb.2q+s!XEhn'Yn<bLBenGMB^c:GC-='HHoIb,jn2kf__Ltl`S_Pj1:gW.Os9J"rb"-A(hT/.MX0HZXjXDF4Q))`4R[CV
%]D56W/&a><<p=-gO*_\1WJmJg(/_U^"ER4,Z(P<mP=f[^[D?9Z#M2VV6++4K\O3URF.1X=MUJMBLcYqY.Te#QHrmt"I-ONA&eB#9
%ZBtKH.-gb(V6,9BYbjhB26E$NL2bA5cD'lX9'RBu7>hrObZ,+1lXN>h.$gMkjh0]nBj$GY_&66]0t\^IBbn#`:OC[pZ,f_I'$52n
%lb1G!nmTG2SG5e_k52?N8^-Qi+<#\.9f(oPV=20t8h5oP\0-R+ZkQfq<Q7K0B;E1;WnCW[SPFIcG>hkV&mQ%!rHeoU[j^(c]TQP^
%.+%O<]q>V@aWO`fjm!5GgMJ"1Vba4913-d+f=2"lWCsQT3=u1_bPi=pjq*9-/2MnN]$ptW[+704p7VLdZPm@VFY+`dS*'qdU!m3e
%ZeoM\0cgSeZ6Xhjbg--=i>[.d^Gc#_P7429JM"ifoGIMT"Y/rTBH.OL>qqn*.MT<h>r[X"T>!SWeb&$L3S4YPRa*^6iM#=!ko[8@
%1m\tS5XAa\?]Z3,/sKqjhDb;P%(qbMU"VV.B^Z<sRc*_%hJ(Vd,kZ6Bh9GCj;m5fG8L-m.N)38-V]CY>%MQ,;(PX8ZZPudGa=R>D
%FF[\V2UNda77Ypc<&kj#mbDMIg)fED-7CXkfKpm2PY3HUh7(q5ZKQ:kG,X@cM\>"l%DpN$3cD0Eki$Dhke$2"RTTp#.;=SV\#7/Z
%&o&h/bBG,0[@:?]Tl*>.UsB$L5Tt9%WOFlK>c_?p!O&Q;gp:I5k5]?PgDeMT1F"s[$:dBTmB&=T,\B.PhV0S4<h>BpQ\l(hLe>L`
%4Ar5;-&^>f1tE4d#6McNW#f;Yp(biha_JB!%?)5=qcab-YiR<@nd>qBkpDdj,W1Es\R;.<2Ge9M"\5KWjpHJTD.kmnlmY2t6lOb(
%>3XKeg.5^^W8"V)Klp<2X2^HtPj+.BiLTB\Rl/I-LD=NHFo3r--piK=#.-qu[hE66Y)72\nVn<'!3:&Ne)-IG,s6`a#]#(/NY'7m
%ORc4hV#,e1QqbsG:(5-OWN*\/:5<_j8m`EZEJr2VU?J_TEJiq2%+a`s@bfN$ehh>;UEr5UWBm]6r<(GF*KLl^G-rFYCT+YH1^6BO
%lJSq^D>%O"qcd:jj8+Pp:TM%HH]_YoM+:e8?4Z`gd.?&8S(TJ390.uN#ea]]m\8=Z)bTP%Jmq(uF%42KPs-E)`CWK/E?oeQVUAg<
%pcTbA%-JF-+mY;W2R;H*Tp?LlF.!A.WU;bLO-"%IB]:+1l%U)tlpe*(rW10`Ue)7"9!Z;r0)bm7U_t!K*b!t[qSHSujoL*cirWqB
%!7HYA_GE)j<6NDbipWT-m#%*j\"Nb.CM3B^a`3j@H\)0OF!HbhY;>#+D-tE;!PsMXO:^6)c"'ZSk?Wel-H?(6k'<u,lfiK1(Ofou
%p?lip=*7U=bk+DJ(%%m;ET(:WSJ"Ar_]`"Q$@9js!@TBiN/.N+/Ki6BUapoD]M,S'`c!KV2M;GCet=_T4I4XM>AV+dqpT3IV0S**
%j!J(#=5H@#G!S;Om-9?'E;)=VD<h5?ceLVXQ,=LSAP99rU3ptmH3T&g;HpLQfTDoQdQ_tRVqT$/2=$U=^QX'K[EDGi]"#]OR]_Qg
%?&E?*Uj.6N;Mh.!`Qq=h4JGr>1ZHn<R'RAHdFE<@JQ?%L"e%Rk+6HZra]pb!H7t#milT%Fj*:c]+*fHbks`XH7<cr&OU+BkCshDV
%&Vk_c*AK,Jd,`S1#NQZ0U;\a<&i/!L78gd5SdE$B2M(eis*Rs&UDL&(<$%:uIXu`4oL,0S@&f$l?#8c2[4P<RgHNN>W;,g4kVGEj
%S:L9ghtnheFKp&Yh(#aqpu]oo\?[k`9OZBMS/ou[V8T,l=O_YaDr'.hkrHAf!Eh*.))M/.VL<e2ECf<AD3/4;=L-sFN<6+i/7]VS
%NFai6E**Z\*2M6-F0quN6E4UrpOX]'YB8[55<q]+#-$'VjNR^b>F["`rm&>N?>"Q"g^UDt)7Ag?\l=5)rlO7^`CsmQIG^W:<DU!V
%Ut!k7jn$Aa[4.%SG5u5-na"IBNl0q6rkJ9%EQM@m<gFQgBk4^`o''A5n1hac+WnBQ`sg;"+eudWgURS+=.n5Y&"NLSdtN>Mj1#Kf
%VlJHg9E#LS^1)<.`5tQARocmlmG<klq+ju!=RNDSC/3osIuuL\Y%-A(-a`f`=a'?u"en7ZleeN$;ou_;HVZR^`2;NLqTFsTpJF6E
%aUtZCim(Unm,)kA<gbVV@[@i$IY+6u"l;\s'F+d7Za*^8A4'J?AqpK9+2eE(4P8c/@X#fdj:7rCj"g^HNk7Q8nErZV/H37Bf`Q,#
%+cs[IY.Kk5njI`5#01l@j2ku=+D!@JHR,6"B6DOmRs9%%RNC<FaPGf:KNOrnZGn#Bg5&`O/6VKa(jO_H_]Qn89g`aO%(HiDrHiA#
%IfHTBp#Scb<b;lOI2$;l@V41\mi@)qoOp<A.Gth2H":C&h([]&=*6#lh6+0c\PSQ]'!>rPn2/[Eqtcf:p]'dF(]S92nMhS?h\oC!
%cZ&\$n/hnARHXPs,('BM1mjC:?%>!N"kb0*BL6H!>h$e08qYSr4`NjJkOTC_W1^=Fs,PIB;Br!E_QWH'PWD)r?CSl`$@'%M9?W9b
%``AD.e9+gfJtsTMNgsF$@P+;+p70`=l54LS!sojN/e+?ac_4qgIZn7-i(f&=-43Amql37&H#4raBWLsBVr#?k&pD@=L^fcdRKn:l
%S'NgV`Z(?6Otr4K;K7R$6"rcahX;X@7Yg1:`7E1^OO32sl%m-1Z[$")D3HOfY,P%'(pj2Mf%E0Jc[V<uJr7BL,Ig%7aDF$_ZEOaV
%5tGeWq9XfcE)D>.n.Vpa%aSfHiD\GYWX_6PChHB1.:sEj6@dQRBN/,f7DhOZe>DFGG3Nqpi$</.Qu-Zbn1`MO*7HTN=4"6B@5"-h
%%O;hPq903VgsGGlQ<0Gdr!aj(/iOPPr1jfOQ3U+#?Z<Q&=?WMK@V:rZ3$H5""QX3-#.PJ@4:`H8/Qr![l+%g<ONWmL:?nehP>K"G
%RC0ma4D+(cF7-Q(>IMko@G-"P)q!?KH]#6Y#74/hngE.QialP?'X&2@SX;4Af31GJ9q[su"biA53\b5Ib"\JXc<be_]]6"^j\umb
%O"9f.DLNh\]A'crE0/*ch4-1'6<O&eC<%HPjiY$rBg="7k3_OIKqpRA*\9,hQLqb-h*HOe[B^1-mg>Q4j"q-?;^UN?UWDsu^S:.D
%P=BIpQ1i$<@;!!Q)2N(r1.n(H+jC;gZS5@7&pq2N&52L1<Pg.qK]]5@Jp[WOH2C$jS*7EONiNYTfb\s^i9B'J#QJ&]j'@Yr6/f0Y
%;[?(AL9`J/Rr'akF,Mt]_=A2U"OY:KKbO#`d:EH:7oYB,q^jX:*%;?5JBe=XC3@IhE)/.Cmj?pq(L`/"CXQ7s-EX]7WNF4;"oMI5
%8HNnQE;j:uE8'dPZ5llp)hL+*YF3\Z7\ig_YdB&+fRcU1Ze)JA%R+J/V^[ut;:/iW^KME9Mrq?/,$PT<PV_AGQEB2W\C3a!f"qrh
%Q:6%;-B0qh0g!KEW`-X-i5KmuCGq"C)I>`!!8QLn1"$^K:D82u>nc:>B=d%<3b0k/eIL(=BGe$upE'T+6kI#[R.#0*o?_YRn\nal
%2H<jBHJ[I-DP$KB_8?1+ZTg7D\=d=.O]hCfm"4HI\SsRRqbcj#nc#n.!mu')m[gaL8*3Q1c!IFuds3g\o7.=O:$r98_CkLAf`N-0
%+K!`/,)N""oB\XL[Gll(r7WA?/:I,:A-)R)[LO'5qHP&.kO/fQ*&kLl4lZ#ISZ]2H3[$.'d*CG^m'<3-j*W@i=[]h?-^V>iph+Ek
%@Z/;?;e(\j#N(hV2DoC?G=A,Te*O\@#j@>MF'MK;Ch1Q*+B%CjbSFUK:!q?`fJi-C%$D?"e68[Ac).t18-?9fP-SD@2Q9hB)L=@-
%h:!p<SJYt^c@3![O,DL!Jtf`C-)4P&9?T0hSr;D6Zb:&lEU`/bSZnKYJU*Jjp-f7tg"m=A*>rl8?#f5D$3_oc]f?i9D5W2-FnQsp
%3a+oR($CXblHQ4HY@f3=:3sB.DmB+Td/6jr%O"skJR2uSjXjE-CHFDe0MIjXRTCL'@S;&0LKqJ5@f.kAg)h@<O7pPt)NN6mqZ[eA
%_>=3K*#'-/C[CGH6Vkr"73#qW(r*%/:iG6a]mYO1iBg$IWJa$FZcJ#iM:+Z0V."i'nATQSKNh#p1n%I_%bm!o]00UkXNnK2QKJ,^
%($>s*ea'.iDkikK)f9b63eV$L3lj@_/8pq+h--%s$c=gm17eNlk':Lsf!Q58h4q2uqIEnXff<]!&*=<N<^Rc9S3ea+G.-.pGN,N-
%XZQ?F?e%3s13`E`c&KTOe^LlQSLWKcgR:0fA6kFGV,`sC:";9c/hQ+im([\<Ni@ALe=nYV@HA81;I;uO3u2T^7.4SI1&.*P2]):F
%cc$;N0P:T>79puQAT=aVN$llY^0N4pU[7+JSP,Uu>[?:22@,gtOGWd?LcX^+(8+VV0k">Y[X1tr.M4;BXXKB8UKK3O1CndPBqBU+
%`^g>mD^W!^3)fD,4)t87\VTid3@:mBdag1>$DSO7(#LJ'b!@E9fVD:i1V)JD".BeK/.q'QPBfeKKnYl7A(g(UGds)@)'N$hMA+"Q
%4@6]c+Ejg8Ot#fW4aA)@ZHs\1[k7>$?Bl7!2F\d$%H<lq]=gK%+<t>TLE<S8jH\VO1X>2r</_J3Fpt[gE_B2BM/1+*_@raqT_#KG
%8VI:m`=FJ60HV3AZ/*o!-f\s5o6ZF(qJ![FfGL!bfRVZ`<]Z')MZGWM7>.oP,3EW(+[NWM!5H*BI`=5/oJ$ePGl0&^?`V1o:8;:H
%A[,,)fSRX;a$-X"s-<t8I[=-nJ*\O66"M+C:):HF&biUQ-\RS5bFU2d=I*RLl\I]-/<EP'p8Q@TP+km!b`u+`U9'>PYI9>[`i7h*
%H)P'%-9eF;4<5qRM&!MagqoGaN;;agqPp.ILW>VW=#HpO!-)PVpX@'_q,](8$DMN;'D&d<k:o!YEn$R<BQ)n'@_#=0-u5U-X.A6R
%j&0e_a/*Y0Z>*&^ePgVb((MhCOg]!=1q1f&d`Jf.WjpH.25snPSV8$M/DOnWXsm54[8H5><cQtUea)G/[*;rBEASotat:%`E2":#
%m:Pt1Gr6MFadp`DH4.]Qn=Ab*X%0mlf>FqWb>"gm(AUnZ3]`oLDUOjJcKX0K3a"M&<d_?V6_Zr(=!\_NXntt3#FRkUj<L0Vr/@Hr
%J^Cc<[h'>bh@4c6n=W<':[bX>dA-!9RtZ0jmuNQi'-1M4XGb_L??Q^faJ'+>HT*tpCDAldnA)%RPXJS&ZQ9o[0ePkl,8?[RG=-*:
%hGL.*0V=O4Y(r>0n!],eMrAE'SR1m;dT"JWXRm6LZ>W623\sg[U_6B51n!\(@:bWX7B;:R]89iaHjE=i"qQ#=)H$4&3.9'GU.RJr
%C*U)KOXVn$-[HdRQaZ/)'B_5*)pfh+=B&PPV1a%$l&<5o,s5TO\CL]"Y<4*A<+8__'!#<3"r]YRhIo.?;.LA?3n^-)S;"4G[Bk.$
%Z"V^,[N"2ZMOCqR['`A*E]KV&=+91BZX(OH=gS"uoh+E0N>\"N,3aE^+H\Q^WS8\p29Vh"20%3NogLd5p"33p*g[m"$Ocm5I:o46
%2mdrlbcOOi;KiJ/Sq:>13-P-<\TM!BQhJ>Y=kk4\G!AP'AbZhjW'o=Cd:c&<4\GT$h-h3:2q_S9]os>\bKatK0c$39A$S=5HRI4Q
%MT#5+-ZNj5e[n9dZ<"`Bl"I1qP\QJp?(/-4]VjUL0)PQTeR@WqE4]T_9"pjRAO6R]SV[Qq#rfT=]WTn^2Hs#AZ\fGT1GPEb1r>EV
%L$=bmXVNEVALV@T'me\6=>lgjkAf&I\-PXSi'^u9(CM0ZQmT^/1[]$XK?Pr#"A'+pZ6Z^kfG>6[8#@$$S)&5jC'>R0\RsHF)ciq_
%$&jM=dQ%Va*sJu;e\uRUO<S'Ph&,HecJUsorLI9M1BZX`-*f.H\b31Y]X:/=`t&7q`7+"W>l8?oD,tWM%@^osi_f<A!\HLO@\8l$
%CX<^/]rd*QLpQGfBmH<c+I%\Y1l*^2Y=<A7^+eO<L09J0ahY,:"jdPm(7NK;gtqfDJm!_b:F(&Yp(aX<HAn)"WjocSF1mc<q^J(4
%:+MpS]:H3Fa)]Y'V0TD!H3dq!LY<9b@BhV^%-#FH3?@=Xm'BjM?Li0@qlA,+lYR?t8[;m5QaFcVRLKbM9>RGbXfE&IhKP`'ltE'a
%8=2]SY&ABIh;a9A_Ydj\n##-n/2=j_i$t<_H?-\;AX(E75T\)G6jrG>oSCnf%P&K?[C*H#o;>.Pb(I+*nM1Q"2sP\P>4I!Z2C3sN
%2BB2?Mn!Gjk]LuPg?-Ljj(_EpHD:WY>DtQ)?e,J#`8SDW7RZHB4/3sr.7,Vd?:V]VK(_ZL`R>Ss8V^Jd3bm1\ER?bnlfbjcc'-O%
%>k_DDN>>K0JO#<9LKEQGY'Zp<IN;)#9bn44ofDAt(:6#(/"X1_8ikI:,;cDPihCFef?nSPRjXuUUM]8i7LL]S?uXVp1YS?*(jaoY
%L:E[`6a%_ALAC*h.#c0XLeK,BMIYP2+o>//LK\PJN`e9Y7H6f)fYYF/fHq-Ak*;'k4l$H4R_3f#Q8SE.[^eQ<R`EYV`h8^Ng/^7e
%c,i!3I%libqT=QE]5V5:`Qm*I:A/_f*Q0>@2F27Gg\cYnaP)NlB'cOLj>Wp9nhrt'Ut.4c;nFG(1p"ZVh%9OJe'-W#mQ9O[Pa"*J
%/X?s3jM2?:)-IdkON1cpI[Q2#&1_f=3!:+'aU.JHH%!6W>LsHKHa_t0Uj&RBj<V^2\UAq$/r?=B/huV]r'N@ZBJdC^p)=6DCHRTZ
%DY8i?B:G:`<?[BGC5`gW]+#*8,I19)`L_]'E>sS]?fNR,X;K^6c<92dl"I=q3[s$EROZ8F.?R9L.b#VBr33J%og'3/RfP9DM^94.
%)*Z+pmHg[6fJ8<&jU_sXk"ANWVSo@C4u/.G+2OO7q;GjMqc-l@ZLrP8q2P5^pU)$$`st88HMM![WF*Mogi2@pQJb_,rl)%Lok6&2
%/;8^npo:^;2LJN,,Bh^BJhFQmHAD<;hhiYU=^b(%VF46]VLqo`OVUY)[>p8?b</S%G"Y!p?o"Wp$H/D#B;5`B5<[7\a3AMfWOU3U
%dA^GB%lSM*@'_76[Kn12Uc'7$C5]T8SESd5VUc.04AW&'JZh74XISR'.9:aek':/Pk>eR:KMcGV.iMSq<[=ZT_qncu2U0S_FK!`c
%UJWk$7C,C]UZ9cPJ"LLmV/.`.:bbbQ=/45\2trjEH!id?b=A4!-)3QPGL3&mM_'6g&-,@f3^V5OHWq8^_!0[RAbjO/\@c-!&oT2_
%:od9b$guF=-;.,P[6KoVZ+mS&%@n+Drf@.n)a":AE/Cdp9=bRlWhCYWOgDl)l2(Qnj-omXJQ<5f?c4TO\Crm0Oa8PqKL6_<HQiW[
%hiY-K#MIuYb/]0KFCHSc4M$Be]>+Rdp3de^5C\D;\6rM8@Z:0]A69FPBsN4r`j&U?*^V8'd(!;1N>Tt^RW29cYd-j@MP8RWZdI@g
%-0!:T&M5d%h.X_nDGN[?fF9,IC:3<)5DCZ5)V=4jC$hL/o4ot\'jQ'ii(o`U7;PFe`%*(r">-!Q9S"&UU1@Yt[:\2e`,r9R*c&/h
%FJ,a<=^ODdLiMsuCs^:ekc2/7SG#o8HjH&e)YKR_^m)4cS20+g\Mi%ObMmt3"*ir=MacK!E@%n$WS6<YJMYkB<f_H,C=e80g01=j
%Q5%r0QYP'n=hiN.fo"?p:VD*[p:774BXOBsdT1249k0-<o+bAd=p4H5=)tAlC=in@nuD,)eB<>t(tI%20!4pCZ)RE%B*YM-7qD-:
%)C@,\eAFFAo.&i[Wf!9.DkcHdbdYg>7Ko3@I(O)K-:X9Ik"ZM$6EH?b$Hk;(Bk#Uq,Ii5(Y1b0kD1\KuX&:lKMJK)9lIt:(_uC2_
%hb%;W2ud1mUPFPX2lfH^G7&FEUuOVN+b"HeEXJPjV^a0VB0<k6U;L_e^(coh+&;^=FQ+"2?DUso($EhdC@?.VKstE<6hEX%Y/ntJ
%.pXe>PfX-p?Hd>r,BZ":Cfc_g/.NH&UqR6h>0^Jl/O2o1AREK5@_3^>0o"n0;_J>n]J6>t_fc$>/M,Olc6ap,/B8mmd,Bu<15mss
%SOYn2UmTOZ_4:](4&ZSC_VGc[\9<4BRTDBKc-2d:g#?XjPiidN;b03p4Q&go2RJf4Y3c(P$Z7ZE2#)n]U]7t>/t9gC@4Jln#=cWO
%6U]B\aQsMDEHc^[m@='$=:s#))]m'Y`I[nKfSa0rlWDe!@&AW>TmIS!Cs0@G"BZJtemORU.>PDAUW_BV(7QDh3V-Y2in_'Y/$<&m
%n1!&!Y2$?0hVahNK"Z<1KV@:_+E^A`[&q9NV_m&N/iKu+O`FcD1aR!Tc+B0.:Uh"4\(jg.WG7a_H8g.?cnAign%Ic(&oY8[`(6g=
%PaFC2?O=nf0ub4X^7p>!.[JL+_-eE1D1U+P_h3abImc_25.#Pp`e3FGDUa<o#*mefW9@+.7&a6i`He4XYG:.#,&b$$-;rc0C0O&7
%%u4l)`K':!XRIe,m(1gZNlXLWqc_OQ:*/ceoYI\*eQf8O7o>JAZGJ*:)l7j$*EO$P28^/!":ResAo04Q`e+CRE[mGW4!.A?G\/.t
%QqOBV.kSPF2QtNRXGs*bRYi.T9mXqhX#P$^l?.2R=l^%de3qAi8(P@V*N$e6]3)+aV`pYS=*%=Q3NL,L'Qn1<4#gf1K5FII]c3N#
%V)*<&`1?j+TdX^);c[#>H)"@-f$<u]/b6pIBfo@+,\)MOpM3+tI:[ZlTJ)?;baJ:nEPTVEgYoNWpjG\LZe,KT1V=B)epEqdN#Y(W
%Fqb,j>]pM>+tK!F^4`op9CbF\W3,(A87Nid!So^&j[>Zc(!J\dG?kY-EW`O^;R[A_X<Acf1EK$q3(FD,ZgHrQ!C'd5?_>*acL:68
%8Qo:gAmDg/bYAEc$reHN4IoZ#;/2,an3jK;-4,h!QLIXOjpj/jA)3t26G1#j_bJ3Koc6=s)-o:4!A]VtEAaP&fo@b7Q>&B2qq=@&
%ptIa0K8c"A&k;XBfas1W,N3@R3<(QZQ2?d()He>T8qt,R2JUYdV5I8p`";NCQQ@`-$W:\&3D/$18rh23a1)u(T(iW$T(]F+2=7`2
%@LGRucV7V2&!eA+=87f'F.c\\Mu4`q$!\$r3!<HfTcg_b,O;b$hXDjSpZ->E]t`^8RXC;2$0Gsqk:e8+Ve,!#0P=!B8\n]U<TbcC
%$dZqokV>C2+t!RVcCstZ@gt99cJ2@,rnZ*Png^XRDh`"JFBmMW/U,W2b%C1QHV6Cn.rCSY:;O<FR8ROR9@:j!&:hJn8+L%^V[qp3
%R`9@O$DJ<Y=Og^hS'u-u3j*;hL39)8J<@?YI[oX_bh5IeIKe*a\=8ZV23:QC"$q.r832A]g)79FYZ4Vp+DRUoP36t>fUQ:.k)m<K
%D=N!5W.09jq_,_ZlJ(di+9)'*^YZ[(bD/kH0+NI2iQ%QS'&dn?s7m_m%56Q/1KJ.IoGR;WIt%44fDP<DHujZ/nJ(Q35CWLoo,iEB
%56(9Ha7l5*Er.HAp](0ZhnT'+mC,%Ooag5hIs:edg[E;S_tioqT>%l7"+L#,r"!+5hf:C9c[W's?iB6fO!"Age,,d*W9B;W]`5_W
%\+^t/rquTjk7@T6rmU8T:EP&]r:?fs[pT.3k<FTl:b2%c=+C.7J,8_ors)Kr@L`~>
%AI9_PrivateDataEnd
